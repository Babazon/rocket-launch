fa78fcc7909de7f318acfc141d50457b
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault2(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault2(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault2(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault2(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault2(require("@babel/runtime/helpers/inherits"));
var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));
var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GestureDetector = void 0;
var _react = _interopRequireWildcard(require("react"));
var _gesture = require("./gesture");
var _reanimatedWrapper = require("./reanimatedWrapper");
var _handlersRegistry = require("../handlersRegistry");
var _RNGestureHandlerModule = _interopRequireDefault(require("../../RNGestureHandlerModule"));
var _gestureHandlerCommon = require("../gestureHandlerCommon");
var _gestureStateManager = require("./gestureStateManager");
var _FlingGestureHandler = require("../FlingGestureHandler");
var _ForceTouchGestureHandler = require("../ForceTouchGestureHandler");
var _LongPressGestureHandler = require("../LongPressGestureHandler");
var _PanGestureHandler = require("../PanGestureHandler");
var _TapGestureHandler = require("../TapGestureHandler");
var _hoverGesture = require("./hoverGesture");
var _State = require("../../State");
var _TouchEventType = require("../../TouchEventType");
var _ActionType = require("../../ActionType");
var _utils = require("../../utils");
var _getReactNativeVersion = require("../../getReactNativeVersion");
var _getShadowNodeFromRef = require("../../getShadowNodeFromRef");
var _reactNative = require("react-native");
var _eventReceiver = require("./eventReceiver");
var _RNRenderer = require("../../RNRenderer");
var _EnableNewWebImplementation = require("../../EnableNewWebImplementation");
var _NativeViewGestureHandler = require("../NativeViewGestureHandler");
var _GestureHandlerRootViewContext = _interopRequireDefault(require("../../GestureHandlerRootViewContext"));
var _ghQueueMicrotask = require("../../ghQueueMicrotask");
var _Reanimated$default$c, _Reanimated$default;
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();
  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };
  return cache;
}
function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache();
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
var ALLOWED_PROPS = [].concat((0, _toConsumableArray2.default)(_gestureHandlerCommon.baseGestureHandlerWithMonitorProps), (0, _toConsumableArray2.default)(_TapGestureHandler.tapGestureHandlerProps), (0, _toConsumableArray2.default)(_PanGestureHandler.panGestureHandlerProps), (0, _toConsumableArray2.default)(_PanGestureHandler.panGestureHandlerCustomNativeProps), (0, _toConsumableArray2.default)(_LongPressGestureHandler.longPressGestureHandlerProps), (0, _toConsumableArray2.default)(_ForceTouchGestureHandler.forceTouchGestureHandlerProps), (0, _toConsumableArray2.default)(_FlingGestureHandler.flingGestureHandlerProps), (0, _toConsumableArray2.default)(_hoverGesture.hoverGestureHandlerProps), (0, _toConsumableArray2.default)(_NativeViewGestureHandler.nativeViewGestureHandlerProps));
function convertToHandlerTag(ref) {
  if (typeof ref === 'number') {
    return ref;
  } else if (ref instanceof _gesture.BaseGesture) {
    return ref.handlerTag;
  } else {
    var _ref$current$handlerT, _ref$current;
    return (_ref$current$handlerT = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.handlerTag) !== null && _ref$current$handlerT !== void 0 ? _ref$current$handlerT : -1;
  }
}
function extractValidHandlerTags(interactionGroup) {
  var _interactionGroup$map, _interactionGroup$map2;
  return (_interactionGroup$map = interactionGroup === null || interactionGroup === void 0 ? void 0 : (_interactionGroup$map2 = interactionGroup.map(convertToHandlerTag)) === null || _interactionGroup$map2 === void 0 ? void 0 : _interactionGroup$map2.filter(function (tag) {
    return tag > 0;
  })) !== null && _interactionGroup$map !== void 0 ? _interactionGroup$map : [];
}
function dropHandlers(preparedGesture) {
  for (var handler of preparedGesture.config) {
    _RNGestureHandlerModule.default.dropGestureHandler(handler.handlerTag);
    (0, _handlersRegistry.unregisterHandler)(handler.handlerTag, handler.config.testId);
  }
  (0, _gestureHandlerCommon.scheduleFlushOperations)();
}
function checkGestureCallbacksForWorklets(gesture) {
  if (gesture.config.runOnJS) {
    return;
  }
  var areSomeNotWorklets = gesture.handlers.isWorklet.includes(false);
  var areSomeWorklets = gesture.handlers.isWorklet.includes(true);
  if (areSomeNotWorklets && areSomeWorklets) {
    console.error((0, _utils.tagMessage)(`Some of the callbacks in the gesture are worklets and some are not. Either make sure that all calbacks are marked as 'worklet' if you wish to run them on the UI thread or use '.runOnJS(true)' modifier on the gesture explicitly to run all callbacks on the JS thread.`));
  }
}
function attachHandlers(_ref) {
  var preparedGesture = _ref.preparedGesture,
    gestureConfig = _ref.gestureConfig,
    gesture = _ref.gesture,
    viewTag = _ref.viewTag,
    webEventHandlersRef = _ref.webEventHandlersRef,
    mountedRef = _ref.mountedRef;
  if (!preparedGesture.firstExecution) {
    gestureConfig.initialize();
  } else {
    preparedGesture.firstExecution = false;
  }
  (0, _ghQueueMicrotask.ghQueueMicrotask)(function () {
    if (!mountedRef.current) {
      return;
    }
    gestureConfig.prepare();
  });
  for (var handler of gesture) {
    checkGestureCallbacksForWorklets(handler);
    _RNGestureHandlerModule.default.createGestureHandler(handler.handlerName, handler.handlerTag, (0, _gestureHandlerCommon.filterConfig)(handler.config, ALLOWED_PROPS));
    (0, _handlersRegistry.registerHandler)(handler.handlerTag, handler, handler.config.testId);
  }
  (0, _ghQueueMicrotask.ghQueueMicrotask)(function () {
    if (!mountedRef.current) {
      return;
    }
    for (var _handler of gesture) {
      var requireToFail = [];
      if (_handler.config.requireToFail) {
        requireToFail = extractValidHandlerTags(_handler.config.requireToFail);
      }
      var simultaneousWith = [];
      if (_handler.config.simultaneousWith) {
        simultaneousWith = extractValidHandlerTags(_handler.config.simultaneousWith);
      }
      var blocksHandlers = [];
      if (_handler.config.blocksHandlers) {
        blocksHandlers = extractValidHandlerTags(_handler.config.blocksHandlers);
      }
      _RNGestureHandlerModule.default.updateGestureHandler(_handler.handlerTag, (0, _gestureHandlerCommon.filterConfig)(_handler.config, ALLOWED_PROPS, {
        simultaneousHandlers: simultaneousWith,
        waitFor: requireToFail,
        blocksHandlers: blocksHandlers
      }));
    }
    (0, _gestureHandlerCommon.scheduleFlushOperations)();
  });
  preparedGesture.config = gesture;
  for (var _gesture2 of preparedGesture.config) {
    var actionType = _gesture2.shouldUseReanimated ? _ActionType.ActionType.REANIMATED_WORKLET : _ActionType.ActionType.JS_FUNCTION_NEW_API;
    if (_reactNative.Platform.OS === 'web') {
      _RNGestureHandlerModule.default.attachGestureHandler(_gesture2.handlerTag, viewTag, _ActionType.ActionType.JS_FUNCTION_OLD_API, webEventHandlersRef);
    } else {
      _RNGestureHandlerModule.default.attachGestureHandler(_gesture2.handlerTag, viewTag, actionType);
    }
  }
  if (preparedGesture.animatedHandlers) {
    var isAnimatedGesture = function isAnimatedGesture(g) {
      return g.shouldUseReanimated;
    };
    preparedGesture.animatedHandlers.value = gesture.filter(isAnimatedGesture).map(function (g) {
      return g.handlers;
    });
  }
}
function updateHandlers(preparedGesture, gestureConfig, gesture, mountedRef) {
  gestureConfig.prepare();
  for (var i = 0; i < gesture.length; i++) {
    var handler = preparedGesture.config[i];
    checkGestureCallbacksForWorklets(handler);
    if (gesture[i].handlerTag !== handler.handlerTag) {
      gesture[i].handlerTag = handler.handlerTag;
      gesture[i].handlers.handlerTag = handler.handlerTag;
    }
  }
  (0, _ghQueueMicrotask.ghQueueMicrotask)(function () {
    if (!mountedRef.current) {
      return;
    }
    for (var _i = 0; _i < gesture.length; _i++) {
      var _handler2 = preparedGesture.config[_i];
      _handler2.config = gesture[_i].config;
      _handler2.handlers = gesture[_i].handlers;
      var requireToFail = extractValidHandlerTags(_handler2.config.requireToFail);
      var simultaneousWith = extractValidHandlerTags(_handler2.config.simultaneousWith);
      _RNGestureHandlerModule.default.updateGestureHandler(_handler2.handlerTag, (0, _gestureHandlerCommon.filterConfig)(_handler2.config, ALLOWED_PROPS, {
        simultaneousHandlers: simultaneousWith,
        waitFor: requireToFail
      }));
      (0, _handlersRegistry.registerHandler)(_handler2.handlerTag, _handler2, _handler2.config.testId);
    }
    if (preparedGesture.animatedHandlers) {
      var _preparedGesture$anim;
      var previousHandlersValue = (_preparedGesture$anim = preparedGesture.animatedHandlers.value) !== null && _preparedGesture$anim !== void 0 ? _preparedGesture$anim : [];
      var newHandlersValue = preparedGesture.config.filter(function (g) {
        return g.shouldUseReanimated;
      }).map(function (g) {
        return g.handlers;
      });
      var shouldUpdateSharedValue = previousHandlersValue.length !== newHandlersValue.length;
      if (!shouldUpdateSharedValue) {
        for (var _i2 = 0; _i2 < newHandlersValue.length; _i2++) {
          if (newHandlersValue[_i2].gestureId !== previousHandlersValue[_i2].gestureId) {
            shouldUpdateSharedValue = true;
            break;
          }
        }
      }
      if (shouldUpdateSharedValue) {
        preparedGesture.animatedHandlers.value = newHandlersValue;
      }
    }
    (0, _gestureHandlerCommon.scheduleFlushOperations)();
  });
}
function needsToReattach(preparedGesture, gesture) {
  if (gesture.length !== preparedGesture.config.length) {
    return true;
  }
  for (var i = 0; i < gesture.length; i++) {
    if (gesture[i].handlerName !== preparedGesture.config[i].handlerName || gesture[i].shouldUseReanimated !== preparedGesture.config[i].shouldUseReanimated) {
      return true;
    }
  }
  return false;
}
function isStateChangeEvent(event) {
  'worklet';
  return event.oldState != null;
}
function isTouchEvent(event) {
  'worklet';

  return event.eventType != null;
}
function getHandler(type, gesture) {
  'worklet';

  switch (type) {
    case _gesture.CALLBACK_TYPE.BEGAN:
      return gesture.onBegin;
    case _gesture.CALLBACK_TYPE.START:
      return gesture.onStart;
    case _gesture.CALLBACK_TYPE.UPDATE:
      return gesture.onUpdate;
    case _gesture.CALLBACK_TYPE.CHANGE:
      return gesture.onChange;
    case _gesture.CALLBACK_TYPE.END:
      return gesture.onEnd;
    case _gesture.CALLBACK_TYPE.FINALIZE:
      return gesture.onFinalize;
    case _gesture.CALLBACK_TYPE.TOUCHES_DOWN:
      return gesture.onTouchesDown;
    case _gesture.CALLBACK_TYPE.TOUCHES_MOVE:
      return gesture.onTouchesMove;
    case _gesture.CALLBACK_TYPE.TOUCHES_UP:
      return gesture.onTouchesUp;
    case _gesture.CALLBACK_TYPE.TOUCHES_CANCELLED:
      return gesture.onTouchesCancelled;
  }
}
function touchEventTypeToCallbackType(eventType) {
  'worklet';

  switch (eventType) {
    case _TouchEventType.TouchEventType.TOUCHES_DOWN:
      return _gesture.CALLBACK_TYPE.TOUCHES_DOWN;
    case _TouchEventType.TouchEventType.TOUCHES_MOVE:
      return _gesture.CALLBACK_TYPE.TOUCHES_MOVE;
    case _TouchEventType.TouchEventType.TOUCHES_UP:
      return _gesture.CALLBACK_TYPE.TOUCHES_UP;
    case _TouchEventType.TouchEventType.TOUCHES_CANCELLED:
      return _gesture.CALLBACK_TYPE.TOUCHES_CANCELLED;
  }
  return _gesture.CALLBACK_TYPE.UNDEFINED;
}
function runWorklet(type, gesture, event) {
  'worklet';

  var handler = getHandler(type, gesture);
  if (gesture.isWorklet[type]) {
    for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      args[_key - 3] = arguments[_key];
    }
    handler === null || handler === void 0 ? void 0 : handler.apply(void 0, [event].concat(args));
  } else if (handler) {
    console.warn((0, _utils.tagMessage)('Animated gesture callback must be a worklet'));
  }
}
function useAnimatedGesture(preparedGesture, needsRebuild) {
  if (!_reanimatedWrapper.Reanimated) {
    return;
  }
  var sharedHandlersCallbacks = _reanimatedWrapper.Reanimated.useSharedValue(null);
  var lastUpdateEvent = _reanimatedWrapper.Reanimated.useSharedValue([]);
  var stateControllers = [];
  var callback = function callback(event) {
    'worklet';

    var currentCallback = sharedHandlersCallbacks.value;
    if (!currentCallback) {
      return;
    }
    for (var i = 0; i < currentCallback.length; i++) {
      var gesture = currentCallback[i];
      if (event.handlerTag === gesture.handlerTag) {
        if (isStateChangeEvent(event)) {
          if (event.oldState === _State.State.UNDETERMINED && event.state === _State.State.BEGAN) {
            runWorklet(_gesture.CALLBACK_TYPE.BEGAN, gesture, event);
          } else if ((event.oldState === _State.State.BEGAN || event.oldState === _State.State.UNDETERMINED) && event.state === _State.State.ACTIVE) {
            runWorklet(_gesture.CALLBACK_TYPE.START, gesture, event);
            lastUpdateEvent.value[gesture.handlerTag] = undefined;
          } else if (event.oldState !== event.state && event.state === _State.State.END) {
            if (event.oldState === _State.State.ACTIVE) {
              runWorklet(_gesture.CALLBACK_TYPE.END, gesture, event, true);
            }
            runWorklet(_gesture.CALLBACK_TYPE.FINALIZE, gesture, event, true);
          } else if ((event.state === _State.State.FAILED || event.state === _State.State.CANCELLED) && event.state !== event.oldState) {
            if (event.oldState === _State.State.ACTIVE) {
              runWorklet(_gesture.CALLBACK_TYPE.END, gesture, event, false);
            }
            runWorklet(_gesture.CALLBACK_TYPE.FINALIZE, gesture, event, false);
          }
        } else if (isTouchEvent(event)) {
          if (!stateControllers[i]) {
            stateControllers[i] = _gestureStateManager.GestureStateManager.create(event.handlerTag);
          }
          if (event.eventType !== _TouchEventType.TouchEventType.UNDETERMINED) {
            runWorklet(touchEventTypeToCallbackType(event.eventType), gesture, event, stateControllers[i]);
          }
        } else {
          runWorklet(_gesture.CALLBACK_TYPE.UPDATE, gesture, event);
          if (gesture.onChange && gesture.changeEventCalculator) {
            var _gesture$changeEventC;
            runWorklet(_gesture.CALLBACK_TYPE.CHANGE, gesture, (_gesture$changeEventC = gesture.changeEventCalculator) === null || _gesture$changeEventC === void 0 ? void 0 : _gesture$changeEventC.call(gesture, event, lastUpdateEvent.value[gesture.handlerTag]));
            lastUpdateEvent.value[gesture.handlerTag] = event;
          }
        }
      }
    }
  };
  var event = _reanimatedWrapper.Reanimated.useEvent(callback, ['onGestureHandlerStateChange', 'onGestureHandlerEvent'], needsRebuild);
  preparedGesture.animatedEventHandler = event;
  preparedGesture.animatedHandlers = sharedHandlersCallbacks;
}
function validateDetectorChildren(ref) {
  if (__DEV__ && _reactNative.Platform.OS !== 'web') {
    var REACT_NATIVE_VERSION = (0, _getReactNativeVersion.getReactNativeVersion)();
    var wrapType = REACT_NATIVE_VERSION.minor > 63 || REACT_NATIVE_VERSION.major > 0 ? ref._reactInternals.elementType : ref._reactInternalFiber.elementType;
    var instance = _RNRenderer.RNRenderer.findHostInstance_DEPRECATED(ref)._internalFiberInstanceHandleDEV;
    while (instance && instance.elementType !== wrapType) {
      if (instance.sibling) {
        throw new Error('GestureDetector has more than one native view as its children. This can happen if you are using a custom component that renders multiple views, like React.Fragment. You should wrap content of GestureDetector with a <View> or <Animated.View>.');
      }
      instance = instance.return;
    }
  }
}
var applyUserSelectProp = function applyUserSelectProp(userSelect, gesture) {
  for (var g of gesture.toGestureArray()) {
    g.config.userSelect = userSelect;
  }
};
var applyEnableContextMenuProp = function applyEnableContextMenuProp(enableContextMenu, gesture) {
  for (var g of gesture.toGestureArray()) {
    g.config.enableContextMenu = enableContextMenu;
  }
};
var GestureDetector = function GestureDetector(props) {
  var rootViewContext = (0, _react.useContext)(_GestureHandlerRootViewContext.default);
  if (__DEV__ && !rootViewContext && !(0, _utils.isJestEnv)() && _reactNative.Platform.OS !== 'web') {
    throw new Error('GestureDetector must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.');
  }
  var gestureConfig = props.gesture;
  if (props.userSelect) {
    applyUserSelectProp(props.userSelect, gestureConfig);
  }
  if (props.enableContextMenu !== undefined) {
    applyEnableContextMenuProp(props.enableContextMenu, gestureConfig);
  }
  var gesture = gestureConfig.toGestureArray();
  var useReanimatedHook = gesture.some(function (g) {
    return g.shouldUseReanimated;
  });
  var state = (0, _react.useRef)({
    firstRender: true,
    viewRef: null,
    previousViewTag: -1,
    forceReattach: false
  }).current;
  var mountedRef = (0, _react.useRef)(false);
  var webEventHandlersRef = (0, _react.useRef)({
    onGestureHandlerEvent: function onGestureHandlerEvent(e) {
      (0, _eventReceiver.onGestureHandlerEvent)(e.nativeEvent);
    },
    onGestureHandlerStateChange: (0, _EnableNewWebImplementation.isNewWebImplementationEnabled)() ? function (e) {
      (0, _eventReceiver.onGestureHandlerEvent)(e.nativeEvent);
    } : undefined
  });
  var _ref2 = (0, _react.useState)(false),
    _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
    renderState = _ref3[0],
    setRenderState = _ref3[1];
  function forceRender() {
    setRenderState(!renderState);
  }
  var preparedGesture = _react.default.useRef({
    config: gesture,
    animatedEventHandler: null,
    animatedHandlers: null,
    firstExecution: true,
    useReanimatedHook: useReanimatedHook
  }).current;
  if (useReanimatedHook !== preparedGesture.useReanimatedHook) {
    throw new Error((0, _utils.tagMessage)('You cannot change the thread the callbacks are ran on while the app is running'));
  }
  function onHandlersUpdate(skipConfigUpdate) {
    var viewTag = (0, _gestureHandlerCommon.findNodeHandle)(state.viewRef);
    var forceReattach = viewTag !== state.previousViewTag;
    if (forceReattach || needsToReattach(preparedGesture, gesture)) {
      validateDetectorChildren(state.viewRef);
      dropHandlers(preparedGesture);
      attachHandlers({
        preparedGesture: preparedGesture,
        gestureConfig: gestureConfig,
        gesture: gesture,
        webEventHandlersRef: webEventHandlersRef,
        viewTag: viewTag,
        mountedRef: mountedRef
      });
      state.previousViewTag = viewTag;
      state.forceReattach = forceReattach;
      if (forceReattach) {
        forceRender();
      }
    } else if (!skipConfigUpdate) {
      updateHandlers(preparedGesture, gestureConfig, gesture, mountedRef);
    }
  }
  var needsToRebuildReanimatedEvent = preparedGesture.firstExecution || needsToReattach(preparedGesture, gesture) || state.forceReattach;
  state.forceReattach = false;
  if (preparedGesture.firstExecution) {
    gestureConfig.initialize();
  }
  if (useReanimatedHook) {
    useAnimatedGesture(preparedGesture, needsToRebuildReanimatedEvent);
  }
  (0, _react.useEffect)(function () {
    var viewTag = (0, _gestureHandlerCommon.findNodeHandle)(state.viewRef);
    state.firstRender = true;
    mountedRef.current = true;
    validateDetectorChildren(state.viewRef);
    attachHandlers({
      preparedGesture: preparedGesture,
      gestureConfig: gestureConfig,
      gesture: gesture,
      webEventHandlersRef: webEventHandlersRef,
      viewTag: viewTag,
      mountedRef: mountedRef
    });
    return function () {
      mountedRef.current = false;
      dropHandlers(preparedGesture);
    };
  }, []);
  (0, _react.useEffect)(function () {
    if (!state.firstRender) {
      onHandlersUpdate();
    } else {
      state.firstRender = false;
    }
  }, [props]);
  var refFunction = function refFunction(ref) {
    if (ref !== null) {
      state.viewRef = ref;
      if (state.previousViewTag === -1) {
        state.previousViewTag = (0, _gestureHandlerCommon.findNodeHandle)(state.viewRef);
      }
      onHandlersUpdate(true);
      if ((0, _utils.isFabric)() && global.isFormsStackingContext) {
        var node = (0, _getShadowNodeFromRef.getShadowNodeFromRef)(ref);
        if (global.isFormsStackingContext(node) === false) {
          console.error((0, _utils.tagMessage)('GestureDetector has received a child that may get view-flattened. ' + '\nTo prevent it from misbehaving you need to wrap the child with a `<View collapsable={false}>`.'));
        }
      }
    }
  };
  if (useReanimatedHook) {
    return _react.default.createElement(AnimatedWrap, {
      ref: refFunction,
      onGestureHandlerEvent: preparedGesture.animatedEventHandler
    }, props.children);
  } else {
    return _react.default.createElement(Wrap, {
      ref: refFunction
    }, props.children);
  }
};
exports.GestureDetector = GestureDetector;
var Wrap = function (_react$default$Compon) {
  function Wrap() {
    (0, _classCallCheck2.default)(this, Wrap);
    return _callSuper(this, Wrap, arguments);
  }
  (0, _inherits2.default)(Wrap, _react$default$Compon);
  return (0, _createClass2.default)(Wrap, [{
    key: "render",
    value: function render() {
      try {
        var child = _react.default.Children.only(this.props.children);
        return _react.default.cloneElement(child, {
          collapsable: false
        }, child.props.children);
      } catch (e) {
        throw new Error((0, _utils.tagMessage)(`GestureDetector got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`));
      }
    }
  }]);
}(_react.default.Component);
var AnimatedWrap = (_Reanimated$default$c = _reanimatedWrapper.Reanimated === null || _reanimatedWrapper.Reanimated === void 0 ? void 0 : (_Reanimated$default = _reanimatedWrapper.Reanimated.default) === null || _Reanimated$default === void 0 ? void 0 : _Reanimated$default.createAnimatedComponent(Wrap)) !== null && _Reanimated$default$c !== void 0 ? _Reanimated$default$c : Wrap;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,