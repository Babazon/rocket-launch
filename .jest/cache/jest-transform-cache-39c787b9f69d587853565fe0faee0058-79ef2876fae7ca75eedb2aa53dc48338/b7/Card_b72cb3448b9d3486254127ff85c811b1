eb510c371dc4d2b6a34db1cefb5a4dcc
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault2(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault2(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault2(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault2(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault2(require("@babel/runtime/helpers/inherits"));
var _excluded = ["styleInterpolator", "interpolationIndex", "current", "gesture", "next", "layout", "insets", "overlay", "overlayEnabled", "shadowEnabled", "gestureEnabled", "gestureDirection", "pageOverflowEnabled", "headerDarkContent", "children", "containerStyle", "contentStyle"];
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getIsModalPresentation = exports.default = void 0;
var _color = _interopRequireDefault(require("color"));
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _CardStyleInterpolators = require("../../TransitionConfigs/CardStyleInterpolators");
var _CardAnimationContext = _interopRequireDefault(require("../../utils/CardAnimationContext"));
var _getDistanceForDirection = _interopRequireDefault(require("../../utils/getDistanceForDirection"));
var _getInvertedMultiplier = _interopRequireDefault(require("../../utils/getInvertedMultiplier"));
var _memoize = _interopRequireDefault(require("../../utils/memoize"));
var _GestureHandler = require("../GestureHandler");
var _ModalStatusBarManager = _interopRequireDefault(require("../ModalStatusBarManager"));
var _CardSheet = _interopRequireDefault(require("./CardSheet"));
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var GESTURE_VELOCITY_IMPACT = 0.3;
var TRUE = 1;
var FALSE = 0;
var GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;
var GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;
var useNativeDriver = _reactNative.Platform.OS !== 'web';
var hasOpacityStyle = function hasOpacityStyle(style) {
  if (style) {
    var flattenedStyle = _reactNative.StyleSheet.flatten(style);
    return flattenedStyle.opacity != null;
  }
  return false;
};
var Card = function (_React$Component) {
  function Card() {
    var _this;
    (0, _classCallCheck2.default)(this, Card);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, Card, [].concat(args));
    _this.isCurrentlyMounted = false;
    _this.isClosing = new _reactNative.Animated.Value(FALSE);
    _this.inverted = new _reactNative.Animated.Value((0, _getInvertedMultiplier.default)(_this.props.gestureDirection));
    _this.layout = {
      width: new _reactNative.Animated.Value(_this.props.layout.width),
      height: new _reactNative.Animated.Value(_this.props.layout.height)
    };
    _this.isSwiping = new _reactNative.Animated.Value(FALSE);
    _this.animate = function (_ref2) {
      var closing = _ref2.closing,
        velocity = _ref2.velocity;
      var _this$props = _this.props,
        gesture = _this$props.gesture,
        transitionSpec = _this$props.transitionSpec,
        onOpen = _this$props.onOpen,
        onClose = _this$props.onClose,
        onTransition = _this$props.onTransition;
      var toValue = _this.getAnimateToValue(Object.assign({}, _this.props, {
        closing: closing
      }));
      _this.lastToValue = toValue;
      _this.isClosing.setValue(closing ? TRUE : FALSE);
      var spec = closing ? transitionSpec.close : transitionSpec.open;
      var animation = spec.animation === 'spring' ? _reactNative.Animated.spring : _reactNative.Animated.timing;
      _this.setPointerEventsEnabled(!closing);
      _this.handleStartInteraction();
      clearTimeout(_this.pendingGestureCallback);
      onTransition === null || onTransition === void 0 ? void 0 : onTransition({
        closing: closing,
        gesture: velocity !== undefined
      });
      animation(gesture, Object.assign({}, spec.config, {
        velocity: velocity,
        toValue: toValue,
        useNativeDriver: useNativeDriver,
        isInteraction: false
      })).start(function (_ref3) {
        var finished = _ref3.finished;
        _this.handleEndInteraction();
        clearTimeout(_this.pendingGestureCallback);
        if (finished) {
          if (closing) {
            onClose();
          } else {
            onOpen();
          }
          if (_this.isCurrentlyMounted) {
            _this.forceUpdate();
          }
        }
      });
    };
    _this.getAnimateToValue = function (_ref4) {
      var closing = _ref4.closing,
        layout = _ref4.layout,
        gestureDirection = _ref4.gestureDirection;
      if (!closing) {
        return 0;
      }
      return (0, _getDistanceForDirection.default)(layout, gestureDirection);
    };
    _this.setPointerEventsEnabled = function (enabled) {
      var _this$ref$current;
      var pointerEvents = enabled ? 'box-none' : 'none';
      (_this$ref$current = _this.ref.current) === null || _this$ref$current === void 0 ? void 0 : _this$ref$current.setPointerEvents(pointerEvents);
    };
    _this.handleStartInteraction = function () {
      if (_this.interactionHandle === undefined) {
        _this.interactionHandle = _reactNative.InteractionManager.createInteractionHandle();
      }
    };
    _this.handleEndInteraction = function () {
      if (_this.interactionHandle !== undefined) {
        _reactNative.InteractionManager.clearInteractionHandle(_this.interactionHandle);
        _this.interactionHandle = undefined;
      }
    };
    _this.handleGestureStateChange = function (_ref5) {
      var nativeEvent = _ref5.nativeEvent;
      var _this$props2 = _this.props,
        layout = _this$props2.layout,
        onClose = _this$props2.onClose,
        onGestureBegin = _this$props2.onGestureBegin,
        onGestureCanceled = _this$props2.onGestureCanceled,
        onGestureEnd = _this$props2.onGestureEnd,
        gestureDirection = _this$props2.gestureDirection,
        gestureVelocityImpact = _this$props2.gestureVelocityImpact;
      switch (nativeEvent.state) {
        case _GestureHandler.GestureState.ACTIVE:
          _this.isSwiping.setValue(TRUE);
          _this.handleStartInteraction();
          onGestureBegin === null || onGestureBegin === void 0 ? void 0 : onGestureBegin();
          break;
        case _GestureHandler.GestureState.CANCELLED:
          {
            _this.isSwiping.setValue(FALSE);
            _this.handleEndInteraction();
            var velocity = gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? nativeEvent.velocityY : nativeEvent.velocityX;
            _this.animate({
              closing: _this.props.closing,
              velocity: velocity
            });
            onGestureCanceled === null || onGestureCanceled === void 0 ? void 0 : onGestureCanceled();
            break;
          }
        case _GestureHandler.GestureState.END:
          {
            _this.isSwiping.setValue(FALSE);
            var distance;
            var translation;
            var _velocity;
            if (gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted') {
              distance = layout.height;
              translation = nativeEvent.translationY;
              _velocity = nativeEvent.velocityY;
            } else {
              distance = layout.width;
              translation = nativeEvent.translationX;
              _velocity = nativeEvent.velocityX;
            }
            var closing = (translation + _velocity * gestureVelocityImpact) * (0, _getInvertedMultiplier.default)(gestureDirection) > distance / 2 ? _velocity !== 0 || translation !== 0 : _this.props.closing;
            _this.animate({
              closing: closing,
              velocity: _velocity
            });
            if (closing) {
              _this.pendingGestureCallback = setTimeout(function () {
                onClose();
                _this.forceUpdate();
              }, 32);
            }
            onGestureEnd === null || onGestureEnd === void 0 ? void 0 : onGestureEnd();
            break;
          }
      }
    };
    _this.getInterpolatedStyle = (0, _memoize.default)(function (styleInterpolator, animation) {
      return styleInterpolator(animation);
    });
    _this.getCardAnimation = (0, _memoize.default)(function (interpolationIndex, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) {
      return {
        index: interpolationIndex,
        current: {
          progress: current
        },
        next: next && {
          progress: next
        },
        closing: _this.isClosing,
        swiping: _this.isSwiping,
        inverted: _this.inverted,
        layouts: {
          screen: layout
        },
        insets: {
          top: insetTop,
          right: insetRight,
          bottom: insetBottom,
          left: insetLeft
        }
      };
    });
    _this.ref = React.createRef();
    return _this;
  }
  (0, _inherits2.default)(Card, _React$Component);
  return (0, _createClass2.default)(Card, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.animate({
        closing: this.props.closing
      });
      this.isCurrentlyMounted = true;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props3 = this.props,
        layout = _this$props3.layout,
        gestureDirection = _this$props3.gestureDirection,
        closing = _this$props3.closing;
      var width = layout.width,
        height = layout.height;
      if (width !== prevProps.layout.width) {
        this.layout.width.setValue(width);
      }
      if (height !== prevProps.layout.height) {
        this.layout.height.setValue(height);
      }
      if (gestureDirection !== prevProps.gestureDirection) {
        this.inverted.setValue((0, _getInvertedMultiplier.default)(gestureDirection));
      }
      var toValue = this.getAnimateToValue(this.props);
      if (this.getAnimateToValue(prevProps) !== toValue || this.lastToValue !== toValue) {
        this.animate({
          closing: closing
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.props.gesture.stopAnimation();
      this.isCurrentlyMounted = false;
      this.handleEndInteraction();
    }
  }, {
    key: "gestureActivationCriteria",
    value: function gestureActivationCriteria() {
      var _this$props4 = this.props,
        layout = _this$props4.layout,
        gestureDirection = _this$props4.gestureDirection,
        gestureResponseDistance = _this$props4.gestureResponseDistance;
      var enableTrackpadTwoFingerGesture = true;
      var distance = gestureResponseDistance !== undefined ? gestureResponseDistance : gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? GESTURE_RESPONSE_DISTANCE_VERTICAL : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;
      if (gestureDirection === 'vertical') {
        return {
          maxDeltaX: 15,
          minOffsetY: 5,
          hitSlop: {
            bottom: -layout.height + distance
          },
          enableTrackpadTwoFingerGesture: enableTrackpadTwoFingerGesture
        };
      } else if (gestureDirection === 'vertical-inverted') {
        return {
          maxDeltaX: 15,
          minOffsetY: -5,
          hitSlop: {
            top: -layout.height + distance
          },
          enableTrackpadTwoFingerGesture: enableTrackpadTwoFingerGesture
        };
      } else {
        var hitSlop = -layout.width + distance;
        var invertedMultiplier = (0, _getInvertedMultiplier.default)(gestureDirection);
        if (invertedMultiplier === 1) {
          return {
            minOffsetX: 5,
            maxDeltaY: 20,
            hitSlop: {
              right: hitSlop
            },
            enableTrackpadTwoFingerGesture: enableTrackpadTwoFingerGesture
          };
        } else {
          return {
            minOffsetX: -5,
            maxDeltaY: 20,
            hitSlop: {
              left: hitSlop
            },
            enableTrackpadTwoFingerGesture: enableTrackpadTwoFingerGesture
          };
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props5 = this.props,
        styleInterpolator = _this$props5.styleInterpolator,
        interpolationIndex = _this$props5.interpolationIndex,
        current = _this$props5.current,
        gesture = _this$props5.gesture,
        next = _this$props5.next,
        layout = _this$props5.layout,
        insets = _this$props5.insets,
        overlay = _this$props5.overlay,
        overlayEnabled = _this$props5.overlayEnabled,
        shadowEnabled = _this$props5.shadowEnabled,
        gestureEnabled = _this$props5.gestureEnabled,
        gestureDirection = _this$props5.gestureDirection,
        pageOverflowEnabled = _this$props5.pageOverflowEnabled,
        headerDarkContent = _this$props5.headerDarkContent,
        children = _this$props5.children,
        customContainerStyle = _this$props5.containerStyle,
        contentStyle = _this$props5.contentStyle,
        rest = (0, _objectWithoutProperties2.default)(_this$props5, _excluded);
      var interpolationProps = this.getCardAnimation(interpolationIndex, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);
      var interpolatedStyle = this.getInterpolatedStyle(styleInterpolator, interpolationProps);
      var containerStyle = interpolatedStyle.containerStyle,
        cardStyle = interpolatedStyle.cardStyle,
        overlayStyle = interpolatedStyle.overlayStyle,
        shadowStyle = interpolatedStyle.shadowStyle;
      var handleGestureEvent = gestureEnabled ? _reactNative.Animated.event([{
        nativeEvent: gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? {
          translationY: gesture
        } : {
          translationX: gesture
        }
      }], {
        useNativeDriver: useNativeDriver
      }) : undefined;
      var _reactNative$StyleShe = _reactNative.StyleSheet.flatten(contentStyle || {}),
        backgroundColor = _reactNative$StyleShe.backgroundColor;
      var isTransparent = typeof backgroundColor === 'string' ? (0, _color.default)(backgroundColor).alpha() === 0 : false;
      return React.createElement(_CardAnimationContext.default.Provider, {
        value: interpolationProps
      }, _reactNative.Platform.OS === 'ios' && overlayEnabled && next && getIsModalPresentation(styleInterpolator) ? React.createElement(_ModalStatusBarManager.default, {
        dark: headerDarkContent,
        layout: layout,
        insets: insets,
        style: cardStyle
      }) : null, React.createElement(_reactNative.Animated.View, {
        style: {
          opacity: current
        },
        collapsable: false
      }), React.createElement(_reactNative.View, _extends({
        pointerEvents: "box-none",
        collapsable: false
      }, rest), overlayEnabled ? React.createElement(_reactNative.View, {
        pointerEvents: "box-none",
        style: _reactNative.StyleSheet.absoluteFill
      }, overlay({
        style: overlayStyle
      })) : null, React.createElement(_reactNative.Animated.View, {
        style: [styles.container, containerStyle, customContainerStyle],
        pointerEvents: "box-none"
      }, React.createElement(_GestureHandler.PanGestureHandler, _extends({
        enabled: layout.width !== 0 && gestureEnabled,
        onGestureEvent: handleGestureEvent,
        onHandlerStateChange: this.handleGestureStateChange
      }, this.gestureActivationCriteria()), React.createElement(_reactNative.Animated.View, {
        needsOffscreenAlphaCompositing: hasOpacityStyle(cardStyle),
        style: [styles.container, cardStyle]
      }, shadowEnabled && shadowStyle && !isTransparent ? React.createElement(_reactNative.Animated.View, {
        style: [styles.shadow, gestureDirection === 'horizontal' ? [styles.shadowHorizontal, styles.shadowLeft] : gestureDirection === 'horizontal-inverted' ? [styles.shadowHorizontal, styles.shadowRight] : gestureDirection === 'vertical' ? [styles.shadowVertical, styles.shadowTop] : [styles.shadowVertical, styles.shadowBottom], {
          backgroundColor: backgroundColor
        }, shadowStyle],
        pointerEvents: "none"
      }) : null, React.createElement(_CardSheet.default, {
        ref: this.ref,
        enabled: pageOverflowEnabled,
        layout: layout,
        style: contentStyle
      }, children))))));
    }
  }]);
}(React.Component);
Card.defaultProps = {
  shadowEnabled: false,
  gestureEnabled: true,
  gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,
  overlay: function overlay(_ref) {
    var style = _ref.style;
    return style ? React.createElement(_reactNative.Animated.View, {
      pointerEvents: "none",
      style: [styles.overlay, style]
    }) : null;
  }
};
exports.default = Card;
var getIsModalPresentation = function getIsModalPresentation(cardStyleInterpolator) {
  return cardStyleInterpolator === _CardStyleInterpolators.forModalPresentationIOS || cardStyleInterpolator.name === 'forModalPresentationIOS';
};
exports.getIsModalPresentation = getIsModalPresentation;
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1
  },
  overlay: {
    flex: 1,
    backgroundColor: '#000'
  },
  shadow: {
    position: 'absolute',
    shadowRadius: 5,
    shadowColor: '#000',
    shadowOpacity: 0.3
  },
  shadowHorizontal: {
    top: 0,
    bottom: 0,
    width: 3,
    shadowOffset: {
      width: -1,
      height: 1
    }
  },
  shadowLeft: {
    left: 0
  },
  shadowRight: {
    right: 0
  },
  shadowVertical: {
    left: 0,
    right: 0,
    height: 3,
    shadowOffset: {
      width: 1,
      height: -1
    }
  },
  shadowTop: {
    top: 0
  },
  shadowBottom: {
    bottom: 0
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,