ff197acce6fea16a0297285d692e0264
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = void 0;
var _codegenNativeCommands = _interopRequireDefault(require("../../Utilities/codegenNativeCommands"));
var _codegenNativeComponent = _interopRequireDefault(require("../../Utilities/codegenNativeComponent"));
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var NativeComponentRegistry = require('react-native/Libraries/NativeComponent/NativeComponentRegistry');
var _require = require('react-native/Libraries/NativeComponent/ViewConfigIgnore'),
  ConditionallyIgnoredEventHandlers = _require.ConditionallyIgnoredEventHandlers;
var _require2 = require("react-native/Libraries/ReactNative/RendererProxy"),
  dispatchCommand = _require2.dispatchCommand;
var nativeComponentName = 'AndroidSwitch';
var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
  uiViewClassName: 'AndroidSwitch',
  bubblingEventTypes: {
    topChange: {
      phasedRegistrationNames: {
        captured: 'onChangeCapture',
        bubbled: 'onChange'
      }
    }
  },
  validAttributes: Object.assign({
    disabled: true,
    enabled: true,
    thumbColor: {
      process: require('react-native/Libraries/StyleSheet/processColor').default
    },
    trackColorForFalse: {
      process: require('react-native/Libraries/StyleSheet/processColor').default
    },
    trackColorForTrue: {
      process: require('react-native/Libraries/StyleSheet/processColor').default
    },
    value: true,
    on: true,
    thumbTintColor: {
      process: require('react-native/Libraries/StyleSheet/processColor').default
    },
    trackTintColor: {
      process: require('react-native/Libraries/StyleSheet/processColor').default
    }
  }, ConditionallyIgnoredEventHandlers({
    onChange: true
  }))
};
var _default = exports.default = NativeComponentRegistry.get(nativeComponentName, function () {
  return __INTERNAL_VIEW_CONFIG;
});
var Commands = exports.Commands = {
  setNativeValue: function setNativeValue(ref, value) {
    dispatchCommand(ref, "setNativeValue", [value]);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29kZWdlbk5hdGl2ZUNvbW1hbmRzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfY29kZWdlbk5hdGl2ZUNvbXBvbmVudCIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJOYXRpdmVDb21wb25lbnRSZWdpc3RyeSIsIl9yZXF1aXJlIiwiQ29uZGl0aW9uYWxseUlnbm9yZWRFdmVudEhhbmRsZXJzIiwiX3JlcXVpcmUyIiwiZGlzcGF0Y2hDb21tYW5kIiwibmF0aXZlQ29tcG9uZW50TmFtZSIsIl9fSU5URVJOQUxfVklFV19DT05GSUciLCJleHBvcnRzIiwidWlWaWV3Q2xhc3NOYW1lIiwiYnViYmxpbmdFdmVudFR5cGVzIiwidG9wQ2hhbmdlIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJjYXB0dXJlZCIsImJ1YmJsZWQiLCJ2YWxpZEF0dHJpYnV0ZXMiLCJhc3NpZ24iLCJkaXNhYmxlZCIsImVuYWJsZWQiLCJ0aHVtYkNvbG9yIiwicHJvY2VzcyIsInRyYWNrQ29sb3JGb3JGYWxzZSIsInRyYWNrQ29sb3JGb3JUcnVlIiwidmFsdWUiLCJvbiIsInRodW1iVGludENvbG9yIiwidHJhY2tUaW50Q29sb3IiLCJvbkNoYW5nZSIsIl9kZWZhdWx0IiwiQ29tbWFuZHMiLCJzZXROYXRpdmVWYWx1ZSIsInJlZiJdLCJzb3VyY2VzIjpbIkFuZHJvaWRTd2l0Y2hOYXRpdmVDb21wb25lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCB0eXBlIHtIb3N0Q29tcG9uZW50fSBmcm9tICcuLi8uLi9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZVR5cGVzJztcbmltcG9ydCB0eXBlIHtDb2xvclZhbHVlfSBmcm9tICcuLi8uLi9TdHlsZVNoZWV0L1N0eWxlU2hlZXQnO1xuaW1wb3J0IHR5cGUge1xuICBCdWJibGluZ0V2ZW50SGFuZGxlcixcbiAgSW50MzIsXG4gIFdpdGhEZWZhdWx0LFxufSBmcm9tICcuLi8uLi9UeXBlcy9Db2RlZ2VuVHlwZXMnO1xuaW1wb3J0IHR5cGUge1ZpZXdQcm9wc30gZnJvbSAnLi4vVmlldy9WaWV3UHJvcFR5cGVzJztcblxuaW1wb3J0IGNvZGVnZW5OYXRpdmVDb21tYW5kcyBmcm9tICcuLi8uLi9VdGlsaXRpZXMvY29kZWdlbk5hdGl2ZUNvbW1hbmRzJztcbmltcG9ydCBjb2RlZ2VuTmF0aXZlQ29tcG9uZW50IGZyb20gJy4uLy4uL1V0aWxpdGllcy9jb2RlZ2VuTmF0aXZlQ29tcG9uZW50JztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxudHlwZSBTd2l0Y2hDaGFuZ2VFdmVudCA9ICRSZWFkT25seTx7fFxuICB2YWx1ZTogYm9vbGVhbixcbiAgdGFyZ2V0OiBJbnQzMixcbnx9PjtcblxudHlwZSBOYXRpdmVQcm9wcyA9ICRSZWFkT25seTx7fFxuICAuLi5WaWV3UHJvcHMsXG5cbiAgLy8gUHJvcHNcbiAgZGlzYWJsZWQ/OiBXaXRoRGVmYXVsdDxib29sZWFuLCBmYWxzZT4sXG4gIGVuYWJsZWQ/OiBXaXRoRGVmYXVsdDxib29sZWFuLCB0cnVlPixcbiAgdGh1bWJDb2xvcj86ID9Db2xvclZhbHVlLFxuICB0cmFja0NvbG9yRm9yRmFsc2U/OiA/Q29sb3JWYWx1ZSxcbiAgdHJhY2tDb2xvckZvclRydWU/OiA/Q29sb3JWYWx1ZSxcbiAgdmFsdWU/OiBXaXRoRGVmYXVsdDxib29sZWFuLCBmYWxzZT4sXG4gIG9uPzogV2l0aERlZmF1bHQ8Ym9vbGVhbiwgZmFsc2U+LFxuICB0aHVtYlRpbnRDb2xvcj86ID9Db2xvclZhbHVlLFxuICB0cmFja1RpbnRDb2xvcj86ID9Db2xvclZhbHVlLFxuXG4gIC8vIEV2ZW50c1xuICBvbkNoYW5nZT86IEJ1YmJsaW5nRXZlbnRIYW5kbGVyPFN3aXRjaENoYW5nZUV2ZW50Pixcbnx9PjtcblxudHlwZSBOYXRpdmVUeXBlID0gSG9zdENvbXBvbmVudDxOYXRpdmVQcm9wcz47XG5cbmludGVyZmFjZSBOYXRpdmVDb21tYW5kcyB7XG4gICtzZXROYXRpdmVWYWx1ZTogKFxuICAgIHZpZXdSZWY6IFJlYWN0LkVsZW1lbnRSZWY8TmF0aXZlVHlwZT4sXG4gICAgdmFsdWU6IGJvb2xlYW4sXG4gICkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGNvbnN0IENvbW1hbmRzOiBOYXRpdmVDb21tYW5kcyA9IGNvZGVnZW5OYXRpdmVDb21tYW5kczxOYXRpdmVDb21tYW5kcz4oe1xuICBzdXBwb3J0ZWRDb21tYW5kczogWydzZXROYXRpdmVWYWx1ZSddLFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IChjb2RlZ2VuTmF0aXZlQ29tcG9uZW50PE5hdGl2ZVByb3BzPignQW5kcm9pZFN3aXRjaCcsIHtcbiAgaW50ZXJmYWNlT25seTogdHJ1ZSxcbn0pOiBOYXRpdmVUeXBlKTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFtQkEsSUFBQUEsc0JBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLHVCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxLQUFBLEdB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