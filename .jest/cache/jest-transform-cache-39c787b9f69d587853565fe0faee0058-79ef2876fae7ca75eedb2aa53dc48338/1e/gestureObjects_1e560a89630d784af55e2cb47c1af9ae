30679ba5aea80a1a1a476b42d85e0369
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _construct2 = _interopRequireDefault(require("@babel/runtime/helpers/construct"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GestureObjects = void 0;
var _flingGesture = require("./flingGesture");
var _forceTouchGesture = require("./forceTouchGesture");
var _gestureComposition = require("./gestureComposition");
var _longPressGesture = require("./longPressGesture");
var _panGesture = require("./panGesture");
var _pinchGesture = require("./pinchGesture");
var _rotationGesture = require("./rotationGesture");
var _tapGesture = require("./tapGesture");
var _nativeGesture = require("./nativeGesture");
var _manualGesture = require("./manualGesture");
var _hoverGesture = require("./hoverGesture");
var GestureObjects = {
  Tap: function Tap() {
    return new _tapGesture.TapGesture();
  },
  Pan: function Pan() {
    return new _panGesture.PanGesture();
  },
  Pinch: function Pinch() {
    return new _pinchGesture.PinchGesture();
  },
  Rotation: function Rotation() {
    return new _rotationGesture.RotationGesture();
  },
  Fling: function Fling() {
    return new _flingGesture.FlingGesture();
  },
  LongPress: function LongPress() {
    return new _longPressGesture.LongPressGesture();
  },
  ForceTouch: function ForceTouch() {
    return new _forceTouchGesture.ForceTouchGesture();
  },
  Native: function Native() {
    return new _nativeGesture.NativeGesture();
  },
  Manual: function Manual() {
    return new _manualGesture.ManualGesture();
  },
  Hover: function Hover() {
    return new _hoverGesture.HoverGesture();
  },
  Race: function Race() {
    for (var _len = arguments.length, gestures = new Array(_len), _key = 0; _key < _len; _key++) {
      gestures[_key] = arguments[_key];
    }
    return (0, _construct2.default)(_gestureComposition.ComposedGesture, gestures);
  },
  Simultaneous: function Simultaneous() {
    for (var _len2 = arguments.length, gestures = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      gestures[_key2] = arguments[_key2];
    }
    return (0, _construct2.default)(_gestureComposition.SimultaneousGesture, gestures);
  },
  Exclusive: function Exclusive() {
    for (var _len3 = arguments.length, gestures = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      gestures[_key3] = arguments[_key3];
    }
    return (0, _construct2.default)(_gestureComposition.ExclusiveGesture, gestures);
  }
};
exports.GestureObjects = GestureObjects;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZmxpbmdHZXN0dXJlIiwicmVxdWlyZSIsIl9mb3JjZVRvdWNoR2VzdHVyZSIsIl9nZXN0dXJlQ29tcG9zaXRpb24iLCJfbG9uZ1ByZXNzR2VzdHVyZSIsIl9wYW5HZXN0dXJlIiwiX3BpbmNoR2VzdHVyZSIsIl9yb3RhdGlvbkdlc3R1cmUiLCJfdGFwR2VzdHVyZSIsIl9uYXRpdmVHZXN0dXJlIiwiX21hbnVhbEdlc3R1cmUiLCJfaG92ZXJHZXN0dXJlIiwiR2VzdHVyZU9iamVjdHMiLCJUYXAiLCJUYXBHZXN0dXJlIiwiUGFuIiwiUGFuR2VzdHVyZSIsIlBpbmNoIiwiUGluY2hHZXN0dXJlIiwiUm90YXRpb24iLCJSb3RhdGlvbkdlc3R1cmUiLCJGbGluZyIsIkZsaW5nR2VzdHVyZSIsIkxvbmdQcmVzcyIsIkxvbmdQcmVzc0dlc3R1cmUiLCJGb3JjZVRvdWNoIiwiRm9yY2VUb3VjaEdlc3R1cmUiLCJOYXRpdmUiLCJOYXRpdmVHZXN0dXJlIiwiTWFudWFsIiwiTWFudWFsR2VzdHVyZSIsIkhvdmVyIiwiSG92ZXJHZXN0dXJlIiwiUmFjZSIsIl9sZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJnZXN0dXJlcyIsIkFycmF5IiwiX2tleSIsIl9jb25zdHJ1Y3QyIiwiZGVmYXVsdCIsIkNvbXBvc2VkR2VzdHVyZSIsIlNpbXVsdGFuZW91cyIsIl9sZW4yIiwiX2tleTIiLCJTaW11bHRhbmVvdXNHZXN0dXJlIiwiRXhjbHVzaXZlIiwiX2xlbjMiLCJfa2V5MyIsIkV4Y2x1c2l2ZUdlc3R1cmUiXSwic291cmNlcyI6WyJnZXN0dXJlT2JqZWN0cy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGbGluZ0dlc3R1cmUgfSBmcm9tICcuL2ZsaW5nR2VzdHVyZSc7XG5pbXBvcnQgeyBGb3JjZVRvdWNoR2VzdHVyZSB9IGZyb20gJy4vZm9yY2VUb3VjaEdlc3R1cmUnO1xuaW1wb3J0IHsgR2VzdHVyZSB9IGZyb20gJy4vZ2VzdHVyZSc7XG5pbXBvcnQge1xuICBDb21wb3NlZEdlc3R1cmUsXG4gIEV4Y2x1c2l2ZUdlc3R1cmUsXG4gIFNpbXVsdGFuZW91c0dlc3R1cmUsXG59IGZyb20gJy4vZ2VzdHVyZUNvbXBvc2l0aW9uJztcbmltcG9ydCB7IExvbmdQcmVzc0dlc3R1cmUgfSBmcm9tICcuL2xvbmdQcmVzc0dlc3R1cmUnO1xuaW1wb3J0IHsgUGFuR2VzdHVyZSB9IGZyb20gJy4vcGFuR2VzdHVyZSc7XG5pbXBvcnQgeyBQaW5jaEdlc3R1cmUgfSBmcm9tICcuL3BpbmNoR2VzdHVyZSc7XG5pbXBvcnQgeyBSb3RhdGlvbkdlc3R1cmUgfSBmcm9tICcuL3JvdGF0aW9uR2VzdHVyZSc7XG5pbXBvcnQgeyBUYXBHZXN0dXJlIH0gZnJvbSAnLi90YXBHZXN0dXJlJztcbmltcG9ydCB7IE5hdGl2ZUdlc3R1cmUgfSBmcm9tICcuL25hdGl2ZUdlc3R1cmUnO1xuaW1wb3J0IHsgTWFudWFsR2VzdHVyZSB9IGZyb20gJy4vbWFudWFsR2VzdHVyZSc7XG5pbXBvcnQgeyBIb3Zlckdlc3R1cmUgfSBmcm9tICcuL2hvdmVyR2VzdHVyZSc7XG5cbmV4cG9ydCBjb25zdCBHZXN0dXJlT2JqZWN0cyA9IHtcbiAgVGFwOiAoKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBUYXBHZXN0dXJlKCk7XG4gIH0sXG5cbiAgUGFuOiAoKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBQYW5HZXN0dXJlKCk7XG4gIH0sXG5cbiAgUGluY2g6ICgpID0+IHtcbiAgICByZXR1cm4gbmV3IFBpbmNoR2VzdHVyZSgpO1xuICB9LFxuXG4gIFJvdGF0aW9uOiAoKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBSb3RhdGlvbkdlc3R1cmUoKTtcbiAgfSxcblxuICBGbGluZzogKCkgPT4ge1xuICAgIHJldHVybiBuZXcgRmxpbmdHZXN0dXJlKCk7XG4gIH0sXG5cbiAgTG9uZ1ByZXNzOiAoKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBMb25nUHJlc3NHZXN0dXJlKCk7XG4gIH0sXG5cbiAgRm9yY2VUb3VjaDogKCkgPT4ge1xuICAgIHJldHVybiBuZXcgRm9yY2VUb3VjaEdlc3R1cmUoKTtcbiAgfSxcblxuICBOYXRpdmU6ICgpID0+IHtcbiAgICByZXR1cm4gbmV3IE5hdGl2ZUdlc3R1cmUoKTtcbiAgfSxcblxuICBNYW51YWw6ICgpID0+IHtcbiAgICByZXR1cm4gbmV3IE1hbnVhbEdlc3R1cmUoKTtcbiAgfSxcblxuICBIb3ZlcjogKCkgPT4ge1xuICAgIHJldHVybiBuZXcgSG92ZXJHZXN0dXJlKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEJ1aWxkcyBhIGNvbXBvc2VkIGdlc3R1cmUgY29uc2lzdGluZyBvZiBnZXN0dXJlcyBwcm92aWRlZCBhcyBwYXJhbWV0ZXJzLlxuICAgKiBUaGUgZmlyc3Qgb25lIHRoYXQgYmVjb21lcyBhY3RpdmUgY2FuY2VscyB0aGUgcmVzdCBvZiBnZXN0dXJlcy5cbiAgICovXG4gIFJhY2U6ICguLi5nZXN0dXJlczogR2VzdHVyZVtdKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBDb21wb3NlZEdlc3R1cmUoLi4uZ2VzdHVyZXMpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBCdWlsZHMgYSBjb21wb3NlZCBnZXN0dXJlIHRoYXQgYWxsb3dzIGFsbCBiYXNlIGdlc3R1cmVzIHRvIHJ1biBzaW11bHRhbmVvdXNseS5cbiAgICovXG4gIFNpbXVsdGFuZW91cyguLi5nZXN0dXJlczogR2VzdHVyZVtdKSB7XG4gICAgcmV0dXJuIG5ldyBTaW11bHRhbmVvdXNHZXN0dXJlKC4uLmdlc3R1cmVzKTtcbiAgfSxcblxuICAvKipcbiAgICogQnVpbGRzIGEgY29tcG9zZWQgZ2VzdHVyZSB3aGVyZSBvbmx5IG9uZSBvZiB0aGUgcHJvdmlkZWQgZ2VzdHVyZXMgY2FuIGJlY29tZSBhY3RpdmUuXG4gICAqIFByaW9yaXR5IGlzIGRlY2lkZWQgdGhyb3VnaCB0aGUgb3JkZXIgb2YgZ2VzdHVyZXM6IHRoZSBmaXJzdCBvbmUgaGFzIGhpZ2hlciBwcmlvcml0eVxuICAgKiB0aGFuIHRoZSBzZWNvbmQgb25lLCBzZWNvbmQgb25lIGhhcyBoaWdoZXIgcHJpb3JpdHkgdGhhbiB0aGUgdGhpcmQgb25lLCBhbmQgc28gb24uXG4gICAqIEZvciBleGFtcGxlLCB0byBtYWtlIGEgZ2VzdHVyZSB0aGF0IHJlY29nbml6ZXMgYm90aCBzaW5nbGUgYW5kIGRvdWJsZSB0YXAgeW91IG5lZWRcbiAgICogdG8gY2FsbCBFeGNsdXNpdmUoZG91YmxlVGFwLCBzaW5nbGVUYXApLlxuICAgKi9cbiAgRXhjbHVzaXZlKC4uLmdlc3R1cmVzOiBHZXN0dXJlW10pIHtcbiAgICByZXR1cm4gbmV3IEV4Y2x1c2l2ZUdlc3R1cmUoLi4uZ2VzdHVyZXMpO1xuICB9LFxufTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxJQUFBQSxhQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxrQkFBQSxHQUFBRCxPQUFBO0FBRUEsSUFBQUUsbUJBQUEsR0FBQUYsT0FBQTtBQUtBLElBQUFHLGlCQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxXQUFBLEdBQUFKLE9BQUE7QUFDQSxJQUFBSyxhQUFBLEdBQUFMLE9BQUE7QUFDQSxJQUFBTSxnQkFBQSxHQUFBTixPQUFBO0FBQ0EsSUFBQU8sV0FBQSxHQUFBUCxPQUFBO0FBQ0EsSUFBQVEsY0FBQSxHQUFBUixPQUFBO0FBQ0EsSUFBQVMsY0FBQSxHQUFBVCxPQUFBO0FBQ0EsSUFBQVUsYUFBQSxHQUFBVixPQUFBO0FBRU8sSUFBTVcsY0FBYyxHQUFHO0VBQzVCQyxHQUFHLEVBQUUsU0FBQUEsSUFBQSxFQUFNO0lBQ1QsT0FBTyxJQUFJTCxXQUFBLENBQUFNLFVBQUosRUFBUDtFQUNELENBSDJCO0VBSzVCQyxHQUFHLEVBQUUsU0FBQUEsSUFBQSxFQUFNO0lBQ1QsT0FBTyxJQUFJVixXQUFBLENBQUFXLFVBQUosRUFBUDtFQUNELENBUDJCO0VBUzVCQyxLQUFLLEVBQUUsU0FBQUEsTUFBQSxFQUFNO0lBQ1gsT0FBTyxJQUFJWCxhQUFBLENBQUFZLFlBQUosRUFBUDtFQUNELENBWDJCO0VBYTVCQyxRQUFRLEVBQUUsU0FBQUEsU0FBQSxFQUFNO0lBQ2QsT0FBTyxJQUFJWixnQkFBQSxDQUFBYSxlQUFKLEVBQVA7RUFDRCxDQWYyQjtFQWlCNUJDLEtBQUssRUFBRSxTQUFBQSxNQUFBLEVBQU07SUFDWCxPQUFPLElBQUlyQixhQUFBLENBQUFzQixZQUFKLEVBQVA7RUFDRCxDQW5CMkI7RUFxQjVCQyxTQUFTLEVBQUUsU0FBQUEsVUFBQSxFQUFNO0lBQ2YsT0FBTyxJQUFJbkIsaUJBQUEsQ0FBQW9CLGdCQUFKLEVBQVA7RUFDRCxDQXZCMkI7RUF5QjVCQyxVQUFVLEVBQUUsU0FBQUEsV0FBQSxFQUFNO0lBQ2hCLE9BQU8sSUFBSXZCLGtCQUFBLENBQUF3QixpQkFBSixFQUFQO0VBQ0QsQ0EzQjJCO0VBNkI1QkMsTUFBTSxFQUFFLFNBQUFBLE9BQUEsRUFBTTtJQUNaLE9BQU8sSUFBSWxCLGNBQUEsQ0FBQW1CLGFBQUosRUFBUDtFQUNELENBL0IyQjtFQWlDNUJDLE1BQU0sRUFBRSxTQUFBQSxPQUFBLEVBQU07SUFDWixPQUFPLElBQUluQixjQUFBLENBQUFvQixhQUFKLEVBQVA7RUFDRCxDQW5DMkI7RUFxQzVCQyxLQUFLLEVBQUUsU0FBQUEsTUFBQSxFQUFNO0lBQ1gsT0FBTyxJQUFJcEIsYUFBQSxDQUFBcUIsWUFBSixFQUFQO0VBQ0QsQ0F2QzJCO0VBNkM1QkMsSUFBSSxFQUFFLFNBQUFBLEtBQUEsRUFBNEI7SUFBQSxTQUFBQyxJQUFBLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxFQUF4QkMsUUFBSixPQUFBQyxLQUFBLENBQUFKLElBQUEsR0FBQUssSUFBQSxNQUFBQSxJQUFBLEdBQUFMLElBQUEsRUFBQUssSUFBQTtNQUFJRixRQUFKLENBQUFFLElBQUEsSUFBQUosU0FBQSxDQUFBSSxJQUFBO0lBQUE7SUFDSixXQUFBQyxXQUFBLENBQUFDLE9BQUEsRUFBV3RDLG1CQUFBLENBQUF1QyxlQUFKLEVBQXVCTCxRQUF2QjtFQUNSLENBL0MyQjtFQW9ENUJNLFlBQVksV0FBQUEsYUFBQSxFQUF5QjtJQUFBLFNBQUFDLEtBQUEsR0FBQVQsU0FBQSxDQUFBQyxNQUFBLEVBQXJCQyxRQUFKLE9BQUFDLEtBQUEsQ0FBQU0sS0FBQSxHQUFBQyxLQUFBLE1BQUFBLEtBQUEsR0FBQUQsS0FBQSxFQUFBQyxLQUFBO01BQUlSLFFBQUosQ0FBQVEsS0FBQSxJQUFBVixTQUFBLENBQUFVLEtBQUE7SUFBQTtJQUNWLFdBQUFMLFdBQUEsQ0FBQUMsT0FBQSxFQUFXdEMsbUJBQUEsQ0FBQTJDLG1CQUFKLEVBQTJCVCxRQUEzQjtFQUNSLENBdEQyQjtFQStENUJVLFNBQVMsV0FBQUEsVUFBQSxFQUF5QjtJQUFBLFNBQUFDLEtBQUEsR0FBQWIsU0FBQSxDQUFBQyxNQUFBLEVBQXJCQyxRQUFKLE9BQUFDLEtBQUEsQ0FBQVUsS0FBQSxHQUFBQyxLQUFBLE1BQUFBLEtBQUEsR0FBQUQsS0FBQSxFQUFBQyxLQUFBO01BQUlaLFFBQUosQ0FBQVksS0FBQSxJQUFBZCxTQUFBLENBQUFjLEtBQUE7SUFBQTtJQUNQLFdBQUFULFdBQUEsQ0FBQUMsT0FBQSxFQUFXdEMsbUJBQUEsQ0FBQStDLGdCQUFKLEVBQXdCYixRQUF4QjtFQUNSO0FBakUyQixDQUF2QiIsImlnbm9yZUxpc3QiOltdfQ==