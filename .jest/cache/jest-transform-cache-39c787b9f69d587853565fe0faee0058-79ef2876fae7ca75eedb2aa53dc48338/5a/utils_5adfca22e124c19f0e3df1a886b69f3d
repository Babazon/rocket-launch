c2d9cea7e0405d7cb1787b71e418caac
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toArray = toArray;
exports.withPrevAndCurrent = withPrevAndCurrent;
exports.hasProperty = hasProperty;
exports.isJestEnv = isJestEnv;
exports.tagMessage = tagMessage;
exports.isFabric = isFabric;
exports.isRemoteDebuggingEnabled = isRemoteDebuggingEnabled;
function toArray(object) {
  if (!Array.isArray(object)) {
    return [object];
  }
  return object;
}
function withPrevAndCurrent(array, mapFn) {
  var previousArr = [null];
  var currentArr = (0, _toConsumableArray2.default)(array);
  var transformedArr = [];
  currentArr.forEach(function (current, i) {
    var previous = previousArr[i];
    var transformed = mapFn(previous, current);
    previousArr.push(transformed);
    transformedArr.push(transformed);
  });
  return transformedArr;
}
function hasProperty(object, key) {
  return Object.prototype.hasOwnProperty.call(object, key);
}
function isJestEnv() {
  return hasProperty(global, 'process') && !!process.env.JEST_WORKER_ID;
}
function tagMessage(msg) {
  return `[react-native-gesture-handler] ${msg}`;
}
function isFabric() {
  var _global;
  return !!((_global = global) !== null && _global !== void 0 && _global.nativeFabricUIManager);
}
function isRemoteDebuggingEnabled() {
  return !global.nativeCallSyncHook || global.__REMOTEDEV__;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0b0FycmF5Iiwib2JqZWN0IiwiQXJyYXkiLCJpc0FycmF5Iiwid2l0aFByZXZBbmRDdXJyZW50IiwiYXJyYXkiLCJtYXBGbiIsInByZXZpb3VzQXJyIiwiY3VycmVudEFyciIsIl90b0NvbnN1bWFibGVBcnJheTIiLCJkZWZhdWx0IiwidHJhbnNmb3JtZWRBcnIiLCJmb3JFYWNoIiwiY3VycmVudCIsImkiLCJwcmV2aW91cyIsInRyYW5zZm9ybWVkIiwicHVzaCIsImhhc1Byb3BlcnR5Iiwia2V5IiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaXNKZXN0RW52IiwiZ2xvYmFsIiwicHJvY2VzcyIsImVudiIsIkpFU1RfV09SS0VSX0lEIiwidGFnTWVzc2FnZSIsIm1zZyIsImlzRmFicmljIiwiX2dsb2JhbCIsIm5hdGl2ZUZhYnJpY1VJTWFuYWdlciIsImlzUmVtb3RlRGVidWdnaW5nRW5hYmxlZCIsIm5hdGl2ZUNhbGxTeW5jSG9vayIsIl9fUkVNT1RFREVWX18iXSwic291cmNlcyI6WyJ1dGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gdG9BcnJheTxUPihvYmplY3Q6IFQgfCBUW10pOiBUW10ge1xuICBpZiAoIUFycmF5LmlzQXJyYXkob2JqZWN0KSkge1xuICAgIHJldHVybiBbb2JqZWN0XTtcbiAgfVxuXG4gIHJldHVybiBvYmplY3Q7XG59XG5cbmV4cG9ydCB0eXBlIHdpdGhQcmV2QW5kQ3VycmVudE1hcEZuPFQsIFRyYW5zZm9ybWVkPiA9IChcbiAgcHJldmlvdXM6IFRyYW5zZm9ybWVkIHwgbnVsbCxcbiAgY3VycmVudDogVFxuKSA9PiBUcmFuc2Zvcm1lZDtcbmV4cG9ydCBmdW5jdGlvbiB3aXRoUHJldkFuZEN1cnJlbnQ8VCwgVHJhbnNmb3JtZWQ+KFxuICBhcnJheTogVFtdLFxuICBtYXBGbjogd2l0aFByZXZBbmRDdXJyZW50TWFwRm48VCwgVHJhbnNmb3JtZWQ+XG4pOiBUcmFuc2Zvcm1lZFtdIHtcbiAgY29uc3QgcHJldmlvdXNBcnI6IChudWxsIHwgVHJhbnNmb3JtZWQpW10gPSBbbnVsbF07XG4gIGNvbnN0IGN1cnJlbnRBcnIgPSBbLi4uYXJyYXldO1xuICBjb25zdCB0cmFuc2Zvcm1lZEFycjogVHJhbnNmb3JtZWRbXSA9IFtdO1xuICBjdXJyZW50QXJyLmZvckVhY2goKGN1cnJlbnQsIGkpID0+IHtcbiAgICBjb25zdCBwcmV2aW91cyA9IHByZXZpb3VzQXJyW2ldO1xuICAgIGNvbnN0IHRyYW5zZm9ybWVkID0gbWFwRm4ocHJldmlvdXMsIGN1cnJlbnQpO1xuICAgIHByZXZpb3VzQXJyLnB1c2godHJhbnNmb3JtZWQpO1xuICAgIHRyYW5zZm9ybWVkQXJyLnB1c2godHJhbnNmb3JtZWQpO1xuICB9KTtcbiAgcmV0dXJuIHRyYW5zZm9ybWVkQXJyO1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xuZXhwb3J0IGZ1bmN0aW9uIGhhc1Byb3BlcnR5KG9iamVjdDogb2JqZWN0LCBrZXk6IHN0cmluZykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzSmVzdEVudigpOiBib29sZWFuIHtcbiAgLy8gQHRzLWlnbm9yZSBEbyBub3QgdXNlIGBAdHlwZXMvbm9kZWAgYmVjYXVzZSBpdCB3aWxsIHByaW9yaXRpc2UgTm9kZSB0eXBlcyBvdmVyIFJOIHR5cGVzIHdoaWNoIGJyZWFrcyB0aGUgdHlwZXMgKGV4LiBzZXRUaW1lb3V0KSBpbiBSZWFjdCBOYXRpdmUgcHJvamVjdHMuXG4gIHJldHVybiBoYXNQcm9wZXJ0eShnbG9iYWwsICdwcm9jZXNzJykgJiYgISFwcm9jZXNzLmVudi5KRVNUX1dPUktFUl9JRDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRhZ01lc3NhZ2UobXNnOiBzdHJpbmcpIHtcbiAgcmV0dXJuIGBbcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlcl0gJHttc2d9YDtcbn1cblxuLy8gaGVscGVyIG1ldGhvZCB0byBjaGVjayB3aGV0aGVyIEZhYnJpYyBpcyBlbmFibGVkLCBob3dldmVyIGdsb2JhbC5uYXRpdmVGYWJyaWNVSU1hbmFnZXJcbi8vIG1heSBub3QgYmUgaW5pdGlhbGl6ZWQgYmVmb3JlIHRoZSBmaXJzdCByZW5kZXJcbmV4cG9ydCBmdW5jdGlvbiBpc0ZhYnJpYygpOiBib29sZWFuIHtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBuYXRpdmVGYWJyaWNVSU1hbmFnZXIgaXMgbm90IHlldCBpbmNsdWRlZCBpbiB0aGUgUk4gdHlwZXNcbiAgcmV0dXJuICEhZ2xvYmFsPy5uYXRpdmVGYWJyaWNVSU1hbmFnZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1JlbW90ZURlYnVnZ2luZ0VuYWJsZWQoKTogYm9vbGVhbiB7XG4gIC8vIHJlYWN0LW5hdGl2ZS1yZWFuaW1hdGVkIGNoZWNrcyBpZiBpbiByZW1vdGUgZGVidWdnaW5nIGluIHRoZSBzYW1lIHdheVxuICAvLyBAdHMtaWdub3JlIGdsb2JhbCBpcyBhdmFpbGFibGUgYnV0IG5vZGUgdHlwZXMgYXJlIG5vdCBpbmNsdWRlZFxuICByZXR1cm4gIShnbG9iYWwgYXMgYW55KS5uYXRpdmVDYWxsU3luY0hvb2sgfHwgKGdsb2JhbCBhcyBhbnkpLl9fUkVNT1RFREVWX187XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQU8sU0FBU0EsT0FBVEEsQ0FBb0JDLE1BQXBCLEVBQTBDO0VBQy9DLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxPQUFOLENBQWNGLE1BQWQsQ0FBTCxFQUE0QjtJQUMxQixPQUFPLENBQUNBLE1BQUQsQ0FBUDtFQUNEO0VBRUQsT0FBT0EsTUFBUDtBQUNEO0FBTU0sU0FBU0csa0JBQVRBLENBQ0xDLEtBREssRUFFTEMsS0FGSyxFQUdVO0VBQ2YsSUFBTUMsV0FBbUMsR0FBRyxDQUFDLElBQUQsQ0FBNUM7RUFDQSxJQUFNQyxVQUFVLE9BQUFDLG1CQUFBLENBQUFDLE9BQUEsRUFBT0wsS0FBSixDQUFuQjtFQUNBLElBQU1NLGNBQTZCLEdBQUcsRUFBdEM7RUFDQUgsVUFBVSxDQUFDSSxPQUFYLENBQW1CLFVBQUNDLE9BQUQsRUFBVUMsQ0FBVixFQUFnQjtJQUNqQyxJQUFNQyxRQUFRLEdBQUdSLFdBQVcsQ0FBQ08sQ0FBRCxDQUE1QjtJQUNBLElBQU1FLFdBQVcsR0FBR1YsS0FBSyxDQUFDUyxRQUFELEVBQVdGLE9BQVgsQ0FBekI7SUFDQU4sV0FBVyxDQUFDVSxJQUFaLENBQWlCRCxXQUFqQjtJQUNBTCxjQUFjLENBQUNNLElBQWYsQ0FBb0JELFdBQXBCO0VBQ0QsQ0FMRDtFQU1BLE9BQU9MLGNBQVA7QUFDRDtBQUdNLFNBQVNPLFdBQVRBLENBQXFCakIsTUFBckIsRUFBcUNrQixHQUFyQyxFQUFrRDtFQUN2RCxPQUFPQyxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLGNBQWpCLENBQWdDQyxJQUFoQyxDQUFxQ3RCLE1BQXJDLEVBQTZDa0IsR0FBN0MsQ0FBUDtBQUNEO0FBRU0sU0FBU0ssU0FBVEEsQ0FBQSxFQUE4QjtFQUVuQyxPQUFPTixXQUFXLENBQUNPLE1BQUQsRUFBUyxTQUFULENBQVgsSUFBa0MsQ0FBQyxDQUFDQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsY0FBdkQ7QUFDRDtBQUVNLFNBQVNDLFVBQVRBLENBQW9CQyxHQUFwQixFQUFpQztFQUN0QyxPQUFRLGtDQUFpQ0EsR0FBSSxFQUE3QztBQUNEO0FBSU0sU0FBU0MsUUFBVEEsQ0FBQSxFQUE2QjtFQUFBLElBQUFDLE9BQUE7RUFFbEMsT0FBTyxDQUFDLEdBQUFBLE9BQUEsR0FBQ1AsTUFBRCxjQUFBTyxPQUFBLGVBQUNBLE9BQUEsQ0FBUUMscUJBQVQsQ0FBUjtBQUNEO0FBRU0sU0FBU0Msd0JBQVRBLENBQUEsRUFBNkM7RUFHbEQsT0FBTyxDQUFFVCxNQUFELENBQWdCVSxrQkFBakIsSUFBd0NWLE1BQUQsQ0FBZ0JXLGFBQTlEO0FBQ0QiLCJpZ25vcmVMaXN0IjpbXX0=