5553d98941c912f4cb52e186ede7558c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var PressabilityDebug = _interopRequireWildcard(require("../Pressability/PressabilityDebug"));
var _usePressability = _interopRequireDefault(require("../Pressability/usePressability"));
var _flattenStyle = _interopRequireDefault(require("../StyleSheet/flattenStyle"));
var _processColor = _interopRequireDefault(require("../StyleSheet/processColor"));
var _Platform = _interopRequireDefault(require("../Utilities/Platform"));
var _TextAncestor = _interopRequireDefault(require("./TextAncestor"));
var _TextNativeComponent = require("./TextNativeComponent");
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["accessible", "accessibilityLabel", "accessibilityState", "allowFontScaling", "aria-busy", "aria-checked", "aria-disabled", "aria-expanded", "aria-label", "aria-selected", "ellipsizeMode", "id", "nativeID", "onLongPress", "onPress", "onPressIn", "onPressOut", "onResponderGrant", "onResponderMove", "onResponderRelease", "onResponderTerminate", "onResponderTerminationRequest", "onStartShouldSetResponder", "pressRetentionOffset", "suppressHighlighting"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var Text = React.forwardRef(function (props, forwardedRef) {
  var _accessibilityState2, _accessibilityState3, _style, _style3, _style4;
  var accessible = props.accessible,
    accessibilityLabel = props.accessibilityLabel,
    accessibilityState = props.accessibilityState,
    allowFontScaling = props.allowFontScaling,
    ariaBusy = props['aria-busy'],
    ariaChecked = props['aria-checked'],
    ariaDisabled = props['aria-disabled'],
    ariaExpanded = props['aria-expanded'],
    ariaLabel = props['aria-label'],
    ariaSelected = props['aria-selected'],
    ellipsizeMode = props.ellipsizeMode,
    id = props.id,
    nativeID = props.nativeID,
    onLongPress = props.onLongPress,
    onPress = props.onPress,
    _onPressIn = props.onPressIn,
    _onPressOut = props.onPressOut,
    _onResponderGrant = props.onResponderGrant,
    _onResponderMove = props.onResponderMove,
    _onResponderRelease = props.onResponderRelease,
    _onResponderTerminate = props.onResponderTerminate,
    onResponderTerminationRequest = props.onResponderTerminationRequest,
    onStartShouldSetResponder = props.onStartShouldSetResponder,
    pressRetentionOffset = props.pressRetentionOffset,
    suppressHighlighting = props.suppressHighlighting,
    restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isHighlighted = _useState2[0],
    setHighlighted = _useState2[1];
  var _accessibilityState;
  if (accessibilityState != null || ariaBusy != null || ariaChecked != null || ariaDisabled != null || ariaExpanded != null || ariaSelected != null) {
    _accessibilityState = {
      busy: ariaBusy != null ? ariaBusy : accessibilityState == null ? void 0 : accessibilityState.busy,
      checked: ariaChecked != null ? ariaChecked : accessibilityState == null ? void 0 : accessibilityState.checked,
      disabled: ariaDisabled != null ? ariaDisabled : accessibilityState == null ? void 0 : accessibilityState.disabled,
      expanded: ariaExpanded != null ? ariaExpanded : accessibilityState == null ? void 0 : accessibilityState.expanded,
      selected: ariaSelected != null ? ariaSelected : accessibilityState == null ? void 0 : accessibilityState.selected
    };
  }
  var _disabled = restProps.disabled != null ? restProps.disabled : (_accessibilityState2 = _accessibilityState) == null ? void 0 : _accessibilityState2.disabled;
  var nativeTextAccessibilityState = _disabled !== ((_accessibilityState3 = _accessibilityState) == null ? void 0 : _accessibilityState3.disabled) ? Object.assign({}, _accessibilityState, {
    disabled: _disabled
  }) : _accessibilityState;
  var isPressable = (onPress != null || onLongPress != null || onStartShouldSetResponder != null) && _disabled !== true;
  var initialized = useLazyInitialization(isPressable);
  var config = (0, _react.useMemo)(function () {
    return initialized ? {
      disabled: !isPressable,
      pressRectOffset: pressRetentionOffset,
      onLongPress: onLongPress,
      onPress: onPress,
      onPressIn: function onPressIn(event) {
        setHighlighted((suppressHighlighting == null || !suppressHighlighting) && _Platform.default.OS === 'ios');
        _onPressIn == null ? void 0 : _onPressIn(event);
      },
      onPressOut: function onPressOut(event) {
        setHighlighted(false);
        _onPressOut == null ? void 0 : _onPressOut(event);
      },
      onResponderTerminationRequest_DEPRECATED: onResponderTerminationRequest,
      onStartShouldSetResponder_DEPRECATED: onStartShouldSetResponder
    } : null;
  }, [initialized, isPressable, pressRetentionOffset, onLongPress, onPress, _onPressIn, _onPressOut, onResponderTerminationRequest, onStartShouldSetResponder, suppressHighlighting]);
  var eventHandlers = (0, _usePressability.default)(config);
  var eventHandlersForText = (0, _react.useMemo)(function () {
    return eventHandlers == null ? null : {
      onResponderGrant: function onResponderGrant(event) {
        eventHandlers.onResponderGrant(event);
        if (_onResponderGrant != null) {
          _onResponderGrant(event);
        }
      },
      onResponderMove: function onResponderMove(event) {
        eventHandlers.onResponderMove(event);
        if (_onResponderMove != null) {
          _onResponderMove(event);
        }
      },
      onResponderRelease: function onResponderRelease(event) {
        eventHandlers.onResponderRelease(event);
        if (_onResponderRelease != null) {
          _onResponderRelease(event);
        }
      },
      onResponderTerminate: function onResponderTerminate(event) {
        eventHandlers.onResponderTerminate(event);
        if (_onResponderTerminate != null) {
          _onResponderTerminate(event);
        }
      },
      onClick: eventHandlers.onClick,
      onResponderTerminationRequest: eventHandlers.onResponderTerminationRequest,
      onStartShouldSetResponder: eventHandlers.onStartShouldSetResponder
    };
  }, [eventHandlers, _onResponderGrant, _onResponderMove, _onResponderRelease, _onResponderTerminate]);
  var selectionColor = restProps.selectionColor == null ? null : (0, _processColor.default)(restProps.selectionColor);
  var style = restProps.style;
  if (__DEV__) {
    if (PressabilityDebug.isEnabled() && onPress != null) {
      style = [restProps.style, {
        color: 'magenta'
      }];
    }
  }
  var numberOfLines = restProps.numberOfLines;
  if (numberOfLines != null && !(numberOfLines >= 0)) {
    console.error(`'numberOfLines' in <Text> must be a non-negative number, received: ${numberOfLines}. The value will be set to 0.`);
    numberOfLines = 0;
  }
  var hasTextAncestor = (0, _react.useContext)(_TextAncestor.default);
  var _accessible = _Platform.default.select({
    ios: accessible !== false,
    default: accessible
  });
  style = (0, _flattenStyle.default)(style);
  if (typeof ((_style = style) == null ? void 0 : _style.fontWeight) === 'number') {
    var _style2;
    style.fontWeight = (_style2 = style) == null ? void 0 : _style2.fontWeight.toString();
  }
  var _selectable = restProps.selectable;
  if (((_style3 = style) == null ? void 0 : _style3.userSelect) != null) {
    _selectable = userSelectToSelectableMap[style.userSelect];
    delete style.userSelect;
  }
  if (((_style4 = style) == null ? void 0 : _style4.verticalAlign) != null) {
    style.textAlignVertical = verticalAlignToTextAlignVerticalMap[style.verticalAlign];
    delete style.verticalAlign;
  }
  var _hasOnPressOrOnLongPress = props.onPress != null || props.onLongPress != null;
  return hasTextAncestor ? (0, _jsxRuntime.jsx)(_TextNativeComponent.NativeVirtualText, Object.assign({}, restProps, eventHandlersForText, {
    accessibilityLabel: ariaLabel != null ? ariaLabel : accessibilityLabel,
    accessibilityState: _accessibilityState,
    isHighlighted: isHighlighted,
    isPressable: isPressable,
    nativeID: id != null ? id : nativeID,
    numberOfLines: numberOfLines,
    ref: forwardedRef,
    selectable: _selectable,
    selectionColor: selectionColor,
    style: style
  })) : (0, _jsxRuntime.jsx)(_TextAncestor.default.Provider, {
    value: true,
    children: (0, _jsxRuntime.jsx)(_TextNativeComponent.NativeText, Object.assign({}, restProps, eventHandlersForText, {
      accessibilityLabel: ariaLabel != null ? ariaLabel : accessibilityLabel,
      accessibilityState: nativeTextAccessibilityState,
      accessible: accessible == null && _Platform.default.OS === 'android' ? _hasOnPressOrOnLongPress : _accessible,
      allowFontScaling: allowFontScaling !== false,
      disabled: _disabled,
      ellipsizeMode: ellipsizeMode != null ? ellipsizeMode : 'tail',
      isHighlighted: isHighlighted,
      nativeID: id != null ? id : nativeID,
      numberOfLines: numberOfLines,
      ref: forwardedRef,
      selectable: _selectable,
      selectionColor: selectionColor,
      style: style
    }))
  });
});
Text.displayName = 'Text';
Text.propTypes = require('deprecated-react-native-prop-types').TextPropTypes;
function useLazyInitialization(newValue) {
  var _useState3 = (0, _react.useState)(newValue),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    oldValue = _useState4[0],
    setValue = _useState4[1];
  if (!oldValue && newValue) {
    setValue(newValue);
  }
  return oldValue;
}
var userSelectToSelectableMap = {
  auto: true,
  text: true,
  none: false,
  contain: true,
  all: true
};
var verticalAlignToTextAlignVerticalMap = {
  auto: 'auto',
  top: 'top',
  bottom: 'bottom',
  middle: 'center'
};
module.exports = Text;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcmVzc2FiaWxpdHlEZWJ1ZyIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl91c2VQcmVzc2FiaWxpdHkiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2ZsYXR0ZW5TdHlsZSIsIl9wcm9jZXNzQ29sb3IiLCJfUGxhdGZvcm0iLCJfVGV4dEFuY2VzdG9yIiwiX1RleHROYXRpdmVDb21wb25lbnQiLCJfcmVhY3QiLCJSZWFjdCIsIl9qc3hSdW50aW1lIiwiX2V4Y2x1ZGVkIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiVGV4dCIsImZvcndhcmRSZWYiLCJwcm9wcyIsImZvcndhcmRlZFJlZiIsIl9hY2Nlc3NpYmlsaXR5U3RhdGUyIiwiX2FjY2Vzc2liaWxpdHlTdGF0ZTMiLCJfc3R5bGUiLCJfc3R5bGUzIiwiX3N0eWxlNCIsImFjY2Vzc2libGUiLCJhY2Nlc3NpYmlsaXR5TGFiZWwiLCJhY2Nlc3NpYmlsaXR5U3RhdGUiLCJhbGxvd0ZvbnRTY2FsaW5nIiwiYXJpYUJ1c3kiLCJhcmlhQ2hlY2tlZCIsImFyaWFEaXNhYmxlZCIsImFyaWFFeHBhbmRlZCIsImFyaWFMYWJlbCIsImFyaWFTZWxlY3RlZCIsImVsbGlwc2l6ZU1vZGUiLCJpZCIsIm5hdGl2ZUlEIiwib25Mb25nUHJlc3MiLCJvblByZXNzIiwib25QcmVzc0luIiwib25QcmVzc091dCIsIm9uUmVzcG9uZGVyR3JhbnQiLCJvblJlc3BvbmRlck1vdmUiLCJvblJlc3BvbmRlclJlbGVhc2UiLCJvblJlc3BvbmRlclRlcm1pbmF0ZSIsIm9uUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0Iiwib25TdGFydFNob3VsZFNldFJlc3BvbmRlciIsInByZXNzUmV0ZW50aW9uT2Zmc2V0Iiwic3VwcHJlc3NIaWdobGlnaHRpbmciLCJyZXN0UHJvcHMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwiX3VzZVN0YXRlIiwidXNlU3RhdGUiLCJfdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkyIiwiaXNIaWdobGlnaHRlZCIsInNldEhpZ2hsaWdodGVkIiwiX2FjY2Vzc2liaWxpdHlTdGF0ZSIsImJ1c3kiLCJjaGVja2VkIiwiZGlzYWJsZWQiLCJleHBhbmRlZCIsInNlbGVjdGVkIiwiX2Rpc2FibGVkIiwibmF0aXZlVGV4dEFjY2Vzc2liaWxpdHlTdGF0ZSIsImFzc2lnbiIsImlzUHJlc3NhYmxlIiwiaW5pdGlhbGl6ZWQiLCJ1c2VMYXp5SW5pdGlhbGl6YXRpb24iLCJjb25maWciLCJ1c2VNZW1vIiwicHJlc3NSZWN0T2Zmc2V0IiwiZXZlbnQiLCJQbGF0Zm9ybSIsIk9TIiwib25SZXNwb25kZXJUZXJtaW5hdGlvblJlcXVlc3RfREVQUkVDQVRFRCIsIm9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXJfREVQUkVDQVRFRCIsImV2ZW50SGFuZGxlcnMiLCJ1c2VQcmVzc2FiaWxpdHkiLCJldmVudEhhbmRsZXJzRm9yVGV4dCIsIm9uQ2xpY2siLCJzZWxlY3Rpb25Db2xvciIsInByb2Nlc3NDb2xvciIsInN0eWxlIiwiX19ERVZfXyIsImlzRW5hYmxlZCIsImNvbG9yIiwibnVtYmVyT2ZMaW5lcyIsImNvbnNvbGUiLCJlcnJvciIsImhhc1RleHRBbmNlc3RvciIsInVzZUNvbnRleHQiLCJUZXh0QW5jZXN0b3IiLCJfYWNjZXNzaWJsZSIsInNlbGVjdCIsImlvcyIsImZsYXR0ZW5TdHlsZSIsImZvbnRXZWlnaHQiLCJfc3R5bGUyIiwidG9TdHJpbmciLCJfc2VsZWN0YWJsZSIsInNlbGVjdGFibGUiLCJ1c2VyU2VsZWN0IiwidXNlclNlbGVjdFRvU2VsZWN0YWJsZU1hcCIsInZlcnRpY2FsQWxpZ24iLCJ0ZXh0QWxpZ25WZXJ0aWNhbCIsInZlcnRpY2FsQWxpZ25Ub1RleHRBbGlnblZlcnRpY2FsTWFwIiwiX2hhc09uUHJlc3NPck9uTG9uZ1ByZXNzIiwianN4IiwiTmF0aXZlVmlydHVhbFRleHQiLCJyZWYiLCJQcm92aWRlciIsInZhbHVlIiwiY2hpbGRyZW4iLCJOYXRpdmVUZXh0IiwiZGlzcGxheU5hbWUiLCJwcm9wVHlwZXMiLCJUZXh0UHJvcFR5cGVzIiwibmV3VmFsdWUiLCJfdXNlU3RhdGUzIiwiX3VzZVN0YXRlNCIsIm9sZFZhbHVlIiwic2V0VmFsdWUiLCJhdXRvIiwidGV4dCIsIm5vbmUiLCJjb250YWluIiwiYWxsIiwidG9wIiwiYm90dG9tIiwibWlkZGxlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIlRleHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCB0eXBlIHtQcmVzc0V2ZW50fSBmcm9tICcuLi9UeXBlcy9Db3JlRXZlbnRUeXBlcyc7XG5pbXBvcnQgdHlwZSB7VGV4dFByb3BzfSBmcm9tICcuL1RleHRQcm9wcyc7XG5cbmltcG9ydCAqIGFzIFByZXNzYWJpbGl0eURlYnVnIGZyb20gJy4uL1ByZXNzYWJpbGl0eS9QcmVzc2FiaWxpdHlEZWJ1Zyc7XG5pbXBvcnQgdXNlUHJlc3NhYmlsaXR5IGZyb20gJy4uL1ByZXNzYWJpbGl0eS91c2VQcmVzc2FiaWxpdHknO1xuaW1wb3J0IGZsYXR0ZW5TdHlsZSBmcm9tICcuLi9TdHlsZVNoZWV0L2ZsYXR0ZW5TdHlsZSc7XG5pbXBvcnQgcHJvY2Vzc0NvbG9yIGZyb20gJy4uL1N0eWxlU2hlZXQvcHJvY2Vzc0NvbG9yJztcbmltcG9ydCBQbGF0Zm9ybSBmcm9tICcuLi9VdGlsaXRpZXMvUGxhdGZvcm0nO1xuaW1wb3J0IFRleHRBbmNlc3RvciBmcm9tICcuL1RleHRBbmNlc3Rvcic7XG5pbXBvcnQge05hdGl2ZVRleHQsIE5hdGl2ZVZpcnR1YWxUZXh0fSBmcm9tICcuL1RleHROYXRpdmVDb21wb25lbnQnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHt1c2VDb250ZXh0LCB1c2VNZW1vLCB1c2VTdGF0ZX0gZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIFRleHQgaXMgdGhlIGZ1bmRhbWVudGFsIGNvbXBvbmVudCBmb3IgZGlzcGxheWluZyB0ZXh0LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy90ZXh0XG4gKi9cbmNvbnN0IFRleHQ6IFJlYWN0LkFic3RyYWN0Q29tcG9uZW50PFxuICBUZXh0UHJvcHMsXG4gIFJlYWN0LkVsZW1lbnRSZWY8dHlwZW9mIE5hdGl2ZVRleHQgfCB0eXBlb2YgTmF0aXZlVmlydHVhbFRleHQ+LFxuPiA9IFJlYWN0LmZvcndhcmRSZWYoKHByb3BzOiBUZXh0UHJvcHMsIGZvcndhcmRlZFJlZikgPT4ge1xuICBjb25zdCB7XG4gICAgYWNjZXNzaWJsZSxcbiAgICBhY2Nlc3NpYmlsaXR5TGFiZWwsXG4gICAgYWNjZXNzaWJpbGl0eVN0YXRlLFxuICAgIGFsbG93Rm9udFNjYWxpbmcsXG4gICAgJ2FyaWEtYnVzeSc6IGFyaWFCdXN5LFxuICAgICdhcmlhLWNoZWNrZWQnOiBhcmlhQ2hlY2tlZCxcbiAgICAnYXJpYS1kaXNhYmxlZCc6IGFyaWFEaXNhYmxlZCxcbiAgICAnYXJpYS1leHBhbmRlZCc6IGFyaWFFeHBhbmRlZCxcbiAgICAnYXJpYS1sYWJlbCc6IGFyaWFMYWJlbCxcbiAgICAnYXJpYS1zZWxlY3RlZCc6IGFyaWFTZWxlY3RlZCxcbiAgICBlbGxpcHNpemVNb2RlLFxuICAgIGlkLFxuICAgIG5hdGl2ZUlELFxuICAgIG9uTG9uZ1ByZXNzLFxuICAgIG9uUHJlc3MsXG4gICAgb25QcmVzc0luLFxuICAgIG9uUHJlc3NPdXQsXG4gICAgb25SZXNwb25kZXJHcmFudCxcbiAgICBvblJlc3BvbmRlck1vdmUsXG4gICAgb25SZXNwb25kZXJSZWxlYXNlLFxuICAgIG9uUmVzcG9uZGVyVGVybWluYXRlLFxuICAgIG9uUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0LFxuICAgIG9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXIsXG4gICAgcHJlc3NSZXRlbnRpb25PZmZzZXQsXG4gICAgc3VwcHJlc3NIaWdobGlnaHRpbmcsXG4gICAgLi4ucmVzdFByb3BzXG4gIH0gPSBwcm9wcztcblxuICBjb25zdCBbaXNIaWdobGlnaHRlZCwgc2V0SGlnaGxpZ2h0ZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGxldCBfYWNjZXNzaWJpbGl0eVN0YXRlO1xuICBpZiAoXG4gICAgYWNjZXNzaWJpbGl0eVN0YXRlICE9IG51bGwgfHxcbiAgICBhcmlhQnVzeSAhPSBudWxsIHx8XG4gICAgYXJpYUNoZWNrZWQgIT0gbnVsbCB8fFxuICAgIGFyaWFEaXNhYmxlZCAhPSBudWxsIHx8XG4gICAgYXJpYUV4cGFuZGVkICE9IG51bGwgfHxcbiAgICBhcmlhU2VsZWN0ZWQgIT0gbnVsbFxuICApIHtcbiAgICBfYWNjZXNzaWJpbGl0eVN0YXRlID0ge1xuICAgICAgYnVzeTogYXJpYUJ1c3kgPz8gYWNjZXNzaWJpbGl0eVN0YXRlPy5idXN5LFxuICAgICAgY2hlY2tlZDogYXJpYUNoZWNrZWQgPz8gYWNjZXNzaWJpbGl0eVN0YXRlPy5jaGVja2VkLFxuICAgICAgZGlzYWJsZWQ6IGFyaWFEaXNhYmxlZCA/PyBhY2Nlc3NpYmlsaXR5U3RhdGU/LmRpc2FibGVkLFxuICAgICAgZXhwYW5kZWQ6IGFyaWFFeHBhbmRlZCA/PyBhY2Nlc3NpYmlsaXR5U3RhdGU/LmV4cGFuZGVkLFxuICAgICAgc2VsZWN0ZWQ6IGFyaWFTZWxlY3RlZCA/PyBhY2Nlc3NpYmlsaXR5U3RhdGU/LnNlbGVjdGVkLFxuICAgIH07XG4gIH1cblxuICBjb25zdCBfZGlzYWJsZWQgPVxuICAgIHJlc3RQcm9wcy5kaXNhYmxlZCAhPSBudWxsXG4gICAgICA/IHJlc3RQcm9wcy5kaXNhYmxlZFxuICAgICAgOiBfYWNjZXNzaWJpbGl0eVN0YXRlPy5kaXNhYmxlZDtcblxuICBjb25zdCBuYXRpdmVUZXh0QWNjZXNzaWJpbGl0eVN0YXRlID1cbiAgICBfZGlzYWJsZWQgIT09IF9hY2Nlc3NpYmlsaXR5U3RhdGU/LmRpc2FibGVkXG4gICAgICA/IHsuLi5fYWNjZXNzaWJpbGl0eVN0YXRlLCBkaXNhYmxlZDogX2Rpc2FibGVkfVxuICAgICAgOiBfYWNjZXNzaWJpbGl0eVN0YXRlO1xuXG4gIGNvbnN0IGlzUHJlc3NhYmxlID1cbiAgICAob25QcmVzcyAhPSBudWxsIHx8XG4gICAgICBvbkxvbmdQcmVzcyAhPSBudWxsIHx8XG4gICAgICBvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyICE9IG51bGwpICYmXG4gICAgX2Rpc2FibGVkICE9PSB0cnVlO1xuXG4gIGNvbnN0IGluaXRpYWxpemVkID0gdXNlTGF6eUluaXRpYWxpemF0aW9uKGlzUHJlc3NhYmxlKTtcbiAgY29uc3QgY29uZmlnID0gdXNlTWVtbyhcbiAgICAoKSA9PlxuICAgICAgaW5pdGlhbGl6ZWRcbiAgICAgICAgPyB7XG4gICAgICAgICAgICBkaXNhYmxlZDogIWlzUHJlc3NhYmxlLFxuICAgICAgICAgICAgcHJlc3NSZWN0T2Zmc2V0OiBwcmVzc1JldGVudGlvbk9mZnNldCxcbiAgICAgICAgICAgIG9uTG9uZ1ByZXNzLFxuICAgICAgICAgICAgb25QcmVzcyxcbiAgICAgICAgICAgIG9uUHJlc3NJbihldmVudDogUHJlc3NFdmVudCkge1xuICAgICAgICAgICAgICAvLyBVcGRhdGluZyBpc0hpZ2hsaWdodGVkIGNhdXNlcyB1bm5lY2Vzc2FyeSByZS1yZW5kZXJzIGZvciBwbGF0Zm9ybXMgdGhhdCBkb24ndCB1c2UgaXRcbiAgICAgICAgICAgICAgLy8gaW4gdGhlIGJlc3QgY2FzZSwgYW5kIGNhdXNlIGlzc3VlcyB3aXRoIHRleHQgc2VsZWN0aW9uIGluIHRoZSB3b3JzdCBjYXNlLiBGb3JjaW5nXG4gICAgICAgICAgICAgIC8vIHRoZSBpc0hpZ2hsaWdodGVkIHByb3AgdG8gZmFsc2Ugb24gYWxsIHBsYXRmb3JtcyBleGNlcHQgaU9TLlxuICAgICAgICAgICAgICBzZXRIaWdobGlnaHRlZChcbiAgICAgICAgICAgICAgICAoc3VwcHJlc3NIaWdobGlnaHRpbmcgPT0gbnVsbCB8fCAhc3VwcHJlc3NIaWdobGlnaHRpbmcpICYmXG4gICAgICAgICAgICAgICAgICBQbGF0Zm9ybS5PUyA9PT0gJ2lvcycsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIG9uUHJlc3NJbj8uKGV2ZW50KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvblByZXNzT3V0KGV2ZW50OiBQcmVzc0V2ZW50KSB7XG4gICAgICAgICAgICAgIHNldEhpZ2hsaWdodGVkKGZhbHNlKTtcbiAgICAgICAgICAgICAgb25QcmVzc091dD8uKGV2ZW50KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvblJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdF9ERVBSRUNBVEVEOlxuICAgICAgICAgICAgICBvblJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdCxcbiAgICAgICAgICAgIG9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXJfREVQUkVDQVRFRDogb25TdGFydFNob3VsZFNldFJlc3BvbmRlcixcbiAgICAgICAgICB9XG4gICAgICAgIDogbnVsbCxcbiAgICBbXG4gICAgICBpbml0aWFsaXplZCxcbiAgICAgIGlzUHJlc3NhYmxlLFxuICAgICAgcHJlc3NSZXRlbnRpb25PZmZzZXQsXG4gICAgICBvbkxvbmdQcmVzcyxcbiAgICAgIG9uUHJlc3MsXG4gICAgICBvblByZXNzSW4sXG4gICAgICBvblByZXNzT3V0LFxuICAgICAgb25SZXNwb25kZXJUZXJtaW5hdGlvblJlcXVlc3QsXG4gICAgICBvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyLFxuICAgICAgc3VwcHJlc3NIaWdobGlnaHRpbmcsXG4gICAgXSxcbiAgKTtcblxuICBjb25zdCBldmVudEhhbmRsZXJzID0gdXNlUHJlc3NhYmlsaXR5KGNvbmZpZyk7XG4gIGNvbnN0IGV2ZW50SGFuZGxlcnNGb3JUZXh0ID0gdXNlTWVtbyhcbiAgICAoKSA9PlxuICAgICAgZXZlbnRIYW5kbGVycyA9PSBudWxsXG4gICAgICAgID8gbnVsbFxuICAgICAgICA6IHtcbiAgICAgICAgICAgIG9uUmVzcG9uZGVyR3JhbnQoZXZlbnQ6IFByZXNzRXZlbnQpIHtcbiAgICAgICAgICAgICAgZXZlbnRIYW5kbGVycy5vblJlc3BvbmRlckdyYW50KGV2ZW50KTtcbiAgICAgICAgICAgICAgaWYgKG9uUmVzcG9uZGVyR3JhbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG9uUmVzcG9uZGVyR3JhbnQoZXZlbnQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25SZXNwb25kZXJNb3ZlKGV2ZW50OiBQcmVzc0V2ZW50KSB7XG4gICAgICAgICAgICAgIGV2ZW50SGFuZGxlcnMub25SZXNwb25kZXJNb3ZlKGV2ZW50KTtcbiAgICAgICAgICAgICAgaWYgKG9uUmVzcG9uZGVyTW92ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgb25SZXNwb25kZXJNb3ZlKGV2ZW50KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uUmVzcG9uZGVyUmVsZWFzZShldmVudDogUHJlc3NFdmVudCkge1xuICAgICAgICAgICAgICBldmVudEhhbmRsZXJzLm9uUmVzcG9uZGVyUmVsZWFzZShldmVudCk7XG4gICAgICAgICAgICAgIGlmIChvblJlc3BvbmRlclJlbGVhc2UgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG9uUmVzcG9uZGVyUmVsZWFzZShldmVudCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvblJlc3BvbmRlclRlcm1pbmF0ZShldmVudDogUHJlc3NFdmVudCkge1xuICAgICAgICAgICAgICBldmVudEhhbmRsZXJzLm9uUmVzcG9uZGVyVGVybWluYXRlKGV2ZW50KTtcbiAgICAgICAgICAgICAgaWYgKG9uUmVzcG9uZGVyVGVybWluYXRlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBvblJlc3BvbmRlclRlcm1pbmF0ZShldmVudCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkNsaWNrOiBldmVudEhhbmRsZXJzLm9uQ2xpY2ssXG4gICAgICAgICAgICBvblJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdDpcbiAgICAgICAgICAgICAgZXZlbnRIYW5kbGVycy5vblJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdCxcbiAgICAgICAgICAgIG9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXI6IGV2ZW50SGFuZGxlcnMub25TdGFydFNob3VsZFNldFJlc3BvbmRlcixcbiAgICAgICAgICB9LFxuICAgIFtcbiAgICAgIGV2ZW50SGFuZGxlcnMsXG4gICAgICBvblJlc3BvbmRlckdyYW50LFxuICAgICAgb25SZXNwb25kZXJNb3ZlLFxuICAgICAgb25SZXNwb25kZXJSZWxlYXNlLFxuICAgICAgb25SZXNwb25kZXJUZXJtaW5hdGUsXG4gICAgXSxcbiAgKTtcblxuICAvLyBUT0RPOiBNb3ZlIHRoaXMgcHJvY2Vzc2luZyB0byB0aGUgdmlldyBjb25maWd1cmF0aW9uLlxuICBjb25zdCBzZWxlY3Rpb25Db2xvciA9XG4gICAgcmVzdFByb3BzLnNlbGVjdGlvbkNvbG9yID09IG51bGxcbiAgICAgID8gbnVsbFxuICAgICAgOiBwcm9jZXNzQ29sb3IocmVzdFByb3BzLnNlbGVjdGlvbkNvbG9yKTtcblxuICBsZXQgc3R5bGUgPSByZXN0UHJvcHMuc3R5bGU7XG5cbiAgaWYgKF9fREVWX18pIHtcbiAgICBpZiAoUHJlc3NhYmlsaXR5RGVidWcuaXNFbmFibGVkKCkgJiYgb25QcmVzcyAhPSBudWxsKSB7XG4gICAgICBzdHlsZSA9IFtyZXN0UHJvcHMuc3R5bGUsIHtjb2xvcjogJ21hZ2VudGEnfV07XG4gICAgfVxuICB9XG5cbiAgbGV0IG51bWJlck9mTGluZXMgPSByZXN0UHJvcHMubnVtYmVyT2ZMaW5lcztcbiAgaWYgKG51bWJlck9mTGluZXMgIT0gbnVsbCAmJiAhKG51bWJlck9mTGluZXMgPj0gMCkpIHtcbiAgICBjb25zb2xlLmVycm9yKFxuICAgICAgYCdudW1iZXJPZkxpbmVzJyBpbiA8VGV4dD4gbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIsIHJlY2VpdmVkOiAke251bWJlck9mTGluZXN9LiBUaGUgdmFsdWUgd2lsbCBiZSBzZXQgdG8gMC5gLFxuICAgICk7XG4gICAgbnVtYmVyT2ZMaW5lcyA9IDA7XG4gIH1cblxuICBjb25zdCBoYXNUZXh0QW5jZXN0b3IgPSB1c2VDb250ZXh0KFRleHRBbmNlc3Rvcik7XG5cbiAgY29uc3QgX2FjY2Vzc2libGUgPSBQbGF0Zm9ybS5zZWxlY3Qoe1xuICAgIGlvczogYWNjZXNzaWJsZSAhPT0gZmFsc2UsXG4gICAgZGVmYXVsdDogYWNjZXNzaWJsZSxcbiAgfSk7XG5cbiAgLy8gJEZsb3dGaXhNZVt1bmRlcmNvbnN0cmFpbmVkLWltcGxpY2l0LWluc3RhbnRpYXRpb25dXG4gIHN0eWxlID0gZmxhdHRlblN0eWxlKHN0eWxlKTtcblxuICBpZiAodHlwZW9mIHN0eWxlPy5mb250V2VpZ2h0ID09PSAnbnVtYmVyJykge1xuICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgIC8vICRGbG93Rml4TWVbY2Fubm90LXdyaXRlXVxuICAgIHN0eWxlLmZvbnRXZWlnaHQgPSBzdHlsZT8uZm9udFdlaWdodC50b1N0cmluZygpO1xuICB9XG5cbiAgbGV0IF9zZWxlY3RhYmxlID0gcmVzdFByb3BzLnNlbGVjdGFibGU7XG4gIGlmIChzdHlsZT8udXNlclNlbGVjdCAhPSBudWxsKSB7XG4gICAgLy8gJEZsb3dGaXhNZVtpbnZhbGlkLWNvbXB1dGVkLXByb3BdXG4gICAgX3NlbGVjdGFibGUgPSB1c2VyU2VsZWN0VG9TZWxlY3RhYmxlTWFwW3N0eWxlLnVzZXJTZWxlY3RdO1xuICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgIC8vICRGbG93Rml4TWVbY2Fubm90LXdyaXRlXVxuICAgIGRlbGV0ZSBzdHlsZS51c2VyU2VsZWN0O1xuICB9XG5cbiAgaWYgKHN0eWxlPy52ZXJ0aWNhbEFsaWduICE9IG51bGwpIHtcbiAgICAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC13cml0ZV1cbiAgICBzdHlsZS50ZXh0QWxpZ25WZXJ0aWNhbCA9XG4gICAgICAvLyAkRmxvd0ZpeE1lW2ludmFsaWQtY29tcHV0ZWQtcHJvcF1cbiAgICAgIHZlcnRpY2FsQWxpZ25Ub1RleHRBbGlnblZlcnRpY2FsTWFwW3N0eWxlLnZlcnRpY2FsQWxpZ25dO1xuICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgIC8vICRGbG93Rml4TWVbY2Fubm90LXdyaXRlXVxuICAgIGRlbGV0ZSBzdHlsZS52ZXJ0aWNhbEFsaWduO1xuICB9XG5cbiAgY29uc3QgX2hhc09uUHJlc3NPck9uTG9uZ1ByZXNzID1cbiAgICBwcm9wcy5vblByZXNzICE9IG51bGwgfHwgcHJvcHMub25Mb25nUHJlc3MgIT0gbnVsbDtcblxuICByZXR1cm4gaGFzVGV4dEFuY2VzdG9yID8gKFxuICAgIDxOYXRpdmVWaXJ0dWFsVGV4dFxuICAgICAgey4uLnJlc3RQcm9wc31cbiAgICAgIHsuLi5ldmVudEhhbmRsZXJzRm9yVGV4dH1cbiAgICAgIGFjY2Vzc2liaWxpdHlMYWJlbD17YXJpYUxhYmVsID8/IGFjY2Vzc2liaWxpdHlMYWJlbH1cbiAgICAgIGFjY2Vzc2liaWxpdHlTdGF0ZT17X2FjY2Vzc2liaWxpdHlTdGF0ZX1cbiAgICAgIGlzSGlnaGxpZ2h0ZWQ9e2lzSGlnaGxpZ2h0ZWR9XG4gICAgICBpc1ByZXNzYWJsZT17aXNQcmVzc2FibGV9XG4gICAgICBuYXRpdmVJRD17aWQgPz8gbmF0aXZlSUR9XG4gICAgICBudW1iZXJPZkxpbmVzPXtudW1iZXJPZkxpbmVzfVxuICAgICAgcmVmPXtmb3J3YXJkZWRSZWZ9XG4gICAgICBzZWxlY3RhYmxlPXtfc2VsZWN0YWJsZX1cbiAgICAgIHNlbGVjdGlvbkNvbG9yPXtzZWxlY3Rpb25Db2xvcn1cbiAgICAgIHN0eWxlPXtzdHlsZX1cbiAgICAvPlxuICApIDogKFxuICAgIDxUZXh0QW5jZXN0b3IuUHJvdmlkZXIgdmFsdWU9e3RydWV9PlxuICAgICAgPE5hdGl2ZVRleHRcbiAgICAgICAgey4uLnJlc3RQcm9wc31cbiAgICAgICAgey4uLmV2ZW50SGFuZGxlcnNGb3JUZXh0fVxuICAgICAgICBhY2Nlc3NpYmlsaXR5TGFiZWw9e2FyaWFMYWJlbCA/PyBhY2Nlc3NpYmlsaXR5TGFiZWx9XG4gICAgICAgIGFjY2Vzc2liaWxpdHlTdGF0ZT17bmF0aXZlVGV4dEFjY2Vzc2liaWxpdHlTdGF0ZX1cbiAgICAgICAgYWNjZXNzaWJsZT17XG4gICAgICAgICAgYWNjZXNzaWJsZSA9PSBudWxsICYmIFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCdcbiAgICAgICAgICAgID8gX2hhc09uUHJlc3NPck9uTG9uZ1ByZXNzXG4gICAgICAgICAgICA6IF9hY2Nlc3NpYmxlXG4gICAgICAgIH1cbiAgICAgICAgYWxsb3dGb250U2NhbGluZz17YWxsb3dGb250U2NhbGluZyAhPT0gZmFsc2V9XG4gICAgICAgIGRpc2FibGVkPXtfZGlzYWJsZWR9XG4gICAgICAgIGVsbGlwc2l6ZU1vZGU9e2VsbGlwc2l6ZU1vZGUgPz8gJ3RhaWwnfVxuICAgICAgICBpc0hpZ2hsaWdodGVkPXtpc0hpZ2hsaWdodGVkfVxuICAgICAgICBuYXRpdmVJRD17aWQgPz8gbmF0aXZlSUR9XG4gICAgICAgIG51bWJlck9mTGluZXM9e251bWJlck9mTGluZXN9XG4gICAgICAgIHJlZj17Zm9yd2FyZGVkUmVmfVxuICAgICAgICBzZWxlY3RhYmxlPXtfc2VsZWN0YWJsZX1cbiAgICAgICAgc2VsZWN0aW9uQ29sb3I9e3NlbGVjdGlvbkNvbG9yfVxuICAgICAgICBzdHlsZT17c3R5bGV9XG4gICAgICAvPlxuICAgIDwvVGV4dEFuY2VzdG9yLlByb3ZpZGVyPlxuICApO1xufSk7XG5cblRleHQuZGlzcGxheU5hbWUgPSAnVGV4dCc7XG5cbi8qKlxuICogU3dpdGNoIHRvIGBkZXByZWNhdGVkLXJlYWN0LW5hdGl2ZS1wcm9wLXR5cGVzYCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIGZ1dHVyZVxuICogcmVsZWFzZXMuIFRoaXMgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBmdXR1cmUuXG4gKi9cblRleHQucHJvcFR5cGVzID0gcmVxdWlyZSgnZGVwcmVjYXRlZC1yZWFjdC1uYXRpdmUtcHJvcC10eXBlcycpLlRleHRQcm9wVHlwZXM7XG5cbi8qKlxuICogUmV0dXJucyBmYWxzZSB1bnRpbCB0aGUgZmlyc3QgdGltZSBgbmV3VmFsdWVgIGlzIHRydWUsIGFmdGVyIHdoaWNoIHRoaXMgd2lsbFxuICogYWx3YXlzIHJldHVybiB0cnVlLiBUaGlzIGlzIG5lY2Vzc2FyeSB0byBsYXppbHkgaW5pdGlhbGl6ZSBgUHJlc3NhYmlsaXR5YCBzb1xuICogd2UgZG8gbm90IGVhZ2VybHkgY3JlYXRlIG9uZSBmb3IgZXZlcnkgcHJlc3NhYmxlIGBUZXh0YCBjb21wb25lbnQuXG4gKi9cbmZ1bmN0aW9uIHVzZUxhenlJbml0aWFsaXphdGlvbihuZXdWYWx1ZTogYm9vbGVhbik6IGJvb2xlYW4ge1xuICBjb25zdCBbb2xkVmFsdWUsIHNldFZhbHVlXSA9IHVzZVN0YXRlKG5ld1ZhbHVlKTtcbiAgaWYgKCFvbGRWYWx1ZSAmJiBuZXdWYWx1ZSkge1xuICAgIHNldFZhbHVlKG5ld1ZhbHVlKTtcbiAgfVxuICByZXR1cm4gb2xkVmFsdWU7XG59XG5cbmNvbnN0IHVzZXJTZWxlY3RUb1NlbGVjdGFibGVNYXAgPSB7XG4gIGF1dG86IHRydWUsXG4gIHRleHQ6IHRydWUsXG4gIG5vbmU6IGZhbHNlLFxuICBjb250YWluOiB0cnVlLFxuICBhbGw6IHRydWUsXG59O1xuXG5jb25zdCB2ZXJ0aWNhbEFsaWduVG9UZXh0QWxpZ25WZXJ0aWNhbE1hcCA9IHtcbiAgYXV0bzogJ2F1dG8nLFxuICB0b3A6ICd0b3AnLFxuICBib3R0b206ICdib3R0b20nLFxuICBtaWRkbGU6ICdjZW50ZXInLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUZXh0O1xuIl0sIm1hcHBpbmdzIjoiOzs7QUFhQSxJQUFBQSxpQkFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsZ0JBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFHLGFBQUEsR0FBQUQsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFJLGFBQUEsR0FBQUYsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFLLFNBQUEsR0FBQUgsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFNLGFBQUEsR0FBQUosc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFPLG9CQUFBLEdBQUFQLE9BQUE7QUFDQSxJQUFBUSxNQUFBLEdBQUFULHVCQUFBLENBQUFDLE9BQUE7QUFBK0IsSUFBQVMsS0FBQSxHQUFBRCxNQUFBO0FBQUEsSUFBQUUsV0FBQSxHQUFBVixPQUFBO0FBQUEsSUFBQVcsU0FBQTtBQUFBLFNBQUFDLHlCQUFBQyxDQUFBLDZCQUFBQyxPQUFBLG1CQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxDQUFBLFdBQUFBLENB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