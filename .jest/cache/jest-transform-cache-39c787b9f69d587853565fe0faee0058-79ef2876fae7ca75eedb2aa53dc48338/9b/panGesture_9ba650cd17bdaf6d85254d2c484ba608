cc932bb25eead72b7d57cd8e7ac76690
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PanGesture = void 0;
var _gesture = require("./gesture");
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function changeEventCalculator(current, previous) {
  'worklet';

  var changePayload;
  if (previous === undefined) {
    changePayload = {
      changeX: current.translationX,
      changeY: current.translationY
    };
  } else {
    changePayload = {
      changeX: current.translationX - previous.translationX,
      changeY: current.translationY - previous.translationY
    };
  }
  return Object.assign({}, current, changePayload);
}
var PanGesture = function (_gesture$ContinousBas) {
  function PanGesture() {
    var _this;
    (0, _classCallCheck2.default)(this, PanGesture);
    _this = _callSuper(this, PanGesture);
    _defineProperty(_this, "config", {});
    _this.handlerName = 'PanGestureHandler';
    return _this;
  }
  (0, _inherits2.default)(PanGesture, _gesture$ContinousBas);
  return (0, _createClass2.default)(PanGesture, [{
    key: "activeOffsetY",
    value: function activeOffsetY(offset) {
      if (Array.isArray(offset)) {
        this.config.activeOffsetYStart = offset[0];
        this.config.activeOffsetYEnd = offset[1];
      } else if (offset < 0) {
        this.config.activeOffsetYStart = offset;
      } else {
        this.config.activeOffsetYEnd = offset;
      }
      return this;
    }
  }, {
    key: "activeOffsetX",
    value: function activeOffsetX(offset) {
      if (Array.isArray(offset)) {
        this.config.activeOffsetXStart = offset[0];
        this.config.activeOffsetXEnd = offset[1];
      } else if (offset < 0) {
        this.config.activeOffsetXStart = offset;
      } else {
        this.config.activeOffsetXEnd = offset;
      }
      return this;
    }
  }, {
    key: "failOffsetY",
    value: function failOffsetY(offset) {
      if (Array.isArray(offset)) {
        this.config.failOffsetYStart = offset[0];
        this.config.failOffsetYEnd = offset[1];
      } else if (offset < 0) {
        this.config.failOffsetYStart = offset;
      } else {
        this.config.failOffsetYEnd = offset;
      }
      return this;
    }
  }, {
    key: "failOffsetX",
    value: function failOffsetX(offset) {
      if (Array.isArray(offset)) {
        this.config.failOffsetXStart = offset[0];
        this.config.failOffsetXEnd = offset[1];
      } else if (offset < 0) {
        this.config.failOffsetXStart = offset;
      } else {
        this.config.failOffsetXEnd = offset;
      }
      return this;
    }
  }, {
    key: "minPointers",
    value: function minPointers(_minPointers) {
      this.config.minPointers = _minPointers;
      return this;
    }
  }, {
    key: "maxPointers",
    value: function maxPointers(_maxPointers) {
      this.config.maxPointers = _maxPointers;
      return this;
    }
  }, {
    key: "minDistance",
    value: function minDistance(distance) {
      this.config.minDist = distance;
      return this;
    }
  }, {
    key: "minVelocity",
    value: function minVelocity(velocity) {
      this.config.minVelocity = velocity;
      return this;
    }
  }, {
    key: "minVelocityX",
    value: function minVelocityX(velocity) {
      this.config.minVelocityX = velocity;
      return this;
    }
  }, {
    key: "minVelocityY",
    value: function minVelocityY(velocity) {
      this.config.minVelocityY = velocity;
      return this;
    }
  }, {
    key: "averageTouches",
    value: function averageTouches(value) {
      this.config.avgTouches = value;
      return this;
    }
  }, {
    key: "enableTrackpadTwoFingerGesture",
    value: function enableTrackpadTwoFingerGesture(value) {
      this.config.enableTrackpadTwoFingerGesture = value;
      return this;
    }
  }, {
    key: "activateAfterLongPress",
    value: function activateAfterLongPress(duration) {
      this.config.activateAfterLongPress = duration;
      return this;
    }
  }, {
    key: "onChange",
    value: function onChange(callback) {
      this.handlers.changeEventCalculator = changeEventCalculator;
      return (0, _get2.default)((0, _getPrototypeOf2.default)(PanGesture.prototype), "onChange", this).call(this, callback);
    }
  }]);
}(_gesture.ContinousBaseGesture);
exports.PanGesture = PanGesture;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,