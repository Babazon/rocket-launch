7e4101925f71bec903f3505d0c36edbc
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault2(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault2(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault2(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault2(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault2(require("@babel/runtime/helpers/inherits"));
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ForceTouchGestureHandler = exports.forceTouchHandlerName = exports.forceTouchGestureHandlerProps = void 0;
var _react = _interopRequireDefault(require("react"));
var _utils = require("../utils");
var _PlatformConstants = _interopRequireDefault(require("../PlatformConstants"));
var _createHandler = _interopRequireDefault(require("./createHandler"));
var _gestureHandlerCommon = require("./gestureHandlerCommon");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var forceTouchGestureHandlerProps = ['minForce', 'maxForce', 'feedbackOnActivation'];
exports.forceTouchGestureHandlerProps = forceTouchGestureHandlerProps;
var ForceTouchFallback = function (_react$default$Compon) {
  function ForceTouchFallback() {
    (0, _classCallCheck2.default)(this, ForceTouchFallback);
    return _callSuper(this, ForceTouchFallback, arguments);
  }
  (0, _inherits2.default)(ForceTouchFallback, _react$default$Compon);
  return (0, _createClass2.default)(ForceTouchFallback, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      console.warn((0, _utils.tagMessage)('ForceTouchGestureHandler is not available on this platform. Please use ForceTouchGestureHandler.forceTouchAvailable to conditionally render other components that would provide a fallback behavior specific to your usecase'));
    }
  }, {
    key: "render",
    value: function render() {
      return this.props.children;
    }
  }]);
}(_react.default.Component);
_defineProperty(ForceTouchFallback, "forceTouchAvailable", false);
var forceTouchHandlerName = 'ForceTouchGestureHandler';
exports.forceTouchHandlerName = forceTouchHandlerName;
var ForceTouchGestureHandler = _PlatformConstants.default !== null && _PlatformConstants.default !== void 0 && _PlatformConstants.default.forceTouchAvailable ? (0, _createHandler.default)({
  name: forceTouchHandlerName,
  allowedProps: [].concat((0, _toConsumableArray2.default)(_gestureHandlerCommon.baseGestureHandlerProps), forceTouchGestureHandlerProps),
  config: {}
}) : ForceTouchFallback;
exports.ForceTouchGestureHandler = ForceTouchGestureHandler;
ForceTouchGestureHandler.forceTouchAvailable = (_PlatformConstants.default === null || _PlatformConstants.default === void 0 ? void 0 : _PlatformConstants.default.forceTouchAvailable) || false;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl91dGlscyIsIl9QbGF0Zm9ybUNvbnN0YW50cyIsIl9jcmVhdGVIYW5kbGVyIiwiX2dlc3R1cmVIYW5kbGVyQ29tbW9uIiwiZm9yY2VUb3VjaEdlc3R1cmVIYW5kbGVyUHJvcHMiLCJGb3JjZVRvdWNoRmFsbGJhY2siLCJfcmVhY3QkZGVmYXVsdCRDb21wb24iLCJfY2xhc3NDYWxsQ2hlY2syIiwiZGVmYXVsdCIsIl9jYWxsU3VwZXIiLCJhcmd1bWVudHMiLCJfaW5oZXJpdHMyIiwiX2NyZWF0ZUNsYXNzMiIsImtleSIsInZhbHVlIiwiY29tcG9uZW50RGlkTW91bnQiLCJjb25zb2xlIiwid2FybiIsInRhZ01lc3NhZ2UiLCJyZW5kZXIiLCJwcm9wcyIsImNoaWxkcmVuIiwiQ29tcG9uZW50IiwiZm9yY2VUb3VjaEhhbmRsZXJOYW1lIiwiRm9yY2VUb3VjaEdlc3R1cmVIYW5kbGVyIiwiZm9yY2VUb3VjaEF2YWlsYWJsZSIsIm5hbWUiLCJhbGxvd2VkUHJvcHMiLCJjb25jYXQiLCJfdG9Db25zdW1hYmxlQXJyYXkyIiwiYmFzZUdlc3R1cmVIYW5kbGVyUHJvcHMiLCJjb25maWciXSwic291cmNlcyI6WyJGb3JjZVRvdWNoR2VzdHVyZUhhbmRsZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IFByb3BzV2l0aENoaWxkcmVuIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdGFnTWVzc2FnZSB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCBQbGF0Zm9ybUNvbnN0YW50cyBmcm9tICcuLi9QbGF0Zm9ybUNvbnN0YW50cyc7XG5pbXBvcnQgY3JlYXRlSGFuZGxlciBmcm9tICcuL2NyZWF0ZUhhbmRsZXInO1xuaW1wb3J0IHtcbiAgQmFzZUdlc3R1cmVIYW5kbGVyUHJvcHMsXG4gIGJhc2VHZXN0dXJlSGFuZGxlclByb3BzLFxufSBmcm9tICcuL2dlc3R1cmVIYW5kbGVyQ29tbW9uJztcblxuZXhwb3J0IGNvbnN0IGZvcmNlVG91Y2hHZXN0dXJlSGFuZGxlclByb3BzID0gW1xuICAnbWluRm9yY2UnLFxuICAnbWF4Rm9yY2UnLFxuICAnZmVlZGJhY2tPbkFjdGl2YXRpb24nLFxuXSBhcyBjb25zdDtcblxuLy8gaW1wbGljaXQgYGNoaWxkcmVuYCBwcm9wIGhhcyBiZWVuIHJlbW92ZWQgaW4gQHR5cGVzL3JlYWN0XjE4LjAuMFxuY2xhc3MgRm9yY2VUb3VjaEZhbGxiYWNrIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzV2l0aENoaWxkcmVuPHVua25vd24+PiB7XG4gIHN0YXRpYyBmb3JjZVRvdWNoQXZhaWxhYmxlID0gZmFsc2U7XG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgIHRhZ01lc3NhZ2UoXG4gICAgICAgICdGb3JjZVRvdWNoR2VzdHVyZUhhbmRsZXIgaXMgbm90IGF2YWlsYWJsZSBvbiB0aGlzIHBsYXRmb3JtLiBQbGVhc2UgdXNlIEZvcmNlVG91Y2hHZXN0dXJlSGFuZGxlci5mb3JjZVRvdWNoQXZhaWxhYmxlIHRvIGNvbmRpdGlvbmFsbHkgcmVuZGVyIG90aGVyIGNvbXBvbmVudHMgdGhhdCB3b3VsZCBwcm92aWRlIGEgZmFsbGJhY2sgYmVoYXZpb3Igc3BlY2lmaWMgdG8geW91ciB1c2VjYXNlJ1xuICAgICAgKVxuICAgICk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIEZvcmNlVG91Y2hHZXN0dXJlSGFuZGxlckV2ZW50UGF5bG9hZCA9IHtcbiAgeDogbnVtYmVyO1xuICB5OiBudW1iZXI7XG4gIGFic29sdXRlWDogbnVtYmVyO1xuICBhYnNvbHV0ZVk6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHByZXNzdXJlIG9mIGEgdG91Y2guXG4gICAqL1xuICBmb3JjZTogbnVtYmVyO1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBGb3JjZVRvdWNoR2VzdHVyZUNvbmZpZyB7XG4gIC8qKlxuICAgKlxuICAgKiBBIG1pbmltYWwgcHJlc3N1cmUgdGhhdCBpcyByZXF1aXJlZCBiZWZvcmUgaGFuZGxlciBjYW4gYWN0aXZhdGUuIFNob3VsZCBiZSBhXG4gICAqIHZhbHVlIGZyb20gcmFuZ2UgYFswLjAsIDEuMF1gLiBEZWZhdWx0IGlzIGAwLjJgLlxuICAgKi9cbiAgbWluRm9yY2U/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEEgbWF4aW1hbCBwcmVzc3VyZSB0aGF0IGNvdWxkIGJlIGFwcGxpZWQgZm9yIGhhbmRsZXIuIElmIHRoZSBwcmVzc3VyZSBpc1xuICAgKiBncmVhdGVyLCBoYW5kbGVyIGZhaWxzLiBTaG91bGQgYmUgYSB2YWx1ZSBmcm9tIHJhbmdlIGBbMC4wLCAxLjBdYC5cbiAgICovXG4gIG1heEZvcmNlPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBCb29sZWFuIHZhbHVlIGRlZmluaW5nIGlmIGhhcHRpYyBmZWVkYmFjayBoYXMgdG8gYmUgcGVyZm9ybWVkIG9uXG4gICAqIGFjdGl2YXRpb24uXG4gICAqL1xuICBmZWVkYmFja09uQWN0aXZhdGlvbj86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRm9yY2VUb3VjaEdlc3R1cmVIYW5kbGVyUHJvcHNcbiAgZXh0ZW5kcyBCYXNlR2VzdHVyZUhhbmRsZXJQcm9wczxGb3JjZVRvdWNoR2VzdHVyZUhhbmRsZXJFdmVudFBheWxvYWQ+LFxuICAgIEZvcmNlVG91Y2hHZXN0dXJlQ29uZmlnIHt9XG5cbmV4cG9ydCB0eXBlIEZvcmNlVG91Y2hHZXN0dXJlSGFuZGxlciA9IHR5cGVvZiBGb3JjZVRvdWNoR2VzdHVyZUhhbmRsZXIgJiB7XG4gIGZvcmNlVG91Y2hBdmFpbGFibGU6IGJvb2xlYW47XG59O1xuXG5leHBvcnQgY29uc3QgZm9yY2VUb3VjaEhhbmRsZXJOYW1lID0gJ0ZvcmNlVG91Y2hHZXN0dXJlSGFuZGxlcic7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlIC0tIGJhY2t3YXJkIGNvbXBhdGliaWxpdHk7IHNlZSBkZXNjcmlwdGlvbiBvbiB0aGUgdG9wIG9mIGdlc3R1cmVIYW5kbGVyQ29tbW9uLnRzIGZpbGVcbmV4cG9ydCBjb25zdCBGb3JjZVRvdWNoR2VzdHVyZUhhbmRsZXIgPSBQbGF0Zm9ybUNvbnN0YW50cz8uZm9yY2VUb3VjaEF2YWlsYWJsZVxuICA/IGNyZWF0ZUhhbmRsZXI8XG4gICAgICBGb3JjZVRvdWNoR2VzdHVyZUhhbmRsZXJQcm9wcyxcbiAgICAgIEZvcmNlVG91Y2hHZXN0dXJlSGFuZGxlckV2ZW50UGF5bG9hZFxuICAgID4oe1xuICAgICAgbmFtZTogZm9yY2VUb3VjaEhhbmRsZXJOYW1lLFxuICAgICAgYWxsb3dlZFByb3BzOiBbXG4gICAgICAgIC4uLmJhc2VHZXN0dXJlSGFuZGxlclByb3BzLFxuICAgICAgICAuLi5mb3JjZVRvdWNoR2VzdHVyZUhhbmRsZXJQcm9wcyxcbiAgICAgIF0gYXMgY29uc3QsXG4gICAgICBjb25maWc6IHt9LFxuICAgIH0pXG4gIDogRm9yY2VUb3VjaEZhbGxiYWNrO1xuXG4oRm9yY2VUb3VjaEdlc3R1cmVIYW5kbGVyIGFzIEZvcmNlVG91Y2hHZXN0dXJlSGFuZGxlcikuZm9yY2VUb3VjaEF2YWlsYWJsZSA9XG4gIFBsYXRmb3JtQ29uc3RhbnRzPy5mb3JjZVRvdWNoQXZhaWxhYmxlIHx8IGZhbHNlO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxNQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxrQkFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsY0FBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUkscUJBQUEsR0FBQUosT0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUtPLElBQU1LLDZCQUE2QixHQUFHLENBQzNDLFVBRDJDLEVBRTNDLFVBRjJDLEVBRzNDLHNCQUgyQyxDQUF0Qzs7SUFPREMsa0JBQU4sYUFBQUMscUJBQUE7RUFBQSxTQUFBRCxtQkFBQTtJQUFBLElBQUFFLGdCQUFBLENBQUFDLE9BQUEsUUFBQUgsa0JBQUE7SUFBQSxPQUFBSSxVQUFBLE9BQUFKLGtCQUFBLEVBQUFLLFNBQUE7RUFBQTtFQUFBLElBQUFDLFVBQUEsQ0FBQUgsT0FBQSxFQUFBSCxrQkFBQSxFQUFBQyxxQkFBQTtFQUFBLFdBQUFNLGFBQUEsQ0FBQUosT0FBQSxFQUFBSCxrQkFBQTtJQUFBUSxHQUFBO0lBQUFDLEtBQUEsRUFFRSxTQUFBQyxrQkFBQSxFQUFvQjtNQUNsQkMsT0FBTyxDQUFDQyxJQUFSLENBQ0UsSUFBQWpCLE1BQUEsQ0FBQWtCLFVBQUEsRUFDRSw4TkFERixDQURGO0lBS0Q7RUFBQTtJQUFBTCxHQUFBO0lBQUFDLEtBQUEsRUFDRCxTQUFBSyxPQUFBLEVBQVM7TUFDUCxPQUFPLEtBQUtDLEtBQUwsQ0FBV0MsUUFBbEI7SUFDRDtFQUFBO0FBQUEsRUFYOEJ4QixNQUFBLENBQUFXLE9BQUEsQ0FBTWMsU0FBdkM7Z0JBQU1qQixrQix5QkFDeUIsSztBQXNEeEIsSUFBTWtCLHFCQUFxQixHQUFHLDBCQUE5Qjs7QUFHQSxJQUFNQyx3QkFBd0IsR0FBR3ZCLGtCQUFBLENBQUFPLE9BQUEsYUFBQVAsa0JBQUEsQ0FBQU8sT0FBQSxlQUFBUCxrQkFBQSxDQUFBTyxPQUFBLENBQW1CaUIsbUJBQW5CLEdBQ3BDLElBQUF2QixjQUFBLENBQUFNLE9BQUEsRUFHRTtFQUNBa0IsSUFBSSxFQUFFSCxxQkFETjtFQUVBSSxZQUFZLEtBQUFDLE1BQUEsS0FBQUMsbUJBQUEsQ0FBQXJCLE9BQUEsRUFDUEwscUJBQUEsQ0FBQTJCLHVCQURTLEdBRVQxQiw2QkFGUyxDQUZkO0VBTUEyQixNQUFNLEVBQUU7QUFOUixDQUhGLENBRG9DLEdBWXBDMUIsa0JBWkc7O0FBY05tQix3QkFBRCxDQUF1REMsbUJBQXZELEdBQ0UsQ0FBQXhCLGtCQUFBLENBQUFPLE9BQUEsYUFBQVAsa0JBQUEsQ0FBQU8sT0FBQSx1QkFBQVAsa0JBQUEsQ0FBQU8sT0FBQSxDQUFtQmlCLG1CQUFuQixLQUEwQyxLQUQ1QyIsImlnbm9yZUxpc3QiOltdfQ==