418dfc18222d2419d45b38a90ead359c
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault2(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault2(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault2(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault2(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault2(require("@babel/runtime/helpers/inherits"));
var _defineProperty3 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createHandler;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _isEqual = _interopRequireDefault(require("lodash/isEqual"));
var _RNGestureHandlerModule = _interopRequireDefault(require("../RNGestureHandlerModule"));
var _State = require("../State");
var _handlersRegistry = require("./handlersRegistry");
var _gestureHandlerCommon = require("./gestureHandlerCommon");
var _utils = require("../utils");
var _ActionType = require("../ActionType");
var _PressabilityDebugView = require("./PressabilityDebugView");
var _GestureHandlerRootViewContext = _interopRequireDefault(require("../GestureHandlerRootViewContext"));
var _ghQueueMicrotask = require("../ghQueueMicrotask");
var _UIManagerAny$getView, _UIManagerAny$getView2, _UIManagerAny$getCons;
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();
  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };
  return cache;
}
function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache();
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var UIManagerAny = _reactNative.UIManager;
var customGHEventsConfigFabricAndroid = {
  topOnGestureHandlerEvent: {
    registrationName: 'onGestureHandlerEvent'
  },
  topOnGestureHandlerStateChange: {
    registrationName: 'onGestureHandlerStateChange'
  }
};
var customGHEventsConfig = Object.assign({
  onGestureHandlerEvent: {
    registrationName: 'onGestureHandlerEvent'
  },
  onGestureHandlerStateChange: {
    registrationName: 'onGestureHandlerStateChange'
  }
}, (0, _utils.isFabric)() && _reactNative.Platform.OS === 'android' && customGHEventsConfigFabricAndroid);
UIManagerAny.genericDirectEventTypes = Object.assign({}, UIManagerAny.genericDirectEventTypes, customGHEventsConfig);
var UIManagerConstants = (_UIManagerAny$getView = (_UIManagerAny$getView2 = UIManagerAny.getViewManagerConfig) === null || _UIManagerAny$getView2 === void 0 ? void 0 : _UIManagerAny$getView2.call(UIManagerAny, 'getConstants')) !== null && _UIManagerAny$getView !== void 0 ? _UIManagerAny$getView : (_UIManagerAny$getCons = UIManagerAny.getConstants) === null || _UIManagerAny$getCons === void 0 ? void 0 : _UIManagerAny$getCons.call(UIManagerAny);
if (UIManagerConstants) {
  UIManagerConstants.genericDirectEventTypes = Object.assign({}, UIManagerConstants.genericDirectEventTypes, customGHEventsConfig);
}
var _UIManagerAny$setJSRe = UIManagerAny.setJSResponder,
  oldSetJSResponder = _UIManagerAny$setJSRe === void 0 ? function () {} : _UIManagerAny$setJSRe,
  _UIManagerAny$clearJS = UIManagerAny.clearJSResponder,
  oldClearJSResponder = _UIManagerAny$clearJS === void 0 ? function () {} : _UIManagerAny$clearJS;
UIManagerAny.setJSResponder = function (tag, blockNativeResponder) {
  _RNGestureHandlerModule.default.handleSetJSResponder(tag, blockNativeResponder);
  oldSetJSResponder(tag, blockNativeResponder);
};
UIManagerAny.clearJSResponder = function () {
  _RNGestureHandlerModule.default.handleClearJSResponder();
  oldClearJSResponder();
};
var allowTouches = true;
var DEV_ON_ANDROID = __DEV__ && _reactNative.Platform.OS === 'android';
if (DEV_ON_ANDROID) {
  _reactNative.DeviceEventEmitter.addListener('toggleElementInspector', function () {
    allowTouches = !allowTouches;
  });
}
function hasUnresolvedRefs(props) {
  var extract = function extract(refs) {
    if (!Array.isArray(refs)) {
      return refs && refs.current === null;
    }
    return refs.some(function (r) {
      return r && r.current === null;
    });
  };
  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);
}
var stateToPropMappings = (0, _defineProperty3.default)((0, _defineProperty3.default)((0, _defineProperty3.default)((0, _defineProperty3.default)((0, _defineProperty3.default)((0, _defineProperty3.default)({}, _State.State.UNDETERMINED, undefined), _State.State.BEGAN, 'onBegan'), _State.State.FAILED, 'onFailed'), _State.State.CANCELLED, 'onCancelled'), _State.State.ACTIVE, 'onActivated'), _State.State.END, 'onEnded');
var UNRESOLVED_REFS_RETRY_LIMIT = 1;
function createHandler(_ref) {
  var name = _ref.name,
    _ref$allowedProps = _ref.allowedProps,
    allowedProps = _ref$allowedProps === void 0 ? [] : _ref$allowedProps,
    _ref$config = _ref.config,
    config = _ref$config === void 0 ? {} : _ref$config,
    transformProps = _ref.transformProps,
    _ref$customNativeProp = _ref.customNativeProps,
    customNativeProps = _ref$customNativeProp === void 0 ? [] : _ref$customNativeProp;
  var Handler = function (_React$Component) {
    function Handler(props) {
      var _this;
      (0, _classCallCheck2.default)(this, Handler);
      _this = _callSuper(this, Handler, [props]);
      _defineProperty(_this, "handlerTag", void 0);
      _defineProperty(_this, "config", void 0);
      _defineProperty(_this, "propsRef", void 0);
      _defineProperty(_this, "isMountedRef", void 0);
      _defineProperty(_this, "viewNode", void 0);
      _defineProperty(_this, "viewTag", void 0);
      _defineProperty(_this, "inspectorToggleListener", void 0);
      _defineProperty(_this, "onGestureHandlerEvent", function (event) {
        if (event.nativeEvent.handlerTag === _this.handlerTag) {
          if (typeof _this.props.onGestureEvent === 'function') {
            var _this$props$onGesture, _this$props;
            (_this$props$onGesture = (_this$props = _this.props).onGestureEvent) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props, event);
          }
        } else {
          var _this$props$onGesture2, _this$props2;
          (_this$props$onGesture2 = (_this$props2 = _this.props).onGestureHandlerEvent) === null || _this$props$onGesture2 === void 0 ? void 0 : _this$props$onGesture2.call(_this$props2, event);
        }
      });
      _defineProperty(_this, "onGestureHandlerStateChange", function (event) {
        if (event.nativeEvent.handlerTag === _this.handlerTag) {
          if (typeof _this.props.onHandlerStateChange === 'function') {
            var _this$props$onHandler, _this$props3;
            (_this$props$onHandler = (_this$props3 = _this.props).onHandlerStateChange) === null || _this$props$onHandler === void 0 ? void 0 : _this$props$onHandler.call(_this$props3, event);
          }
          var state = event.nativeEvent.state;
          var stateEventName = stateToPropMappings[state];
          var eventHandler = stateEventName && _this.props[stateEventName];
          if (eventHandler && typeof eventHandler === 'function') {
            eventHandler(event);
          }
        } else {
          var _this$props$onGesture3, _this$props4;
          (_this$props$onGesture3 = (_this$props4 = _this.props).onGestureHandlerStateChange) === null || _this$props$onGesture3 === void 0 ? void 0 : _this$props$onGesture3.call(_this$props4, event);
        }
      });
      _defineProperty(_this, "refHandler", function (node) {
        _this.viewNode = node;
        var child = React.Children.only(_this.props.children);
        var ref = child.ref;
        if (ref !== null) {
          if (typeof ref === 'function') {
            ref(node);
          } else {
            ref.current = node;
          }
        }
      });
      _defineProperty(_this, "createGestureHandler", function (newConfig) {
        _this.config = newConfig;
        _RNGestureHandlerModule.default.createGestureHandler(name, _this.handlerTag, newConfig);
      });
      _defineProperty(_this, "attachGestureHandler", function (newViewTag) {
        _this.viewTag = newViewTag;
        if (_reactNative.Platform.OS === 'web') {
          _RNGestureHandlerModule.default.attachGestureHandler(_this.handlerTag, newViewTag, _ActionType.ActionType.JS_FUNCTION_OLD_API, _this.propsRef);
        } else {
          (0, _handlersRegistry.registerOldGestureHandler)(_this.handlerTag, {
            onGestureEvent: _this.onGestureHandlerEvent,
            onGestureStateChange: _this.onGestureHandlerStateChange
          });
          var actionType = function () {
            var _this$props5, _this$props6, _this$props7;
            if ((_this$props5 = _this.props) !== null && _this$props5 !== void 0 && _this$props5.onGestureEvent && 'current' in _this.props.onGestureEvent || (_this$props6 = _this.props) !== null && _this$props6 !== void 0 && _this$props6.onHandlerStateChange && 'current' in _this.props.onHandlerStateChange) {
              return _ActionType.ActionType.REANIMATED_WORKLET;
            } else if ((_this$props7 = _this.props) !== null && _this$props7 !== void 0 && _this$props7.onGestureEvent && '__isNative' in _this.props.onGestureEvent) {
              return _ActionType.ActionType.NATIVE_ANIMATED_EVENT;
            } else {
              return _ActionType.ActionType.JS_FUNCTION_OLD_API;
            }
          }();
          _RNGestureHandlerModule.default.attachGestureHandler(_this.handlerTag, newViewTag, actionType);
        }
        (0, _gestureHandlerCommon.scheduleFlushOperations)();
      });
      _defineProperty(_this, "updateGestureHandler", function (newConfig) {
        _this.config = newConfig;
        _RNGestureHandlerModule.default.updateGestureHandler(_this.handlerTag, newConfig);
        (0, _gestureHandlerCommon.scheduleFlushOperations)();
      });
      _this.handlerTag = (0, _handlersRegistry.getNextHandlerTag)();
      _this.config = {};
      _this.propsRef = React.createRef();
      _this.isMountedRef = React.createRef();
      _this.state = {
        allowTouches: allowTouches
      };
      if (props.id) {
        if (_handlersRegistry.handlerIDToTag[props.id] !== undefined) {
          throw new Error(`Handler with ID "${props.id}" already registered`);
        }
        _handlersRegistry.handlerIDToTag[props.id] = _this.handlerTag;
      }
      return _this;
    }
    (0, _inherits2.default)(Handler, _React$Component);
    return (0, _createClass2.default)(Handler, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;
        var props = this.props;
        this.isMountedRef.current = true;
        if (DEV_ON_ANDROID) {
          this.inspectorToggleListener = _reactNative.DeviceEventEmitter.addListener('toggleElementInspector', function () {
            _this2.setState(function (_) {
              return {
                allowTouches: allowTouches
              };
            });
            _this2.update(UNRESOLVED_REFS_RETRY_LIMIT);
          });
        }
        if (hasUnresolvedRefs(props)) {
          (0, _ghQueueMicrotask.ghQueueMicrotask)(function () {
            _this2.update(UNRESOLVED_REFS_RETRY_LIMIT);
          });
        }
        this.createGestureHandler((0, _gestureHandlerCommon.filterConfig)(transformProps ? transformProps(this.props) : this.props, [].concat((0, _toConsumableArray2.default)(allowedProps), (0, _toConsumableArray2.default)(customNativeProps)), config));
        this.attachGestureHandler((0, _gestureHandlerCommon.findNodeHandle)(this.viewNode));
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        var viewTag = (0, _gestureHandlerCommon.findNodeHandle)(this.viewNode);
        if (this.viewTag !== viewTag) {
          this.attachGestureHandler(viewTag);
        }
        this.update(UNRESOLVED_REFS_RETRY_LIMIT);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var _this$inspectorToggle;
        (_this$inspectorToggle = this.inspectorToggleListener) === null || _this$inspectorToggle === void 0 ? void 0 : _this$inspectorToggle.remove();
        this.isMountedRef.current = false;
        _RNGestureHandlerModule.default.dropGestureHandler(this.handlerTag);
        (0, _gestureHandlerCommon.scheduleFlushOperations)();
        var handlerID = this.props.id;
        if (handlerID) {
          delete _handlersRegistry.handlerIDToTag[handlerID];
        }
      }
    }, {
      key: "update",
      value: function update(remainingTries) {
        var _this3 = this;
        if (!this.isMountedRef.current) {
          return;
        }
        var props = this.props;
        if (hasUnresolvedRefs(props) && remainingTries > 0) {
          (0, _ghQueueMicrotask.ghQueueMicrotask)(function () {
            _this3.update(remainingTries - 1);
          });
        } else {
          var newConfig = (0, _gestureHandlerCommon.filterConfig)(transformProps ? transformProps(this.props) : this.props, [].concat((0, _toConsumableArray2.default)(allowedProps), (0, _toConsumableArray2.default)(customNativeProps)), config);
          if (!(0, _isEqual.default)(this.config, newConfig)) {
            this.updateGestureHandler(newConfig);
          }
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(updates) {
        var mergedProps = Object.assign({}, this.props, updates);
        var newConfig = (0, _gestureHandlerCommon.filterConfig)(transformProps ? transformProps(mergedProps) : mergedProps, [].concat((0, _toConsumableArray2.default)(allowedProps), (0, _toConsumableArray2.default)(customNativeProps)), config);
        this.updateGestureHandler(newConfig);
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props$testID;
        if (__DEV__ && !this.context && !(0, _utils.isJestEnv)() && _reactNative.Platform.OS !== 'web') {
          throw new Error(name + ' must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.');
        }
        var gestureEventHandler = this.onGestureHandlerEvent;
        var _this$props8 = this.props,
          onGestureEvent = _this$props8.onGestureEvent,
          onGestureHandlerEvent = _this$props8.onGestureHandlerEvent;
        if (onGestureEvent && typeof onGestureEvent !== 'function') {
          if (onGestureHandlerEvent) {
            throw new Error('Nesting touch handlers with native animated driver is not supported yet');
          }
          gestureEventHandler = onGestureEvent;
        } else {
          if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== 'function') {
            throw new Error('Nesting touch handlers with native animated driver is not supported yet');
          }
        }
        var gestureStateEventHandler = this.onGestureHandlerStateChange;
        var _this$props9 = this.props,
          onHandlerStateChange = _this$props9.onHandlerStateChange,
          onGestureHandlerStateChange = _this$props9.onGestureHandlerStateChange;
        if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {
          if (onGestureHandlerStateChange) {
            throw new Error('Nesting touch handlers with native animated driver is not supported yet');
          }
          gestureStateEventHandler = onHandlerStateChange;
        } else {
          if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== 'function') {
            throw new Error('Nesting touch handlers with native animated driver is not supported yet');
          }
        }
        var events = {
          onGestureHandlerEvent: this.state.allowTouches ? gestureEventHandler : undefined,
          onGestureHandlerStateChange: this.state.allowTouches ? gestureStateEventHandler : undefined
        };
        this.propsRef.current = events;
        var child = null;
        try {
          child = React.Children.only(this.props.children);
        } catch (e) {
          throw new Error((0, _utils.tagMessage)(`${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`));
        }
        var grandChildren = child.props.children;
        if (__DEV__ && child.type && (child.type === 'RNGestureHandlerButton' || child.type.name === 'View' || child.type.displayName === 'View')) {
          grandChildren = React.Children.toArray(grandChildren);
          grandChildren.push(React.createElement(_PressabilityDebugView.PressabilityDebugView, {
            key: "pressabilityDebugView",
            color: "mediumspringgreen",
            hitSlop: child.props.hitSlop
          }));
        }
        return React.cloneElement(child, Object.assign({
          ref: this.refHandler,
          collapsable: false
        }, (0, _utils.isJestEnv)() ? {
          handlerType: name,
          handlerTag: this.handlerTag
        } : {}, {
          testID: (_this$props$testID = this.props.testID) !== null && _this$props$testID !== void 0 ? _this$props$testID : child.props.testID
        }, events), grandChildren);
      }
    }]);
  }(React.Component);
  _defineProperty(Handler, "displayName", name);
  _defineProperty(Handler, "contextType", _GestureHandlerRootViewContext.default);
  return Handler;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9pc0VxdWFsIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9STkdlc3R1cmVIYW5kbGVyTW9kdWxlIiwiX1N0YXRlIiwiX2hhbmRsZXJzUmVnaXN0cnkiLCJfZ2VzdHVyZUhhbmRsZXJDb21tb24iLCJfdXRpbHMiLCJfQWN0aW9uVHlwZSIsIl9QcmVzc2FiaWxpdHlEZWJ1Z1ZpZXciLCJfR2VzdHVyZUhhbmRsZXJSb290Vmlld0NvbnRleHQiLCJfZ2hRdWV1ZU1pY3JvdGFzayIsIlVJTWFuYWdlckFueSIsIlVJTWFuYWdlciIsImN1c3RvbUdIRXZlbnRzQ29uZmlnRmFicmljQW5kcm9pZCIsInRvcE9uR2VzdHVyZUhhbmRsZXJFdmVudCIsInJlZ2lzdHJhdGlvbk5hbWUiLCJ0b3BPbkdlc3R1cmVIYW5kbGVyU3RhdGVDaGFuZ2UiLCJjdXN0b21HSEV2ZW50c0NvbmZpZyIsIk9iamVjdCIsImFzc2lnbiIsIm9uR2VzdHVyZUhhbmRsZXJFdmVudCIsIm9uR2VzdHVyZUhhbmRsZXJTdGF0ZUNoYW5nZSIsImlzRmFicmljIiwiUGxhdGZvcm0iLCJPUyIsImdlbmVyaWNEaXJlY3RFdmVudFR5cGVzIiwiVUlNYW5hZ2VyQ29uc3RhbnRzIiwiX1VJTWFuYWdlckFueSRnZXRWaWV3IiwiX1VJTWFuYWdlckFueSRnZXRWaWV3MiIsImdldFZpZXdNYW5hZ2VyQ29uZmlnIiwiY2FsbCIsIl9VSU1hbmFnZXJBbnkkZ2V0Q29ucyIsImdldENvbnN0YW50cyIsIl9VSU1hbmFnZXJBbnkkc2V0SlNSZSIsInNldEpTUmVzcG9uZGVyIiwib2xkU2V0SlNSZXNwb25kZXIiLCJfVUlNYW5hZ2VyQW55JGNsZWFySlMiLCJjbGVhckpTUmVzcG9uZGVyIiwib2xkQ2xlYXJKU1Jlc3BvbmRlciIsInRhZyIsImJsb2NrTmF0aXZlUmVzcG9uZGVyIiwiZGVmYXVsdCIsImhhbmRsZVNldEpTUmVzcG9uZGVyIiwiaGFuZGxlQ2xlYXJKU1Jlc3BvbmRlciIsImFsbG93VG91Y2hlcyIsIkRFVl9PTl9BTkRST0lEIiwiX19ERVZfXyIsIkRldmljZUV2ZW50RW1pdHRlciIsImFkZExpc3RlbmVyIiwiaGFzVW5yZXNvbHZlZFJlZnMiLCJwcm9wcyIsImV4dHJhY3QiLCJyZWZzIiwiQXJyYXkiLCJpc0FycmF5IiwiY3VycmVudCIsInNvbWUiLCJyIiwic3RhdGVUb1Byb3BNYXBwaW5ncyIsIl9kZWZpbmVQcm9wZXJ0eTMiLCJTdGF0ZSIsIlVOREVURVJNSU5FRCIsInVuZGVmaW5lZCIsIkJFR0FOIiwiRkFJTEVEIiwiQ0FOQ0VMTEVEIiwiQUNUSVZFIiwiRU5EIiwiVU5SRVNPTFZFRF9SRUZTX1JFVFJZX0xJTUlUIiwiY3JlYXRlSGFuZGxlciIsIl9yZWYiLCJuYW1lIiwiX3JlZiRhbGxvd2VkUHJvcHMiLCJhbGxvd2VkUHJvcHMiLCJfcmVmJGNvbmZpZyIsImNvbmZpZyIsInRyYW5zZm9ybVByb3BzIiwiX3JlZiRjdXN0b21OYXRpdmVQcm9wIiwiY3VzdG9tTmF0aXZlUHJvcHMiLCJIYW5kbGVyIiwiX1JlYWN0JENvbXBvbmVudCIsIl90aGlzIiwiX2NsYXNzQ2FsbENoZWNrMiIsIl9jYWxsU3VwZXIiLCJfZGVmaW5lUHJvcGVydHkiLCJldmVudCIsIm5hdGl2ZUV2ZW50IiwiaGFuZGxlclRhZyIsIm9uR2VzdHVyZUV2ZW50IiwiX3RoaXMkcHJvcHMkb25HZXN0dXJlIiwiX3RoaXMkcHJvcHMiLCJfdGhpcyRwcm9wcyRvbkdlc3R1cmUyIiwiX3RoaXMkcHJvcHMyIiwib25IYW5kbGVyU3RhdGVDaGFuZ2UiLCJfdGhpcyRwcm9wcyRvbkhhbmRsZXIiLCJfdGhpcyRwcm9wczMiLCJzdGF0ZSIsInN0YXRlRXZlbnROYW1lIiwiZXZlbnRIYW5kbGVyIiwiX3RoaXMkcHJvcHMkb25HZXN0dXJlMyIsIl90aGlzJHByb3BzNCIsIm5vZGUiLCJ2aWV3Tm9kZSIsImNoaWxkIiwiQ2hpbGRyZW4iLCJvbmx5IiwiY2hpbGRyZW4iLCJyZWYiLCJuZXdDb25maWciLCJjcmVhdGVHZXN0dXJlSGFuZGxlciIsIm5ld1ZpZXdUYWciLCJ2aWV3VGFnIiwiYXR0YWNoR2VzdHVyZUhhbmRsZXIiLCJBY3Rpb25UeXBlIiwiSlNfRlVOQ1RJT05fT0xEX0FQSSIsInByb3BzUmVmIiwicmVnaXN0ZXJPbGRHZXN0dXJlSGFuZGxlciIsIm9uR2VzdHVyZVN0YXRlQ2hhbmdlIiwiYWN0aW9uVHlwZSIsIl90aGlzJHByb3BzNSIsIl90aGlzJHByb3BzNiIsIl90aGlzJHByb3BzNyIsIlJFQU5JTUFURURfV09SS0xFVCIsIk5BVElWRV9BTklNQVRFRF9FVkVOVCIsInNjaGVkdWxlRmx1c2hPcGVyYXRpb25zIiwidXBkYXRlR2VzdHVyZUhhbmRsZXIiLCJnZXROZXh0SGFuZGxlclRhZyIsImNyZWF0ZVJlZiIsImlzTW91bnRlZFJlZiIsImlkIiwiaGFuZGxlcklEVG9UYWciLCJFcnJvciIsIl9pbmhlcml0czIiLCJfY3JlYXRlQ2xhc3MyIiwia2V5IiwidmFsdWUiLCJjb21wb25lbnREaWRNb3VudCIsIl90aGlzMiIsImluc3BlY3RvclRvZ2dsZUxpc3RlbmVyIiwic2V0U3RhdGUiLCJfIiwidXBkYXRlIiwiZ2hRdWV1ZU1pY3JvdGFzayIsImZpbHRlckNvbmZpZyIsImNvbmNhdCIsIl90b0NvbnN1bWFibGVBcnJheTIiLCJmaW5kTm9kZUhhbmRsZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiX3RoaXMkaW5zcGVjdG9yVG9nZ2xlIiwicmVtb3ZlIiwiZHJvcEdlc3R1cmVIYW5kbGVyIiwiaGFuZGxlcklEIiwicmVtYWluaW5nVHJpZXMiLCJfdGhpczMiLCJzZXROYXRpdmVQcm9wcyIsInVwZGF0ZXMiLCJtZXJnZWRQcm9wcyIsInJlbmRlciIsIl90aGlzJHByb3BzJHRlc3RJRCIsImNvbnRleHQiLCJpc0plc3RFbnYiLCJnZXN0dXJlRXZlbnRIYW5kbGVyIiwiX3RoaXMkcHJvcHM4IiwiZ2VzdHVyZVN0YXRlRXZlbnRIYW5kbGVyIiwiX3RoaXMkcHJvcHM5IiwiZXZlbnRzIiwiZSIsInRhZ01lc3NhZ2UiLCJncmFuZENoaWxkcmVuIiwidHlwZSIsImRpc3BsYXlOYW1lIiwidG9BcnJheSIsInB1c2giLCJjcmVhdGVFbGVtZW50IiwiUHJlc3NhYmlsaXR5RGVidWdWaWV3IiwiY29sb3IiLCJoaXRTbG9wIiwiY2xvbmVFbGVtZW50IiwicmVmSGFuZGxlciIsImNvbGxhcHNhYmxlIiwiaGFuZGxlclR5cGUiLCJ0ZXN0SUQiLCJDb21wb25lbnQiXSwic291cmNlcyI6WyJjcmVhdGVIYW5kbGVyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1xuICBQbGF0Zm9ybSxcbiAgVUlNYW5hZ2VyLFxuICBEZXZpY2VFdmVudEVtaXR0ZXIsXG4gIEVtaXR0ZXJTdWJzY3JpcHRpb24sXG59IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG4vLyBAdHMtaWdub3JlIC0gaXQgaXNuJ3QgdHlwZWQgYnkgVFMgJiBkb24ndCBoYXZlIGRlZmluaXRlbHlUeXBlZCB0eXBlc1xuaW1wb3J0IGRlZXBFcXVhbCBmcm9tICdsb2Rhc2gvaXNFcXVhbCc7XG5pbXBvcnQgUk5HZXN0dXJlSGFuZGxlck1vZHVsZSBmcm9tICcuLi9STkdlc3R1cmVIYW5kbGVyTW9kdWxlJztcbmltcG9ydCB0eXBlIFJOR2VzdHVyZUhhbmRsZXJNb2R1bGVXZWIgZnJvbSAnLi4vUk5HZXN0dXJlSGFuZGxlck1vZHVsZS53ZWInO1xuaW1wb3J0IHsgU3RhdGUgfSBmcm9tICcuLi9TdGF0ZSc7XG5pbXBvcnQge1xuICBoYW5kbGVySURUb1RhZyxcbiAgZ2V0TmV4dEhhbmRsZXJUYWcsXG4gIHJlZ2lzdGVyT2xkR2VzdHVyZUhhbmRsZXIsXG59IGZyb20gJy4vaGFuZGxlcnNSZWdpc3RyeSc7XG5cbmltcG9ydCB7XG4gIEJhc2VHZXN0dXJlSGFuZGxlclByb3BzLFxuICBmaWx0ZXJDb25maWcsXG4gIEdlc3R1cmVFdmVudCxcbiAgSGFuZGxlclN0YXRlQ2hhbmdlRXZlbnQsXG4gIGZpbmROb2RlSGFuZGxlLFxuICBzY2hlZHVsZUZsdXNoT3BlcmF0aW9ucyxcbn0gZnJvbSAnLi9nZXN0dXJlSGFuZGxlckNvbW1vbic7XG5pbXBvcnQgeyBWYWx1ZU9mIH0gZnJvbSAnLi4vdHlwZVV0aWxzJztcbmltcG9ydCB7IGlzRmFicmljLCBpc0plc3RFbnYsIHRhZ01lc3NhZ2UgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBBY3Rpb25UeXBlIH0gZnJvbSAnLi4vQWN0aW9uVHlwZSc7XG5pbXBvcnQgeyBQcmVzc2FiaWxpdHlEZWJ1Z1ZpZXcgfSBmcm9tICcuL1ByZXNzYWJpbGl0eURlYnVnVmlldyc7XG5pbXBvcnQgR2VzdHVyZUhhbmRsZXJSb290Vmlld0NvbnRleHQgZnJvbSAnLi4vR2VzdHVyZUhhbmRsZXJSb290Vmlld0NvbnRleHQnO1xuaW1wb3J0IHsgZ2hRdWV1ZU1pY3JvdGFzayB9IGZyb20gJy4uL2doUXVldWVNaWNyb3Rhc2snO1xuXG5jb25zdCBVSU1hbmFnZXJBbnkgPSBVSU1hbmFnZXIgYXMgYW55O1xuXG5jb25zdCBjdXN0b21HSEV2ZW50c0NvbmZpZ0ZhYnJpY0FuZHJvaWQgPSB7XG4gIHRvcE9uR2VzdHVyZUhhbmRsZXJFdmVudDogeyByZWdpc3RyYXRpb25OYW1lOiAnb25HZXN0dXJlSGFuZGxlckV2ZW50JyB9LFxuICB0b3BPbkdlc3R1cmVIYW5kbGVyU3RhdGVDaGFuZ2U6IHtcbiAgICByZWdpc3RyYXRpb25OYW1lOiAnb25HZXN0dXJlSGFuZGxlclN0YXRlQ2hhbmdlJyxcbiAgfSxcbn07XG5cbmNvbnN0IGN1c3RvbUdIRXZlbnRzQ29uZmlnID0ge1xuICBvbkdlc3R1cmVIYW5kbGVyRXZlbnQ6IHsgcmVnaXN0cmF0aW9uTmFtZTogJ29uR2VzdHVyZUhhbmRsZXJFdmVudCcgfSxcbiAgb25HZXN0dXJlSGFuZGxlclN0YXRlQ2hhbmdlOiB7XG4gICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uR2VzdHVyZUhhbmRsZXJTdGF0ZUNoYW5nZScsXG4gIH0sXG5cbiAgLy8gV2hlbiB1c2luZyBSZWFjdCBOYXRpdmUgR2VzdHVyZSBIYW5kbGVyIGZvciBBbmltYXRlZC5ldmVudCB3aXRoIHVzZU5hdGl2ZURyaXZlcjogdHJ1ZVxuICAvLyBvbiBBbmRyb2lkIHdpdGggRmFicmljIGVuYWJsZWQsIHRoZSBuYXRpdmUgcGFydCBzdGlsbCBzZW5kcyB0aGUgbmF0aXZlIGV2ZW50cyB0byBKU1xuICAvLyBidXQgcHJlZml4ZWQgd2l0aCBcInRvcFwiLiBXZSBjYW5ub3Qgc2ltcGx5IHJlbmFtZSB0aGUgZXZlbnRzIGFib3ZlIHNvIHRoZXkgYXJlIHByZWZpeGVkXG4gIC8vIHdpdGggXCJ0b3BcIiBpbnN0ZWFkIG9mIFwib25cIiBiZWNhdXNlIGluIHN1Y2ggY2FzZSBBbmltYXRlZC5ldmVudHMgd291bGQgbm90IGJlIHJlZ2lzdGVyZWQuXG4gIC8vIFRoYXQncyB3aHkgd2UgbmVlZCB0byByZWdpc3RlciBhbm90aGVyIHBhaXIgb2YgZXZlbnQgbmFtZXMuXG4gIC8vIFRoZSBpbmNvbWluZyBldmVudHMgd2lsbCBiZSBxdWV1ZWQgYnV0IG5ldmVyIGhhbmRsZWQuXG4gIC8vIFdpdGhvdXQgdGhpcyBwaWVjZSBvZiBjb2RlIGJlbG93LCB5b3UnbGwgZ2V0IHRoZSBmb2xsb3dpbmcgSlMgZXJyb3I6XG4gIC8vIFVuc3VwcG9ydGVkIHRvcCBsZXZlbCBldmVudCB0eXBlIFwidG9wT25HZXN0dXJlSGFuZGxlckV2ZW50XCIgZGlzcGF0Y2hlZFxuICAuLi4oaXNGYWJyaWMoKSAmJlxuICAgIFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcgJiZcbiAgICBjdXN0b21HSEV2ZW50c0NvbmZpZ0ZhYnJpY0FuZHJvaWQpLFxufTtcblxuLy8gQWRkIGdlc3R1cmUgc3BlY2lmaWMgZXZlbnRzIHRvIGdlbmVyaWNEaXJlY3RFdmVudFR5cGVzIG9iamVjdCBleHBvcnRlZCBmcm9tIFVJTWFuYWdlclxuLy8gbmF0aXZlIG1vZHVsZS5cbi8vIE9uY2UgbmV3IGV2ZW50IHR5cGVzIGFyZSByZWdpc3RlcmVkIHdpdGggcmVhY3QgaXQgaXMgcG9zc2libGUgdG8gZGlzcGF0Y2ggdGhlc2Vcbi8vIGV2ZW50cyB0byBhbGwga2luZCBvZiBuYXRpdmUgdmlld3MuXG5VSU1hbmFnZXJBbnkuZ2VuZXJpY0RpcmVjdEV2ZW50VHlwZXMgPSB7XG4gIC4uLlVJTWFuYWdlckFueS5nZW5lcmljRGlyZWN0RXZlbnRUeXBlcyxcbiAgLi4uY3VzdG9tR0hFdmVudHNDb25maWcsXG59O1xuLy8gSW4gbmV3ZXIgdmVyc2lvbnMgb2YgUk4gdGhlIGBnZW5lcmljRGlyZWN0RXZlbnRUeXBlc2AgaXMgbG9jYXRlZCBpbiB0aGUgb2JqZWN0XG4vLyByZXR1cm5lZCBieSBVSU1hbmFnZXIuZ2V0Vmlld01hbmFnZXJDb25maWcoJ2dldENvbnN0YW50cycpIG9yIGluIG9sZGVyIFJOIFVJTWFuYWdlci5nZXRDb25zdGFudHMoKSwgd2UgbmVlZCB0byBhZGQgaXQgdGhlcmUgYXMgd2VsbCB0byBtYWtlXG4vLyBpdCBjb21wYXRpYmxlIHdpdGggUk4gNjErXG5jb25zdCBVSU1hbmFnZXJDb25zdGFudHMgPVxuICBVSU1hbmFnZXJBbnkuZ2V0Vmlld01hbmFnZXJDb25maWc/LignZ2V0Q29uc3RhbnRzJykgPz9cbiAgVUlNYW5hZ2VyQW55LmdldENvbnN0YW50cz8uKCk7XG5cbmlmIChVSU1hbmFnZXJDb25zdGFudHMpIHtcbiAgVUlNYW5hZ2VyQ29uc3RhbnRzLmdlbmVyaWNEaXJlY3RFdmVudFR5cGVzID0ge1xuICAgIC4uLlVJTWFuYWdlckNvbnN0YW50cy5nZW5lcmljRGlyZWN0RXZlbnRUeXBlcyxcbiAgICAuLi5jdXN0b21HSEV2ZW50c0NvbmZpZyxcbiAgfTtcbn1cblxuLy8gV3JhcCBKUyByZXNwb25kZXIgY2FsbHMgYW5kIG5vdGlmeSBnZXN0dXJlIGhhbmRsZXIgbWFuYWdlclxuY29uc3Qge1xuICBzZXRKU1Jlc3BvbmRlcjogb2xkU2V0SlNSZXNwb25kZXIgPSAoKSA9PiB7XG4gICAgLy9ubyBvcGVyYXRpb25cbiAgfSxcbiAgY2xlYXJKU1Jlc3BvbmRlcjogb2xkQ2xlYXJKU1Jlc3BvbmRlciA9ICgpID0+IHtcbiAgICAvL25vIG9wZXJhdGlvblxuICB9LFxufSA9IFVJTWFuYWdlckFueTtcblVJTWFuYWdlckFueS5zZXRKU1Jlc3BvbmRlciA9ICh0YWc6IG51bWJlciwgYmxvY2tOYXRpdmVSZXNwb25kZXI6IGJvb2xlYW4pID0+IHtcbiAgUk5HZXN0dXJlSGFuZGxlck1vZHVsZS5oYW5kbGVTZXRKU1Jlc3BvbmRlcih0YWcsIGJsb2NrTmF0aXZlUmVzcG9uZGVyKTtcbiAgb2xkU2V0SlNSZXNwb25kZXIodGFnLCBibG9ja05hdGl2ZVJlc3BvbmRlcik7XG59O1xuVUlNYW5hZ2VyQW55LmNsZWFySlNSZXNwb25kZXIgPSAoKSA9PiB7XG4gIFJOR2VzdHVyZUhhbmRsZXJNb2R1bGUuaGFuZGxlQ2xlYXJKU1Jlc3BvbmRlcigpO1xuICBvbGRDbGVhckpTUmVzcG9uZGVyKCk7XG59O1xuXG5sZXQgYWxsb3dUb3VjaGVzID0gdHJ1ZTtcbmNvbnN0IERFVl9PTl9BTkRST0lEID0gX19ERVZfXyAmJiBQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnO1xuLy8gVG9nZ2xlZCBpbnNwZWN0b3IgYmxvY2tzIHRvdWNoIGV2ZW50cyBpbiBvcmRlciB0byBhbGxvdyBpbnNwZWN0aW5nIG9uIEFuZHJvaWRcbi8vIFRoaXMgbmVlZHMgdG8gYmUgYSBnbG9iYWwgdmFyaWFibGUgaW4gb3JkZXIgdG8gc2V0IGluaXRpYWwgc3RhdGUgZm9yIGBhbGxvd1RvdWNoZXNgIHByb3BlcnR5IGluIEhhbmRsZXIgY29tcG9uZW50XG5pZiAoREVWX09OX0FORFJPSUQpIHtcbiAgRGV2aWNlRXZlbnRFbWl0dGVyLmFkZExpc3RlbmVyKCd0b2dnbGVFbGVtZW50SW5zcGVjdG9yJywgKCkgPT4ge1xuICAgIGFsbG93VG91Y2hlcyA9ICFhbGxvd1RvdWNoZXM7XG4gIH0pO1xufVxuXG50eXBlIEhhbmRsZXJQcm9wczxUIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4+ID0gUmVhZG9ubHk8XG4gIFJlYWN0LlByb3BzV2l0aENoaWxkcmVuPEJhc2VHZXN0dXJlSGFuZGxlclByb3BzPFQ+PlxuPjtcbmZ1bmN0aW9uIGhhc1VucmVzb2x2ZWRSZWZzPFQgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4oXG4gIHByb3BzOiBIYW5kbGVyUHJvcHM8VD5cbikge1xuICAvLyBUT0RPKFRTKSAtIGFkZCB0eXBlIGZvciBleHRyYWN0IGFyZ1xuICBjb25zdCBleHRyYWN0ID0gKHJlZnM6IGFueSB8IGFueVtdKSA9PiB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHJlZnMpKSB7XG4gICAgICByZXR1cm4gcmVmcyAmJiByZWZzLmN1cnJlbnQgPT09IG51bGw7XG4gICAgfVxuICAgIHJldHVybiByZWZzLnNvbWUoKHIpID0+IHIgJiYgci5jdXJyZW50ID09PSBudWxsKTtcbiAgfTtcbiAgcmV0dXJuIGV4dHJhY3QocHJvcHNbJ3NpbXVsdGFuZW91c0hhbmRsZXJzJ10pIHx8IGV4dHJhY3QocHJvcHNbJ3dhaXRGb3InXSk7XG59XG5cbmNvbnN0IHN0YXRlVG9Qcm9wTWFwcGluZ3MgPSB7XG4gIFtTdGF0ZS5VTkRFVEVSTUlORURdOiB1bmRlZmluZWQsXG4gIFtTdGF0ZS5CRUdBTl06ICdvbkJlZ2FuJyxcbiAgW1N0YXRlLkZBSUxFRF06ICdvbkZhaWxlZCcsXG4gIFtTdGF0ZS5DQU5DRUxMRURdOiAnb25DYW5jZWxsZWQnLFxuICBbU3RhdGUuQUNUSVZFXTogJ29uQWN0aXZhdGVkJyxcbiAgW1N0YXRlLkVORF06ICdvbkVuZGVkJyxcbn0gYXMgY29uc3Q7XG5cbnR5cGUgQ3JlYXRlSGFuZGxlckFyZ3M8SGFuZGxlclByb3BzVCBleHRlbmRzIFJlY29yZDxzdHJpbmcsIHVua25vd24+PiA9XG4gIFJlYWRvbmx5PHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgYWxsb3dlZFByb3BzOiBSZWFkb25seTxFeHRyYWN0PGtleW9mIEhhbmRsZXJQcm9wc1QsIHN0cmluZz5bXT47XG4gICAgY29uZmlnOiBSZWFkb25seTxSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj47XG4gICAgdHJhbnNmb3JtUHJvcHM/OiAocHJvcHM6IEhhbmRsZXJQcm9wc1QpID0+IEhhbmRsZXJQcm9wc1Q7XG4gICAgY3VzdG9tTmF0aXZlUHJvcHM/OiBSZWFkb25seTxzdHJpbmdbXT47XG4gIH0+O1xuXG4vLyBUT0RPKFRTKSBmaXggZXZlbnQgdHlwZXNcbnR5cGUgSW50ZXJuYWxFdmVudEhhbmRsZXJzID0ge1xuICBvbkdlc3R1cmVIYW5kbGVyRXZlbnQ/OiAoZXZlbnQ6IGFueSkgPT4gdm9pZDtcbiAgb25HZXN0dXJlSGFuZGxlclN0YXRlQ2hhbmdlPzogKGV2ZW50OiBhbnkpID0+IHZvaWQ7XG59O1xuXG5jb25zdCBVTlJFU09MVkVEX1JFRlNfUkVUUllfTElNSVQgPSAxO1xuXG4vLyBUT0RPKFRTKSAtIG1ha2Ugc3VyZSB0aGF0IEJhc2VHZXN0dXJlSGFuZGxlclByb3BzIGRvZXNuJ3QgbmVlZCBvdGhlciBnZW5lcmljIHBhcmFtZXRlciB0byB3b3JrIHdpdGggY3VzdG9tIHByb3BlcnRpZXMuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVIYW5kbGVyPFxuICBUIGV4dGVuZHMgQmFzZUdlc3R1cmVIYW5kbGVyUHJvcHM8VT4sXG4gIFUgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPlxuPih7XG4gIG5hbWUsXG4gIGFsbG93ZWRQcm9wcyA9IFtdLFxuICBjb25maWcgPSB7fSxcbiAgdHJhbnNmb3JtUHJvcHMsXG4gIGN1c3RvbU5hdGl2ZVByb3BzID0gW10sXG59OiBDcmVhdGVIYW5kbGVyQXJnczxUPik6IFJlYWN0LkNvbXBvbmVudFR5cGU8VCAmIFJlYWN0LlJlZkF0dHJpYnV0ZXM8YW55Pj4ge1xuICBpbnRlcmZhY2UgSGFuZGxlclN0YXRlIHtcbiAgICBhbGxvd1RvdWNoZXM6IGJvb2xlYW47XG4gIH1cbiAgY2xhc3MgSGFuZGxlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxcbiAgICBUICYgSW50ZXJuYWxFdmVudEhhbmRsZXJzLFxuICAgIEhhbmRsZXJTdGF0ZVxuICA+IHtcbiAgICBzdGF0aWMgZGlzcGxheU5hbWUgPSBuYW1lO1xuICAgIHN0YXRpYyBjb250ZXh0VHlwZSA9IEdlc3R1cmVIYW5kbGVyUm9vdFZpZXdDb250ZXh0O1xuXG4gICAgcHJpdmF0ZSBoYW5kbGVyVGFnOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBjb25maWc6IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuICAgIHByaXZhdGUgcHJvcHNSZWY6IFJlYWN0Lk11dGFibGVSZWZPYmplY3Q8dW5rbm93bj47XG4gICAgcHJpdmF0ZSBpc01vdW50ZWRSZWY6IFJlYWN0Lk11dGFibGVSZWZPYmplY3Q8Ym9vbGVhbiB8IG51bGw+O1xuICAgIHByaXZhdGUgdmlld05vZGU6IGFueTtcbiAgICBwcml2YXRlIHZpZXdUYWc/OiBudW1iZXI7XG4gICAgcHJpdmF0ZSBpbnNwZWN0b3JUb2dnbGVMaXN0ZW5lcj86IEVtaXR0ZXJTdWJzY3JpcHRpb247XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogVCAmIEludGVybmFsRXZlbnRIYW5kbGVycykge1xuICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgdGhpcy5oYW5kbGVyVGFnID0gZ2V0TmV4dEhhbmRsZXJUYWcoKTtcbiAgICAgIHRoaXMuY29uZmlnID0ge307XG4gICAgICB0aGlzLnByb3BzUmVmID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gICAgICB0aGlzLmlzTW91bnRlZFJlZiA9IFJlYWN0LmNyZWF0ZVJlZigpO1xuICAgICAgdGhpcy5zdGF0ZSA9IHsgYWxsb3dUb3VjaGVzIH07XG4gICAgICBpZiAocHJvcHMuaWQpIHtcbiAgICAgICAgaWYgKGhhbmRsZXJJRFRvVGFnW3Byb3BzLmlkXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBIYW5kbGVyIHdpdGggSUQgXCIke3Byb3BzLmlkfVwiIGFscmVhZHkgcmVnaXN0ZXJlZGApO1xuICAgICAgICB9XG4gICAgICAgIGhhbmRsZXJJRFRvVGFnW3Byb3BzLmlkXSA9IHRoaXMuaGFuZGxlclRhZztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGNvbnN0IHByb3BzOiBIYW5kbGVyUHJvcHM8VT4gPSB0aGlzLnByb3BzO1xuICAgICAgdGhpcy5pc01vdW50ZWRSZWYuY3VycmVudCA9IHRydWU7XG5cbiAgICAgIGlmIChERVZfT05fQU5EUk9JRCkge1xuICAgICAgICB0aGlzLmluc3BlY3RvclRvZ2dsZUxpc3RlbmVyID0gRGV2aWNlRXZlbnRFbWl0dGVyLmFkZExpc3RlbmVyKFxuICAgICAgICAgICd0b2dnbGVFbGVtZW50SW5zcGVjdG9yJyxcbiAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKChfKSA9PiAoeyBhbGxvd1RvdWNoZXMgfSkpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGUoVU5SRVNPTFZFRF9SRUZTX1JFVFJZX0xJTUlUKTtcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoaGFzVW5yZXNvbHZlZFJlZnMocHJvcHMpKSB7XG4gICAgICAgIC8vIElmIHRoZXJlIGFyZSB1bnJlc29sdmVkIHJlZnMgKGUuZy4gXCIuY3VycmVudFwiIGhhcyBub3QgeWV0IGJlZW4gc2V0KVxuICAgICAgICAvLyBwYXNzZWQgYXMgYHNpbXVsdGFuZW91c0hhbmRsZXJzYCBvciBgd2FpdEZvcmAsIHdlIGVucXVldWUgYSBjYWxsIHRvXG4gICAgICAgIC8vIF91cGRhdGUgbWV0aG9kIHRoYXQgd2lsbCB0cnkgdG8gdXBkYXRlIG5hdGl2ZSBoYW5kbGVyIHByb3BzIHVzaW5nXG4gICAgICAgIC8vIHF1ZXVlTWljcm90YXNrLiBUaGlzIG1ha2VzIGl0IHNvIHVwZGF0ZSgpIGZ1bmN0aW9uIGdldHMgY2FsbGVkIGFmdGVyIGFsbFxuICAgICAgICAvLyByZWFjdCBjb21wb25lbnRzIGFyZSBtb3VudGVkIGFuZCB3ZSBleHBlY3QgdGhlIG1pc3NpbmcgcmVmIG9iamVjdCB0b1xuICAgICAgICAvLyBiZSByZXNvbHZlZCBieSB0aGVuLlxuICAgICAgICBnaFF1ZXVlTWljcm90YXNrKCgpID0+IHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZShVTlJFU09MVkVEX1JFRlNfUkVUUllfTElNSVQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jcmVhdGVHZXN0dXJlSGFuZGxlcihcbiAgICAgICAgZmlsdGVyQ29uZmlnKFxuICAgICAgICAgIHRyYW5zZm9ybVByb3BzID8gdHJhbnNmb3JtUHJvcHModGhpcy5wcm9wcykgOiB0aGlzLnByb3BzLFxuICAgICAgICAgIFsuLi5hbGxvd2VkUHJvcHMsIC4uLmN1c3RvbU5hdGl2ZVByb3BzXSxcbiAgICAgICAgICBjb25maWdcbiAgICAgICAgKVxuICAgICAgKTtcblxuICAgICAgdGhpcy5hdHRhY2hHZXN0dXJlSGFuZGxlcihmaW5kTm9kZUhhbmRsZSh0aGlzLnZpZXdOb2RlKSBhcyBudW1iZXIpOyAvLyBUT0RPKFRTKSAtIGNoZWNrIGlmIHRoaXMgY2FuIGJlIG51bGxcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICBjb25zdCB2aWV3VGFnID0gZmluZE5vZGVIYW5kbGUodGhpcy52aWV3Tm9kZSk7XG4gICAgICBpZiAodGhpcy52aWV3VGFnICE9PSB2aWV3VGFnKSB7XG4gICAgICAgIHRoaXMuYXR0YWNoR2VzdHVyZUhhbmRsZXIodmlld1RhZyBhcyBudW1iZXIpOyAvLyBUT0RPKFRTKSAtIGNoZWNrIGludGVyYWN0aW9uIGJldHdlZW4gX3ZpZXdUYWcgJiBmaW5kTm9kZUhhbmRsZVxuICAgICAgfVxuICAgICAgdGhpcy51cGRhdGUoVU5SRVNPTFZFRF9SRUZTX1JFVFJZX0xJTUlUKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMuaW5zcGVjdG9yVG9nZ2xlTGlzdGVuZXI/LnJlbW92ZSgpO1xuICAgICAgdGhpcy5pc01vdW50ZWRSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgICAgUk5HZXN0dXJlSGFuZGxlck1vZHVsZS5kcm9wR2VzdHVyZUhhbmRsZXIodGhpcy5oYW5kbGVyVGFnKTtcbiAgICAgIHNjaGVkdWxlRmx1c2hPcGVyYXRpb25zKCk7XG4gICAgICAvLyBXZSBjYW4ndCB1c2UgdGhpcy5wcm9wcy5pZCBkaXJlY3RseSBkdWUgdG8gVFMgZ2VuZXJpYyB0eXBlIG5hcnJvd2luZyBidWcsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzEzOTk1IGZvciBtb3JlIGNvbnRleHRcbiAgICAgIGNvbnN0IGhhbmRsZXJJRDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5wcm9wcy5pZDtcbiAgICAgIGlmIChoYW5kbGVySUQpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1keW5hbWljLWRlbGV0ZVxuICAgICAgICBkZWxldGUgaGFuZGxlcklEVG9UYWdbaGFuZGxlcklEXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIG9uR2VzdHVyZUhhbmRsZXJFdmVudCA9IChldmVudDogR2VzdHVyZUV2ZW50PFU+KSA9PiB7XG4gICAgICBpZiAoZXZlbnQubmF0aXZlRXZlbnQuaGFuZGxlclRhZyA9PT0gdGhpcy5oYW5kbGVyVGFnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wcy5vbkdlc3R1cmVFdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHRoaXMucHJvcHMub25HZXN0dXJlRXZlbnQ/LihldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucHJvcHMub25HZXN0dXJlSGFuZGxlckV2ZW50Py4oZXZlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBUT0RPKFRTKSAtIG1ha2Ugc3VyZSB0aGlzIGlzIHJpZ2h0IHR5cGUgZm9yIGV2ZW50XG4gICAgcHJpdmF0ZSBvbkdlc3R1cmVIYW5kbGVyU3RhdGVDaGFuZ2UgPSAoXG4gICAgICBldmVudDogSGFuZGxlclN0YXRlQ2hhbmdlRXZlbnQ8VT5cbiAgICApID0+IHtcbiAgICAgIGlmIChldmVudC5uYXRpdmVFdmVudC5oYW5kbGVyVGFnID09PSB0aGlzLmhhbmRsZXJUYWcpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnByb3BzLm9uSGFuZGxlclN0YXRlQ2hhbmdlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhpcy5wcm9wcy5vbkhhbmRsZXJTdGF0ZUNoYW5nZT8uKGV2ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHN0YXRlOiBWYWx1ZU9mPHR5cGVvZiBTdGF0ZT4gPSBldmVudC5uYXRpdmVFdmVudC5zdGF0ZTtcbiAgICAgICAgY29uc3Qgc3RhdGVFdmVudE5hbWUgPSBzdGF0ZVRvUHJvcE1hcHBpbmdzW3N0YXRlXTtcbiAgICAgICAgY29uc3QgZXZlbnRIYW5kbGVyID0gc3RhdGVFdmVudE5hbWUgJiYgdGhpcy5wcm9wc1tzdGF0ZUV2ZW50TmFtZV07XG4gICAgICAgIGlmIChldmVudEhhbmRsZXIgJiYgdHlwZW9mIGV2ZW50SGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGV2ZW50SGFuZGxlcihldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucHJvcHMub25HZXN0dXJlSGFuZGxlclN0YXRlQ2hhbmdlPy4oZXZlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBwcml2YXRlIHJlZkhhbmRsZXIgPSAobm9kZTogYW55KSA9PiB7XG4gICAgICB0aGlzLnZpZXdOb2RlID0gbm9kZTtcblxuICAgICAgY29uc3QgY2hpbGQgPSBSZWFjdC5DaGlsZHJlbi5vbmx5KHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgICAgLy8gVE9ETyhUUykgZml4IHJlZiB0eXBlXG4gICAgICBjb25zdCB7IHJlZiB9OiBhbnkgPSBjaGlsZDtcbiAgICAgIGlmIChyZWYgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZWYobm9kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVmLmN1cnJlbnQgPSBub2RlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHByaXZhdGUgY3JlYXRlR2VzdHVyZUhhbmRsZXIgPSAoXG4gICAgICBuZXdDb25maWc6IFJlYWRvbmx5PFJlY29yZDxzdHJpbmcsIHVua25vd24+PlxuICAgICkgPT4ge1xuICAgICAgdGhpcy5jb25maWcgPSBuZXdDb25maWc7XG5cbiAgICAgIFJOR2VzdHVyZUhhbmRsZXJNb2R1bGUuY3JlYXRlR2VzdHVyZUhhbmRsZXIoXG4gICAgICAgIG5hbWUsXG4gICAgICAgIHRoaXMuaGFuZGxlclRhZyxcbiAgICAgICAgbmV3Q29uZmlnXG4gICAgICApO1xuICAgIH07XG5cbiAgICBwcml2YXRlIGF0dGFjaEdlc3R1cmVIYW5kbGVyID0gKG5ld1ZpZXdUYWc6IG51bWJlcikgPT4ge1xuICAgICAgdGhpcy52aWV3VGFnID0gbmV3Vmlld1RhZztcblxuICAgICAgaWYgKFBsYXRmb3JtLk9TID09PSAnd2ViJykge1xuICAgICAgICAvLyB0eXBlY2FzdCBkdWUgdG8gZHluYW1pYyByZXNvbHV0aW9uLCBhdHRhY2hHZXN0dXJlSGFuZGxlciBzaG91bGQgaGF2ZSB3ZWIgdmVyc2lvbiBzaWduYXR1cmUgaW4gdGhpcyBicmFuY2hcbiAgICAgICAgKFxuICAgICAgICAgIFJOR2VzdHVyZUhhbmRsZXJNb2R1bGUuYXR0YWNoR2VzdHVyZUhhbmRsZXIgYXMgdHlwZW9mIFJOR2VzdHVyZUhhbmRsZXJNb2R1bGVXZWIuYXR0YWNoR2VzdHVyZUhhbmRsZXJcbiAgICAgICAgKShcbiAgICAgICAgICB0aGlzLmhhbmRsZXJUYWcsXG4gICAgICAgICAgbmV3Vmlld1RhZyxcbiAgICAgICAgICBBY3Rpb25UeXBlLkpTX0ZVTkNUSU9OX09MRF9BUEksIC8vIGlnbm9yZWQgb24gd2ViXG4gICAgICAgICAgdGhpcy5wcm9wc1JlZlxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVnaXN0ZXJPbGRHZXN0dXJlSGFuZGxlcih0aGlzLmhhbmRsZXJUYWcsIHtcbiAgICAgICAgICBvbkdlc3R1cmVFdmVudDogdGhpcy5vbkdlc3R1cmVIYW5kbGVyRXZlbnQsXG4gICAgICAgICAgb25HZXN0dXJlU3RhdGVDaGFuZ2U6IHRoaXMub25HZXN0dXJlSGFuZGxlclN0YXRlQ2hhbmdlLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBhY3Rpb25UeXBlID0gKCgpID0+IHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAodGhpcy5wcm9wcz8ub25HZXN0dXJlRXZlbnQgJiZcbiAgICAgICAgICAgICAgJ2N1cnJlbnQnIGluIHRoaXMucHJvcHMub25HZXN0dXJlRXZlbnQpIHx8XG4gICAgICAgICAgICAodGhpcy5wcm9wcz8ub25IYW5kbGVyU3RhdGVDaGFuZ2UgJiZcbiAgICAgICAgICAgICAgJ2N1cnJlbnQnIGluIHRoaXMucHJvcHMub25IYW5kbGVyU3RhdGVDaGFuZ2UpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICAvLyBSZWFuaW1hdGVkIHdvcmtsZXRcbiAgICAgICAgICAgIHJldHVybiBBY3Rpb25UeXBlLlJFQU5JTUFURURfV09SS0xFVDtcbiAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgdGhpcy5wcm9wcz8ub25HZXN0dXJlRXZlbnQgJiZcbiAgICAgICAgICAgICdfX2lzTmF0aXZlJyBpbiB0aGlzLnByb3BzLm9uR2VzdHVyZUV2ZW50XG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICAvLyBBbmltYXRlZC5ldmVudCB3aXRoIHVzZU5hdGl2ZURyaXZlcjogdHJ1ZVxuICAgICAgICAgICAgcmV0dXJuIEFjdGlvblR5cGUuTkFUSVZFX0FOSU1BVEVEX0VWRU5UO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBKUyBjYWxsYmFjayBvciBBbmltYXRlZC5ldmVudCB3aXRoIHVzZU5hdGl2ZURyaXZlcjogZmFsc2VcbiAgICAgICAgICAgIHJldHVybiBBY3Rpb25UeXBlLkpTX0ZVTkNUSU9OX09MRF9BUEk7XG4gICAgICAgICAgfVxuICAgICAgICB9KSgpO1xuXG4gICAgICAgIFJOR2VzdHVyZUhhbmRsZXJNb2R1bGUuYXR0YWNoR2VzdHVyZUhhbmRsZXIoXG4gICAgICAgICAgdGhpcy5oYW5kbGVyVGFnLFxuICAgICAgICAgIG5ld1ZpZXdUYWcsXG4gICAgICAgICAgYWN0aW9uVHlwZVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBzY2hlZHVsZUZsdXNoT3BlcmF0aW9ucygpO1xuICAgIH07XG5cbiAgICBwcml2YXRlIHVwZGF0ZUdlc3R1cmVIYW5kbGVyID0gKFxuICAgICAgbmV3Q29uZmlnOiBSZWFkb25seTxSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj5cbiAgICApID0+IHtcbiAgICAgIHRoaXMuY29uZmlnID0gbmV3Q29uZmlnO1xuXG4gICAgICBSTkdlc3R1cmVIYW5kbGVyTW9kdWxlLnVwZGF0ZUdlc3R1cmVIYW5kbGVyKHRoaXMuaGFuZGxlclRhZywgbmV3Q29uZmlnKTtcbiAgICAgIHNjaGVkdWxlRmx1c2hPcGVyYXRpb25zKCk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgdXBkYXRlKHJlbWFpbmluZ1RyaWVzOiBudW1iZXIpIHtcbiAgICAgIGlmICghdGhpcy5pc01vdW50ZWRSZWYuY3VycmVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHByb3BzOiBIYW5kbGVyUHJvcHM8VT4gPSB0aGlzLnByb3BzO1xuXG4gICAgICAvLyBXaGVuIHJlZiBpcyBzZXQgdmlhIGEgZnVuY3Rpb24gaS5lLiBgcmVmPXsocikgPT4gcmVmT2JqZWN0LmN1cnJlbnQgPSByfWAgaW5zdGVhZCBvZlxuICAgICAgLy8gYHJlZj17cmVmT2JqZWN0fWAgaXQncyBwb3NzaWJsZSB0aGF0IGl0IHdvbid0IGJlIHJlc29sdmVkIGluIHRpbWUuIFNlZW1zIGxpa2UgdHJ5aW5nXG4gICAgICAvLyBhZ2FpbiBpcyBlYXN5IGVub3VnaCBmaXguXG4gICAgICBpZiAoaGFzVW5yZXNvbHZlZFJlZnMocHJvcHMpICYmIHJlbWFpbmluZ1RyaWVzID4gMCkge1xuICAgICAgICBnaFF1ZXVlTWljcm90YXNrKCgpID0+IHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZShyZW1haW5pbmdUcmllcyAtIDEpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG5ld0NvbmZpZyA9IGZpbHRlckNvbmZpZyhcbiAgICAgICAgICB0cmFuc2Zvcm1Qcm9wcyA/IHRyYW5zZm9ybVByb3BzKHRoaXMucHJvcHMpIDogdGhpcy5wcm9wcyxcbiAgICAgICAgICBbLi4uYWxsb3dlZFByb3BzLCAuLi5jdXN0b21OYXRpdmVQcm9wc10sXG4gICAgICAgICAgY29uZmlnXG4gICAgICAgICk7XG4gICAgICAgIGlmICghZGVlcEVxdWFsKHRoaXMuY29uZmlnLCBuZXdDb25maWcpKSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVHZXN0dXJlSGFuZGxlcihuZXdDb25maWcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2V0TmF0aXZlUHJvcHModXBkYXRlczogYW55KSB7XG4gICAgICBjb25zdCBtZXJnZWRQcm9wcyA9IHsgLi4udGhpcy5wcm9wcywgLi4udXBkYXRlcyB9O1xuICAgICAgY29uc3QgbmV3Q29uZmlnID0gZmlsdGVyQ29uZmlnKFxuICAgICAgICB0cmFuc2Zvcm1Qcm9wcyA/IHRyYW5zZm9ybVByb3BzKG1lcmdlZFByb3BzKSA6IG1lcmdlZFByb3BzLFxuICAgICAgICBbLi4uYWxsb3dlZFByb3BzLCAuLi5jdXN0b21OYXRpdmVQcm9wc10sXG4gICAgICAgIGNvbmZpZ1xuICAgICAgKTtcbiAgICAgIHRoaXMudXBkYXRlR2VzdHVyZUhhbmRsZXIobmV3Q29uZmlnKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICBpZiAoX19ERVZfXyAmJiAhdGhpcy5jb250ZXh0ICYmICFpc0plc3RFbnYoKSAmJiBQbGF0Zm9ybS5PUyAhPT0gJ3dlYicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIG5hbWUgK1xuICAgICAgICAgICAgJyBtdXN0IGJlIHVzZWQgYXMgYSBkZXNjZW5kYW50IG9mIEdlc3R1cmVIYW5kbGVyUm9vdFZpZXcuIE90aGVyd2lzZSB0aGUgZ2VzdHVyZXMgd2lsbCBub3QgYmUgcmVjb2duaXplZC4gU2VlIGh0dHBzOi8vZG9jcy5zd21hbnNpb24uY29tL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvZG9jcy9pbnN0YWxsYXRpb24gZm9yIG1vcmUgZGV0YWlscy4nXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGxldCBnZXN0dXJlRXZlbnRIYW5kbGVyID0gdGhpcy5vbkdlc3R1cmVIYW5kbGVyRXZlbnQ7XG4gICAgICAvLyBBbm90aGVyIGluc3RhbmNlIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMTM5OTVcbiAgICAgIHR5cGUgT25HZXN0dXJlRXZlbnRIYW5kbGVycyA9IHtcbiAgICAgICAgb25HZXN0dXJlRXZlbnQ/OiBCYXNlR2VzdHVyZUhhbmRsZXJQcm9wczxVPlsnb25HZXN0dXJlRXZlbnQnXTtcbiAgICAgICAgb25HZXN0dXJlSGFuZGxlckV2ZW50PzogSW50ZXJuYWxFdmVudEhhbmRsZXJzWydvbkdlc3R1cmVIYW5kbGVyRXZlbnQnXTtcbiAgICAgIH07XG4gICAgICBjb25zdCB7IG9uR2VzdHVyZUV2ZW50LCBvbkdlc3R1cmVIYW5kbGVyRXZlbnQgfTogT25HZXN0dXJlRXZlbnRIYW5kbGVycyA9XG4gICAgICAgIHRoaXMucHJvcHM7XG4gICAgICBpZiAob25HZXN0dXJlRXZlbnQgJiYgdHlwZW9mIG9uR2VzdHVyZUV2ZW50ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIElmIGl0J3Mgbm90IGEgbWV0aG9kIGl0IHNob3VsZCBiZSBhbiBuYXRpdmUgQW5pbWF0ZWQuZXZlbnRcbiAgICAgICAgLy8gb2JqZWN0LiBXZSBzZXQgaXQgZGlyZWN0bHkgYXMgdGhlIGhhbmRsZXIgZm9yIHRoZSB2aWV3XG4gICAgICAgIC8vIEluIHRoaXMgY2FzZSBuZXN0ZWQgaGFuZGxlcnMgYXJlIG5vdCBnb2luZyB0byBiZSBzdXBwb3J0ZWRcbiAgICAgICAgaWYgKG9uR2VzdHVyZUhhbmRsZXJFdmVudCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICdOZXN0aW5nIHRvdWNoIGhhbmRsZXJzIHdpdGggbmF0aXZlIGFuaW1hdGVkIGRyaXZlciBpcyBub3Qgc3VwcG9ydGVkIHlldCdcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGdlc3R1cmVFdmVudEhhbmRsZXIgPSBvbkdlc3R1cmVFdmVudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBvbkdlc3R1cmVIYW5kbGVyRXZlbnQgJiZcbiAgICAgICAgICB0eXBlb2Ygb25HZXN0dXJlSGFuZGxlckV2ZW50ICE9PSAnZnVuY3Rpb24nXG4gICAgICAgICkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICdOZXN0aW5nIHRvdWNoIGhhbmRsZXJzIHdpdGggbmF0aXZlIGFuaW1hdGVkIGRyaXZlciBpcyBub3Qgc3VwcG9ydGVkIHlldCdcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxldCBnZXN0dXJlU3RhdGVFdmVudEhhbmRsZXIgPSB0aGlzLm9uR2VzdHVyZUhhbmRsZXJTdGF0ZUNoYW5nZTtcbiAgICAgIC8vIEFub3RoZXIgaW5zdGFuY2Ugb2YgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8xMzk5NVxuICAgICAgdHlwZSBPbkdlc3R1cmVTdGF0ZUNoYW5nZUhhbmRsZXJzID0ge1xuICAgICAgICBvbkhhbmRsZXJTdGF0ZUNoYW5nZT86IEJhc2VHZXN0dXJlSGFuZGxlclByb3BzPFU+WydvbkhhbmRsZXJTdGF0ZUNoYW5nZSddO1xuICAgICAgICBvbkdlc3R1cmVIYW5kbGVyU3RhdGVDaGFuZ2U/OiBJbnRlcm5hbEV2ZW50SGFuZGxlcnNbJ29uR2VzdHVyZUhhbmRsZXJTdGF0ZUNoYW5nZSddO1xuICAgICAgfTtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgb25IYW5kbGVyU3RhdGVDaGFuZ2UsXG4gICAgICAgIG9uR2VzdHVyZUhhbmRsZXJTdGF0ZUNoYW5nZSxcbiAgICAgIH06IE9uR2VzdHVyZVN0YXRlQ2hhbmdlSGFuZGxlcnMgPSB0aGlzLnByb3BzO1xuICAgICAgaWYgKG9uSGFuZGxlclN0YXRlQ2hhbmdlICYmIHR5cGVvZiBvbkhhbmRsZXJTdGF0ZUNoYW5nZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBJZiBpdCdzIG5vdCBhIG1ldGhvZCBpdCBzaG91bGQgYmUgYW4gbmF0aXZlIEFuaW1hdGVkLmV2ZW50XG4gICAgICAgIC8vIG9iamVjdC4gV2Ugc2V0IGl0IGRpcmVjdGx5IGFzIHRoZSBoYW5kbGVyIGZvciB0aGUgdmlld1xuICAgICAgICAvLyBJbiB0aGlzIGNhc2UgbmVzdGVkIGhhbmRsZXJzIGFyZSBub3QgZ29pbmcgdG8gYmUgc3VwcG9ydGVkXG4gICAgICAgIGlmIChvbkdlc3R1cmVIYW5kbGVyU3RhdGVDaGFuZ2UpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAnTmVzdGluZyB0b3VjaCBoYW5kbGVycyB3aXRoIG5hdGl2ZSBhbmltYXRlZCBkcml2ZXIgaXMgbm90IHN1cHBvcnRlZCB5ZXQnXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBnZXN0dXJlU3RhdGVFdmVudEhhbmRsZXIgPSBvbkhhbmRsZXJTdGF0ZUNoYW5nZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBvbkdlc3R1cmVIYW5kbGVyU3RhdGVDaGFuZ2UgJiZcbiAgICAgICAgICB0eXBlb2Ygb25HZXN0dXJlSGFuZGxlclN0YXRlQ2hhbmdlICE9PSAnZnVuY3Rpb24nXG4gICAgICAgICkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICdOZXN0aW5nIHRvdWNoIGhhbmRsZXJzIHdpdGggbmF0aXZlIGFuaW1hdGVkIGRyaXZlciBpcyBub3Qgc3VwcG9ydGVkIHlldCdcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBldmVudHMgPSB7XG4gICAgICAgIG9uR2VzdHVyZUhhbmRsZXJFdmVudDogdGhpcy5zdGF0ZS5hbGxvd1RvdWNoZXNcbiAgICAgICAgICA/IGdlc3R1cmVFdmVudEhhbmRsZXJcbiAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgb25HZXN0dXJlSGFuZGxlclN0YXRlQ2hhbmdlOiB0aGlzLnN0YXRlLmFsbG93VG91Y2hlc1xuICAgICAgICAgID8gZ2VzdHVyZVN0YXRlRXZlbnRIYW5kbGVyXG4gICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICB9O1xuXG4gICAgICB0aGlzLnByb3BzUmVmLmN1cnJlbnQgPSBldmVudHM7XG5cbiAgICAgIGxldCBjaGlsZDogYW55ID0gbnVsbDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNoaWxkID0gUmVhY3QuQ2hpbGRyZW4ub25seSh0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIHRhZ01lc3NhZ2UoXG4gICAgICAgICAgICBgJHtuYW1lfSBnb3QgbW9yZSB0aGFuIG9uZSB2aWV3IGFzIGEgY2hpbGQuIElmIHlvdSB3YW50IHRoZSBnZXN0dXJlIHRvIHdvcmsgb24gbXVsdGlwbGUgdmlld3MsIHdyYXAgdGhlbSB3aXRoIGEgY29tbW9uIHBhcmVudCBhbmQgYXR0YWNoIHRoZSBnZXN0dXJlIHRvIHRoYXQgdmlldy5gXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBsZXQgZ3JhbmRDaGlsZHJlbiA9IGNoaWxkLnByb3BzLmNoaWxkcmVuO1xuICAgICAgaWYgKFxuICAgICAgICBfX0RFVl9fICYmXG4gICAgICAgIGNoaWxkLnR5cGUgJiZcbiAgICAgICAgKGNoaWxkLnR5cGUgPT09ICdSTkdlc3R1cmVIYW5kbGVyQnV0dG9uJyB8fFxuICAgICAgICAgIGNoaWxkLnR5cGUubmFtZSA9PT0gJ1ZpZXcnIHx8XG4gICAgICAgICAgY2hpbGQudHlwZS5kaXNwbGF5TmFtZSA9PT0gJ1ZpZXcnKVxuICAgICAgKSB7XG4gICAgICAgIGdyYW5kQ2hpbGRyZW4gPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGdyYW5kQ2hpbGRyZW4pO1xuICAgICAgICBncmFuZENoaWxkcmVuLnB1c2goXG4gICAgICAgICAgPFByZXNzYWJpbGl0eURlYnVnVmlld1xuICAgICAgICAgICAga2V5PVwicHJlc3NhYmlsaXR5RGVidWdWaWV3XCJcbiAgICAgICAgICAgIGNvbG9yPVwibWVkaXVtc3ByaW5nZ3JlZW5cIlxuICAgICAgICAgICAgaGl0U2xvcD17Y2hpbGQucHJvcHMuaGl0U2xvcH1cbiAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KFxuICAgICAgICBjaGlsZCxcbiAgICAgICAge1xuICAgICAgICAgIHJlZjogdGhpcy5yZWZIYW5kbGVyLFxuICAgICAgICAgIGNvbGxhcHNhYmxlOiBmYWxzZSxcbiAgICAgICAgICAuLi4oaXNKZXN0RW52KClcbiAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgIGhhbmRsZXJUeXBlOiBuYW1lLFxuICAgICAgICAgICAgICAgIGhhbmRsZXJUYWc6IHRoaXMuaGFuZGxlclRhZyxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB7fSksXG4gICAgICAgICAgdGVzdElEOiB0aGlzLnByb3BzLnRlc3RJRCA/PyBjaGlsZC5wcm9wcy50ZXN0SUQsXG4gICAgICAgICAgLi4uZXZlbnRzLFxuICAgICAgICB9LFxuICAgICAgICBncmFuZENoaWxkcmVuXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gSGFuZGxlcjtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUFBLEtBQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQU9BLElBQUFFLFFBQUEsR0FBQUMsc0JBQUEsQ0FBQUgsT0FBQTtBQUNBLElBQUFJLHVCQUFBLEdBQUFELHNCQUFBLENBQUFILE9BQUE7QUFFQSxJQUFBSyxNQUFBLEdBQUFMLE9BQUE7QUFDQSxJQUFBTSxpQkFBQSxHQUFBTixPQUFBO0FBTUEsSUFBQU8scUJBQUEsR0FBQVAsT0FBQTtBQVNBLElBQUFRLE1BQUEsR0FBQVIsT0FBQTtBQUNBLElBQUFTLFdBQUEsR0FBQVQsT0FBQTtBQUNBLElBQUFVLHNCQUFBLEdBQUFWLE9BQUE7QUFDQSxJQUFBVyw4QkFBQSxHQUFBUixzQkFBQSxDQUFBSCxPQUFBO0FBQ0EsSUFBQVksaUJBQUEsR0FBQVosT0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxJQUFNYSxZQUFZLEdBQUdaLFlBQUEsQ0FBQWEsU0FBckI7QUFFQSxJQUFNQyxpQ0FBaUMsR0FBRztFQUN4Q0Msd0JBQXdCLEVBQUU7SUFBRUMsZ0JBQWdCLEVBQUU7RUFBcEIsQ0FEYztFQUV4Q0MsOEJBQThCLEVB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