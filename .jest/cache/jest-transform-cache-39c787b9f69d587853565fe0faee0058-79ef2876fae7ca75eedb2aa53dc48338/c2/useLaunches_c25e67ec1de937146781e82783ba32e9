4e1e74b765630196160d3c2e73aab73c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useLaunches = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _api = require("../services/api");
var _sortLaunches = require("../utils/sortLaunches");
var useLaunches = exports.useLaunches = function useLaunches() {
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    pastLaunches = _useState2[0],
    setPastLaunches = _useState2[1];
  var _useState3 = (0, _react.useState)([]),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    upcomingLaunches = _useState4[0],
    setUpcomingLaunches = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    isLoading = _useState6[0],
    setIsLoading = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    isError = _useState8[0],
    setIsError = _useState8[1];
  var fetchPastLaunches = (0, _react.useCallback)(function () {
    setIsLoading(true);
    setIsError(false);
    (0, _api.fetchPastLaunchData)().then(function (launches) {
      if (launches) {
        setPastLaunches((0, _sortLaunches.sortLaunches)({
          launches: launches,
          reverse: true
        }).filter(function (_ref) {
          var upcoming = _ref.upcoming;
          return !upcoming;
        }));
      }
    }).catch(function (error) {
      setIsError(!!error);
    }).finally(function () {
      return setIsLoading(false);
    });
  }, [pastLaunches]);
  var fetchUpcomingLaunches = (0, _react.useCallback)(function () {
    setIsLoading(true);
    setIsError(false);
    (0, _api.fetchUpcomingLaunchData)().then(function (launches) {
      if (launches) {
        setUpcomingLaunches((0, _sortLaunches.sortLaunches)({
          launches: launches
        }));
      }
    }).catch(function (error) {
      setIsError(!!error);
    }).finally(function () {
      return setIsLoading(false);
    });
  }, [pastLaunches]);
  var fetchData = function fetchData() {
    fetchPastLaunches();
    fetchUpcomingLaunches();
  };
  (0, _react.useEffect)(function () {
    fetchData();
  }, []);
  return {
    isLoading: isLoading,
    isError: isError,
    sections: [{
      title: 'Upcoming ðŸš€ Launches',
      data: upcomingLaunches
    }, {
      title: 'Past ðŸš€ Launches',
      data: pastLaunches
    }],
    fetchData: fetchData
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX2FwaSIsIl9zb3J0TGF1bmNoZXMiLCJ1c2VMYXVuY2hlcyIsImV4cG9ydHMiLCJfdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsIl91c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheTIiLCJkZWZhdWx0IiwicGFzdExhdW5jaGVzIiwic2V0UGFzdExhdW5jaGVzIiwiX3VzZVN0YXRlMyIsIl91c2VTdGF0ZTQiLCJ1cGNvbWluZ0xhdW5jaGVzIiwic2V0VXBjb21pbmdMYXVuY2hlcyIsIl91c2VTdGF0ZTUiLCJfdXNlU3RhdGU2IiwiaXNMb2FkaW5nIiwic2V0SXNMb2FkaW5nIiwiX3VzZVN0YXRlNyIsIl91c2VTdGF0ZTgiLCJpc0Vycm9yIiwic2V0SXNFcnJvciIsImZldGNoUGFzdExhdW5jaGVzIiwidXNlQ2FsbGJhY2siLCJmZXRjaFBhc3RMYXVuY2hEYXRhIiwidGhlbiIsImxhdW5jaGVzIiwic29ydExhdW5jaGVzIiwicmV2ZXJzZSIsImZpbHRlciIsIl9yZWYiLCJ1cGNvbWluZyIsImNhdGNoIiwiZXJyb3IiLCJmaW5hbGx5IiwiZmV0Y2hVcGNvbWluZ0xhdW5jaGVzIiwiZmV0Y2hVcGNvbWluZ0xhdW5jaERhdGEiLCJmZXRjaERhdGEiLCJ1c2VFZmZlY3QiLCJzZWN0aW9ucyIsInRpdGxlIiwiZGF0YSJdLCJzb3VyY2VzIjpbInVzZUxhdW5jaGVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBmZXRjaFBhc3RMYXVuY2hEYXRhLCBmZXRjaFVwY29taW5nTGF1bmNoRGF0YSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9hcGlcIjtcbmltcG9ydCB7IExhdW5jaCB9IGZyb20gXCIuLi9zZXJ2aWNlcy90eXBlc1wiO1xuaW1wb3J0IHsgc29ydExhdW5jaGVzIH0gZnJvbSBcIi4uL3V0aWxzL3NvcnRMYXVuY2hlc1wiO1xuXG5leHBvcnQgY29uc3QgdXNlTGF1bmNoZXMgPSAoKSA9PiB7XG4gICAgY29uc3QgW3Bhc3RMYXVuY2hlcywgc2V0UGFzdExhdW5jaGVzXSA9IHVzZVN0YXRlPExhdW5jaFtdPihbXSlcbiAgICBjb25zdCBbdXBjb21pbmdMYXVuY2hlcywgc2V0VXBjb21pbmdMYXVuY2hlc10gPSB1c2VTdGF0ZTxMYXVuY2hbXT4oW10pXG5cbiAgICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpXG4gICAgY29uc3QgW2lzRXJyb3IsIHNldElzRXJyb3JdID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpXG5cbiAgICBjb25zdCBmZXRjaFBhc3RMYXVuY2hlcyA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgc2V0SXNMb2FkaW5nKHRydWUpO1xuICAgICAgICBzZXRJc0Vycm9yKGZhbHNlKTtcblxuICAgICAgICBmZXRjaFBhc3RMYXVuY2hEYXRhKClcbiAgICAgICAgICAgIC50aGVuKChsYXVuY2hlczogTGF1bmNoW10pID0+IHtcbiAgICAgICAgICAgICAgICAvLyBhbGwgbGF1bmNoZXMgZW5kcG9pbnQgaW5jbHVkZXMgdXBjb21pbmcgbGF1bmNoZXMuIGluIG9yZGVyIHRvIHNvcnQgYnkgZGF0ZSBkZXNjZW5kaW5nLCB3ZSBmaWx0ZXIgdGhlbSBvdXRcbiAgICAgICAgICAgICAgICBpZiAobGF1bmNoZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0UGFzdExhdW5jaGVzKHNvcnRMYXVuY2hlcyh7IGxhdW5jaGVzLCByZXZlcnNlOiB0cnVlIH0pLmZpbHRlcigoeyB1cGNvbWluZyB9KSA9PiAhdXBjb21pbmcpKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgIHNldElzRXJyb3IoISFlcnJvcik7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmZpbmFsbHkoKCkgPT4gc2V0SXNMb2FkaW5nKGZhbHNlKSlcblxuICAgIH0sIFtwYXN0TGF1bmNoZXNdKVxuXG4gICAgY29uc3QgZmV0Y2hVcGNvbWluZ0xhdW5jaGVzID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XG4gICAgICAgIHNldElzRXJyb3IoZmFsc2UpO1xuXG4gICAgICAgIGZldGNoVXBjb21pbmdMYXVuY2hEYXRhKClcbiAgICAgICAgICAgIC50aGVuKChsYXVuY2hlczogTGF1bmNoW10pID0+IHtcbiAgICAgICAgICAgICAgICAvLyB1cGNvbWluZyBsYXVuY2hlcyBhcmUgc29ydGVkIGFzY2VuZGluZyBieSBkYXRlLCBzbyB0aGUgbmVhcmVzdCBvbmUgaXMgb24gdG9wXG4gICAgICAgICAgICAgICAgaWYgKGxhdW5jaGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFVwY29taW5nTGF1bmNoZXMoc29ydExhdW5jaGVzKHsgbGF1bmNoZXMgfSkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgc2V0SXNFcnJvcighIWVycm9yKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZmluYWxseSgoKSA9PiBzZXRJc0xvYWRpbmcoZmFsc2UpKVxuXG4gICAgfSwgW3Bhc3RMYXVuY2hlc10pXG5cblxuICAgIGNvbnN0IGZldGNoRGF0YSA9ICgpID0+IHtcbiAgICAgICAgZmV0Y2hQYXN0TGF1bmNoZXMoKTtcbiAgICAgICAgZmV0Y2hVcGNvbWluZ0xhdW5jaGVzKCk7XG4gICAgfVxuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgZmV0Y2hEYXRhKCk7XG4gICAgfSwgW10pXG5cbiAgICByZXR1cm4ge1xuICAgICAgICBpc0xvYWRpbmcsXG4gICAgICAgIGlzRXJyb3IsXG4gICAgICAgIHNlY3Rpb25zOiBbeyB0aXRsZTogJ1VwY29taW5nIPCfmoAgTGF1bmNoZXMnLCBkYXRhOiB1cGNvbWluZ0xhdW5jaGVzIH0sIHsgdGl0bGU6ICdQYXN0IPCfmoAgTGF1bmNoZXMnLCBkYXRhOiBwYXN0TGF1bmNoZXMgfV0sXG4gICAgICAgIGZldGNoRGF0YVxuICAgIH1cbn0iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLElBQUEsR0FBQUQsT0FBQTtBQUVBLElBQUFFLGFBQUEsR0FBQUYsT0FBQTtBQUVPLElBQU1HLFdBQVcsR0FBQUMsT0FBQSxDQUFBRCxXQUFBLEdBQUcsU0FBZEEsV0FBV0EsQ0FBQSxFQUFTO0VBQzdCLElBQUFFLFNBQUEsR0FBd0MsSUFBQUMsZUFBUSxFQUFXLEVBQUUsQ0FBQztJQUFBQyxVQUFBLE9BQUFDLGVBQUEsQ0FBQUMsT0FBQSxFQUFBSixTQUFBO0lBQXZESyxZQUFZLEdBQUFILFVBQUE7SUFBRUksZUFBZSxHQUFBSixVQUFBO0VBQ3BDLElBQUFLLFVBQUEsR0FBZ0QsSUFBQU4sZUFBUSxFQUFXLEVBQUUsQ0FBQztJQUFBTyxVQUFBLE9BQUFMLGVBQUEsQ0FBQUMsT0FBQSxFQUFBRyxVQUFBO0lBQS9ERSxnQkFBZ0IsR0FBQUQsVUFBQTtJQUFFRSxtQkFBbUIsR0FBQUYsVUFBQTtFQUU1QyxJQUFBRyxVQUFBLEdBQWtDLElBQUFWLGVBQVEsRUFBVSxLQUFLLENBQUM7SUFBQVcsVUFBQSxPQUFBVCxlQUFBLENBQUFDLE9BQUEsRUFBQU8sVUFBQTtJQUFuREUsU0FBUyxHQUFBRCxVQUFBO0lBQUVFLFlBQVksR0FBQUYsVUFBQTtFQUM5QixJQUFBRyxVQUFBLEdBQThCLElBQUFkLGVBQVEsRUFBVSxLQUFLLENBQUM7SUFBQWUsVUFBQSxPQUFBYixlQUFBLENBQUFDLE9BQUEsRUFBQVcsVUFBQTtJQUEvQ0UsT0FBTyxHQUFBRCxVQUFBO0lBQUVFLFVBQVUsR0FBQUYsVUFBQTtFQUUxQixJQUFNRyxpQkFBaUIsR0FBRyxJQUFBQyxrQkFBVyxFQUFDLFlBQU07SUFDeENOLFlBQVksQ0FBQyxJQUFJLENBQUM7SUFDbEJJLFVBQVUsQ0FBQyxLQUFLLENBQUM7SUFFakIsSUFBQUcsd0JBQW1CLEVBQUMsQ0FBQyxDQUNoQkMsSUFBSSxDQUFDLFVBQUNDLFFBQWtCLEVBQUs7TUFFMUIsSUFBSUEsUUFBUSxFQUFFO1FBQ1ZqQixlQUFlLENBQUMsSUFBQWtCLDBCQUFZLEVBQUM7VUFBRUQsUUFBUSxFQUFSQSxRQUFRO1VBQUVFLE9BQU8sRUFBRTtRQUFLLENBQUMsQ0FBQyxDQUFDQyxNQUFNLENBQUMsVUFBQUMsSUFBQTtVQUFBLElBQUdDLFFBQVEsR0FBQUQsSUFBQSxDQUFSQyxRQUFRO1VBQUEsT0FBTyxDQUFDQSxRQUFRO1FBQUEsRUFBQyxDQUFDO01BQ2xHO0lBQ0osQ0FBQyxDQUFDLENBQ0RDLEtBQUssQ0FBQyxVQUFBQyxLQUFLLEVBQUk7TUFDWlosVUFBVSxDQUFDLENBQUMsQ0FBQ1ksS0FBSyxDQUFDO0lBQ3ZCLENBQUMsQ0FBQyxDQUNEQyxPQUFPLENBQUM7TUFBQSxPQUFNakIsWUFBWSxDQUFDLEtBQUssQ0FBQztJQUFBLEVBQUM7RUFFM0MsQ0FBQyxFQUFFLENBQUNULFlBQVksQ0FBQyxDQUFDO0VBRWxCLElBQU0yQixxQkFBcUIsR0FBRyxJQUFBWixrQkFBVyxFQUFDLFlBQU07SUFDNUNOLFlBQVksQ0FBQyxJQUFJLENBQUM7SUFDbEJJLFVBQVUsQ0FBQyxLQUFLLENBQUM7SUFFakIsSUFBQWUsNEJBQXVCLEVBQUMsQ0FBQyxDQUNwQlgsSUFBSSxDQUFDLFVBQUNDLFFBQWtCLEVBQUs7TUFFMUIsSUFBSUEsUUFBUSxFQUFFO1FBQ1ZiLG1CQUFtQixDQUFDLElBQUFjLDBCQUFZLEVBQUM7VUFBRUQsUUFBUSxFQUFSQTtRQUFTLENBQUMsQ0FBQyxDQUFDO01BQ25EO0lBQ0osQ0FBQyxDQUFDLENBQ0RNLEtBQUssQ0FBQyxVQUFBQyxLQUFLLEVBQUk7TUFDWlosVUFBVSxDQUFDLENBQUMsQ0FBQ1ksS0FBSyxDQUFDO0lBQ3ZCLENBQUMsQ0FBQyxDQUNEQyxPQUFPLENBQUM7TUFBQSxPQUFNakIsWUFBWSxDQUFDLEtBQUssQ0FBQztJQUFBLEVBQUM7RUFFM0MsQ0FBQyxFQUFFLENBQUNULFlBQVksQ0FBQyxDQUFDO0VBR2xCLElBQU02QixTQUFTLEdBQUcsU0FBWkEsU0FBU0EsQ0FBQSxFQUFTO0lBQ3BCZixpQkFBaUIsQ0FBQyxDQUFDO0lBQ25CYSxxQkFBcUIsQ0FBQyxDQUFDO0VBQzNCLENBQUM7RUFFRCxJQUFBRyxnQkFBUyxFQUFDLFlBQU07SUFDWkQsU0FBUyxDQUFDLENBQUM7RUFDZixDQUFDLEVBQUUsRUFBRSxDQUFDO0VBRU4sT0FBTztJQUNIckIsU0FBUyxFQUFUQSxTQUFTO0lBQ1RJLE9BQU8sRUFBUEEsT0FBTztJQUNQbUIsUUFBUSxFQUFFLENBQUM7TUFBRUMsS0FBSyxFQUFFLHNCQUFzQjtNQUFFQyxJQUFJLEVBQUU3QjtJQUFpQixDQUFDLEVBQUU7TUFBRTRCLEtBQUssRUFBRSxrQkFBa0I7TUFBRUMsSUFBSSxFQUFFakM7SUFBYSxDQUFDLENBQUM7SUFDeEg2QixTQUFTLEVBQVRBO0VBQ0osQ0FBQztBQUNMLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=