{"version":3,"names":["_gesture","require","changeEventCalculator","current","previous","changePayload","undefined","forceChange","force","Object","assign","ForceTouchGesture","_gesture$ContinousBas","_this","_classCallCheck2","default","_callSuper","_defineProperty","handlerName","_inherits2","_createClass2","key","value","minForce","config","maxForce","feedbackOnActivation","onChange","callback","handlers","_get2","_getPrototypeOf2","prototype","call","ContinousBaseGesture"],"sources":["forceTouchGesture.ts"],"sourcesContent":["import { BaseGestureConfig, ContinousBaseGesture } from './gesture';\nimport {\n  ForceTouchGestureConfig,\n  ForceTouchGestureHandlerEventPayload,\n} from '../ForceTouchGestureHandler';\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\n\nexport type ForceTouchGestureChangeEventPayload = {\n  forceChange: number;\n};\n\nfunction changeEventCalculator(\n  current: GestureUpdateEvent<ForceTouchGestureHandlerEventPayload>,\n  previous?: GestureUpdateEvent<ForceTouchGestureHandlerEventPayload>\n) {\n  'worklet';\n  let changePayload: ForceTouchGestureChangeEventPayload;\n  if (previous === undefined) {\n    changePayload = {\n      forceChange: current.force,\n    };\n  } else {\n    changePayload = {\n      forceChange: current.force - previous.force,\n    };\n  }\n\n  return { ...current, ...changePayload };\n}\n\nexport class ForceTouchGesture extends ContinousBaseGesture<\n  ForceTouchGestureHandlerEventPayload,\n  ForceTouchGestureChangeEventPayload\n> {\n  public config: BaseGestureConfig & ForceTouchGestureConfig = {};\n\n  constructor() {\n    super();\n\n    this.handlerName = 'ForceTouchGestureHandler';\n  }\n\n  minForce(force: number) {\n    this.config.minForce = force;\n    return this;\n  }\n\n  maxForce(force: number) {\n    this.config.maxForce = force;\n    return this;\n  }\n\n  feedbackOnActivation(value: boolean) {\n    this.config.feedbackOnActivation = value;\n    return this;\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<\n        GestureUpdateEvent<\n          ForceTouchGestureHandlerEventPayload &\n            ForceTouchGestureChangeEventPayload\n        >\n      >\n    ) => void\n  ) {\n    // @ts-ignore TS being overprotective, ForceTouchGestureHandlerEventPayload is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}\n\nexport type ForceTouchGestureType = InstanceType<typeof ForceTouchGesture>;\n"],"mappings":";;;;;;;;;;;;;;;AAAA,IAAAA,QAAA,GAAAC,OAAA;;;;;;;;;;;;;;AAWA,SAASC,qBAATA,CACEC,OADF,EAEEC,QAFF,EAGE;EACA;;EACA,IAAIC,aAAJ;EACA,IAAID,QAAQ,KAAKE,SAAjB,EAA4B;IAC1BD,aAAa,GAAG;MACdE,WAAW,EAAEJ,OAAO,CAACK;IADP,CAAhB;EAGD,CAJD,MAIO;IACLH,aAAa,GAAG;MACdE,WAAW,EAAEJ,OAAO,CAACK,KAAR,GAAgBJ,QAAQ,CAACI;IADxB,CAAhB;EAGD;EAED,OAAAC,MAAA,CAAAC,MAAA,KAAYP,OAAL,EAAiBE,aAAA;AACzB;AAAA,IAEYM,iBAAN,aAAAC,qBAAA;EAML,SAAAD,kBAAA,EAAc;IAAA,IAAAE,KAAA;IAAA,IAAAC,gBAAA,CAAAC,OAAA,QAAAJ,iBAAA;IACZE,KAAA,GAAAG,UAAA,OAAAL,iBAAA;IADYM,eAAA,CAAAJ,KAAA,YAF+C,EAE/C;IAGZA,KAAA,CAAKK,WAAL,GAAmB,0BAAnB;IAAA,OAAAL,KAAA;EACD;EAAA,IAAAM,UAAA,CAAAJ,OAAA,EAAAJ,iBAAA,EAAAC,qBAAA;EAAA,WAAAQ,aAAA,CAAAL,OAAA,EAAAJ,iBAAA;IAAAU,GAAA;IAAAC,KAAA,EAED,SAAAC,SAASf,KAAD,EAAgB;MACtB,KAAKgB,MAAL,CAAYD,QAAZ,GAAuBf,KAAvB;MACA,OAAO,IAAP;IACD;EAAA;IAAAa,GAAA;IAAAC,KAAA,EAED,SAAAG,SAASjB,KAAD,EAAgB;MACtB,KAAKgB,MAAL,CAAYC,QAAZ,GAAuBjB,KAAvB;MACA,OAAO,IAAP;IACD;EAAA;IAAAa,GAAA;IAAAC,KAAA,EAED,SAAAI,qBAAqBJ,KAAD,EAAiB;MACnC,KAAKE,MAAL,CAAYE,oBAAZ,GAAmCJ,KAAnC;MACA,OAAO,IAAP;IACD;EAAA;IAAAD,GAAA;IAAAC,KAAA,EAED,SAAAK,SACEC,QADM,EASN;MAEA,KAAKC,QAAL,CAAc3B,qBAAd,GAAsCA,qBAAtC;MACA,WAAA4B,KAAA,CAAAf,OAAA,MAAAgB,gBAAA,CAAAhB,OAAA,EAAAJ,iBAAA,CAAAqB,SAAA,qBAAAC,IAAA,OAAsBL,QAAf;IACR;EAAA;AAAA,EAxCoC5B,QAAA,CAAAkC,oBAAhC","ignoreList":[]}