afa6cf3c9abadd70688700d1262c0890
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useLaunches = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _api = require("../services/api");
var _sortLaunches = require("../utils/sortLaunches");
var useLaunches = exports.useLaunches = function useLaunches() {
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    pastLaunches = _useState2[0],
    setPastLaunches = _useState2[1];
  var _useState3 = (0, _react.useState)([]),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    upcomingLaunches = _useState4[0],
    setUpcomingLaunches = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    isLoading = _useState6[0],
    setIsLoading = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    isError = _useState8[0],
    setIsError = _useState8[1];
  var fetchPastLaunches = (0, _react.useCallback)(function () {
    setIsLoading(true);
    setIsError(false);
    (0, _api.fetchPastLaunchData)().then(function (launches) {
      if (launches) {
        setPastLaunches((0, _sortLaunches.sortLaunches)({
          launches: launches,
          reverse: true
        }).filter(function (_ref) {
          var upcoming = _ref.upcoming;
          return !upcoming;
        }));
      }
    }).catch(function (error) {
      setIsError(true);
      console.log(error);
    }).finally(function () {
      return setIsLoading(false);
    });
  }, [pastLaunches]);
  var fetchUpcomingLaunches = (0, _react.useCallback)(function () {
    setIsLoading(true);
    setIsError(false);
    (0, _api.fetchUpcomingLaunchData)().then(function (launches) {
      if (launches) {
        setUpcomingLaunches((0, _sortLaunches.sortLaunches)({
          launches: launches
        }));
      }
    }).catch(function (error) {
      setIsError(true);
      console.log(error);
    }).finally(function () {
      return setIsLoading(false);
    });
  }, [pastLaunches]);
  var fetchData = function fetchData() {
    fetchPastLaunches();
    fetchUpcomingLaunches();
  };
  (0, _react.useEffect)(function () {
    fetchData();
  }, []);
  return {
    isLoading: isLoading,
    isError: isError,
    sections: [{
      title: 'Upcoming ðŸš€ Launches',
      data: upcomingLaunches
    }, {
      title: 'Past ðŸš€ Launches',
      data: pastLaunches
    }],
    fetchData: fetchData
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX2FwaSIsIl9zb3J0TGF1bmNoZXMiLCJ1c2VMYXVuY2hlcyIsImV4cG9ydHMiLCJfdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsIl91c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheTIiLCJkZWZhdWx0IiwicGFzdExhdW5jaGVzIiwic2V0UGFzdExhdW5jaGVzIiwiX3VzZVN0YXRlMyIsIl91c2VTdGF0ZTQiLCJ1cGNvbWluZ0xhdW5jaGVzIiwic2V0VXBjb21pbmdMYXVuY2hlcyIsIl91c2VTdGF0ZTUiLCJfdXNlU3RhdGU2IiwiaXNMb2FkaW5nIiwic2V0SXNMb2FkaW5nIiwiX3VzZVN0YXRlNyIsIl91c2VTdGF0ZTgiLCJpc0Vycm9yIiwic2V0SXNFcnJvciIsImZldGNoUGFzdExhdW5jaGVzIiwidXNlQ2FsbGJhY2siLCJmZXRjaFBhc3RMYXVuY2hEYXRhIiwidGhlbiIsImxhdW5jaGVzIiwic29ydExhdW5jaGVzIiwicmV2ZXJzZSIsImZpbHRlciIsIl9yZWYiLCJ1cGNvbWluZyIsImNhdGNoIiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIiwiZmluYWxseSIsImZldGNoVXBjb21pbmdMYXVuY2hlcyIsImZldGNoVXBjb21pbmdMYXVuY2hEYXRhIiwiZmV0Y2hEYXRhIiwidXNlRWZmZWN0Iiwic2VjdGlvbnMiLCJ0aXRsZSIsImRhdGEiXSwic291cmNlcyI6WyJ1c2VMYXVuY2hlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgZmV0Y2hQYXN0TGF1bmNoRGF0YSwgZmV0Y2hVcGNvbWluZ0xhdW5jaERhdGEgfSBmcm9tIFwiLi4vc2VydmljZXMvYXBpXCI7XG5pbXBvcnQgeyBMYXVuY2ggfSBmcm9tIFwiLi4vc2VydmljZXMvdHlwZXNcIjtcbmltcG9ydCB7IHNvcnRMYXVuY2hlcyB9IGZyb20gXCIuLi91dGlscy9zb3J0TGF1bmNoZXNcIjtcblxuZXhwb3J0IGNvbnN0IHVzZUxhdW5jaGVzID0gKCkgPT4ge1xuICAgIGNvbnN0IFtwYXN0TGF1bmNoZXMsIHNldFBhc3RMYXVuY2hlc10gPSB1c2VTdGF0ZTxMYXVuY2hbXT4oW10pXG4gICAgY29uc3QgW3VwY29taW5nTGF1bmNoZXMsIHNldFVwY29taW5nTGF1bmNoZXNdID0gdXNlU3RhdGU8TGF1bmNoW10+KFtdKVxuXG4gICAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKVxuICAgIGNvbnN0IFtpc0Vycm9yLCBzZXRJc0Vycm9yXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKVxuXG4gICAgY29uc3QgZmV0Y2hQYXN0TGF1bmNoZXMgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIHNldElzTG9hZGluZyh0cnVlKTtcbiAgICAgICAgc2V0SXNFcnJvcihmYWxzZSk7XG5cbiAgICAgICAgZmV0Y2hQYXN0TGF1bmNoRGF0YSgpXG4gICAgICAgICAgICAudGhlbigobGF1bmNoZXM6IExhdW5jaFtdKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gYWxsIGxhdW5jaGVzIGVuZHBvaW50IGluY2x1ZGVzIHVwY29taW5nIGxhdW5jaGVzLiBpbiBvcmRlciB0byBzb3J0IGJ5IGRhdGUgZGVzY2VuZGluZywgd2UgZmlsdGVyIHRoZW0gb3V0XG4gICAgICAgICAgICAgICAgaWYgKGxhdW5jaGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFBhc3RMYXVuY2hlcyhzb3J0TGF1bmNoZXMoeyBsYXVuY2hlcywgcmV2ZXJzZTogdHJ1ZSB9KS5maWx0ZXIoKHsgdXBjb21pbmcgfSkgPT4gIXVwY29taW5nKSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICBzZXRJc0Vycm9yKHRydWUpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZmluYWxseSgoKSA9PiBzZXRJc0xvYWRpbmcoZmFsc2UpKVxuXG4gICAgfSwgW3Bhc3RMYXVuY2hlc10pXG5cbiAgICBjb25zdCBmZXRjaFVwY29taW5nTGF1bmNoZXMgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIHNldElzTG9hZGluZyh0cnVlKTtcbiAgICAgICAgc2V0SXNFcnJvcihmYWxzZSk7XG5cbiAgICAgICAgZmV0Y2hVcGNvbWluZ0xhdW5jaERhdGEoKVxuICAgICAgICAgICAgLnRoZW4oKGxhdW5jaGVzOiBMYXVuY2hbXSkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIHVwY29taW5nIGxhdW5jaGVzIGFyZSBzb3J0ZWQgYXNjZW5kaW5nIGJ5IGRhdGUsIHNvIHRoZSBuZWFyZXN0IG9uZSBpcyBvbiB0b3BcbiAgICAgICAgICAgICAgICBpZiAobGF1bmNoZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VXBjb21pbmdMYXVuY2hlcyhzb3J0TGF1bmNoZXMoeyBsYXVuY2hlcyB9KSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICBzZXRJc0Vycm9yKHRydWUpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZmluYWxseSgoKSA9PiBzZXRJc0xvYWRpbmcoZmFsc2UpKVxuXG4gICAgfSwgW3Bhc3RMYXVuY2hlc10pXG5cblxuICAgIGNvbnN0IGZldGNoRGF0YSA9ICgpID0+IHtcbiAgICAgICAgZmV0Y2hQYXN0TGF1bmNoZXMoKTtcbiAgICAgICAgZmV0Y2hVcGNvbWluZ0xhdW5jaGVzKCk7XG4gICAgfVxuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgZmV0Y2hEYXRhKCk7XG4gICAgfSwgW10pXG5cbiAgICByZXR1cm4ge1xuICAgICAgICBpc0xvYWRpbmcsXG4gICAgICAgIGlzRXJyb3IsXG4gICAgICAgIHNlY3Rpb25zOiBbeyB0aXRsZTogJ1VwY29taW5nIPCfmoAgTGF1bmNoZXMnLCBkYXRhOiB1cGNvbWluZ0xhdW5jaGVzIH0sIHsgdGl0bGU6ICdQYXN0IPCfmoAgTGF1bmNoZXMnLCBkYXRhOiBwYXN0TGF1bmNoZXMgfV0sXG4gICAgICAgIGZldGNoRGF0YVxuICAgIH1cbn0iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLElBQUEsR0FBQUQsT0FBQTtBQUVBLElBQUFFLGFBQUEsR0FBQUYsT0FBQTtBQUVPLElBQU1HLFdBQVcsR0FBQUMsT0FBQSxDQUFBRCxXQUFBLEdBQUcsU0FBZEEsV0FBV0EsQ0FBQSxFQUFTO0VBQzdCLElBQUFFLFNBQUEsR0FBd0MsSUFBQUMsZUFBUSxFQUFXLEVBQUUsQ0FBQztJQUFBQyxVQUFBLE9BQUFDLGVBQUEsQ0FBQUMsT0FBQSxFQUFBSixTQUFBO0lBQXZESyxZQUFZLEdBQUFILFVBQUE7SUFBRUksZUFBZSxHQUFBSixVQUFBO0VBQ3BDLElBQUFLLFVBQUEsR0FBZ0QsSUFBQU4sZUFBUSxFQUFXLEVBQUUsQ0FBQztJQUFBTyxVQUFBLE9BQUFMLGVBQUEsQ0FBQUMsT0FBQSxFQUFBRyxVQUFBO0lBQS9ERSxnQkFBZ0IsR0FBQUQsVUFBQTtJQUFFRSxtQkFBbUIsR0FBQUYsVUFBQTtFQUU1QyxJQUFBRyxVQUFBLEdBQWtDLElBQUFWLGVBQVEsRUFBVSxLQUFLLENBQUM7SUFBQVcsVUFBQSxPQUFBVCxlQUFBLENBQUFDLE9BQUEsRUFBQU8sVUFBQTtJQUFuREUsU0FBUyxHQUFBRCxVQUFBO0lBQUVFLFlBQVksR0FBQUYsVUFBQTtFQUM5QixJQUFBRyxVQUFBLEdBQThCLElBQUFkLGVBQVEsRUFBVSxLQUFLLENBQUM7SUFBQWUsVUFBQSxPQUFBYixlQUFBLENBQUFDLE9BQUEsRUFBQVcsVUFB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