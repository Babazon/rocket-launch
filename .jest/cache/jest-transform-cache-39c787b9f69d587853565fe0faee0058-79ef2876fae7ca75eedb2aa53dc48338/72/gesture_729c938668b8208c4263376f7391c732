8845e7d43f79fa6523d55e258f7ad652
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContinousBaseGesture = exports.BaseGesture = exports.Gesture = exports.CALLBACK_TYPE = void 0;
var _handlersRegistry = require("../handlersRegistry");
var _utils = require("../../utils");
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var CALLBACK_TYPE = {
  UNDEFINED: 0,
  BEGAN: 1,
  START: 2,
  UPDATE: 3,
  CHANGE: 4,
  END: 5,
  FINALIZE: 6,
  TOUCHES_DOWN: 7,
  TOUCHES_MOVE: 8,
  TOUCHES_UP: 9,
  TOUCHES_CANCELLED: 10
};
exports.CALLBACK_TYPE = CALLBACK_TYPE;
var Gesture = (0, _createClass2.default)(function Gesture() {
  (0, _classCallCheck2.default)(this, Gesture);
});
exports.Gesture = Gesture;
var nextGestureId = 0;
var BaseGesture = function (_Gesture) {
  function BaseGesture() {
    var _this;
    (0, _classCallCheck2.default)(this, BaseGesture);
    _this = _callSuper(this, BaseGesture);
    _defineProperty(_this, "gestureId", -1);
    _defineProperty(_this, "handlerTag", -1);
    _defineProperty(_this, "handlerName", '');
    _defineProperty(_this, "config", {});
    _defineProperty(_this, "handlers", {
      gestureId: -1,
      handlerTag: -1,
      isWorklet: []
    });
    _this.gestureId = nextGestureId++;
    _this.handlers.gestureId = _this.gestureId;
    return _this;
  }
  (0, _inherits2.default)(BaseGesture, _Gesture);
  return (0, _createClass2.default)(BaseGesture, [{
    key: "addDependency",
    value: function addDependency(key, gesture) {
      var value = this.config[key];
      this.config[key] = value ? Array().concat(value, gesture) : [gesture];
    }
  }, {
    key: "withRef",
    value: function withRef(ref) {
      this.config.ref = ref;
      return this;
    }
  }, {
    key: "isWorklet",
    value: function isWorklet(callback) {
      return callback.__workletHash !== undefined;
    }
  }, {
    key: "onBegin",
    value: function onBegin(callback) {
      this.handlers.onBegin = callback;
      this.handlers.isWorklet[CALLBACK_TYPE.BEGAN] = this.isWorklet(callback);
      return this;
    }
  }, {
    key: "onStart",
    value: function onStart(callback) {
      this.handlers.onStart = callback;
      this.handlers.isWorklet[CALLBACK_TYPE.START] = this.isWorklet(callback);
      return this;
    }
  }, {
    key: "onEnd",
    value: function onEnd(callback) {
      this.handlers.onEnd = callback;
      this.handlers.isWorklet[CALLBACK_TYPE.END] = this.isWorklet(callback);
      return this;
    }
  }, {
    key: "onFinalize",
    value: function onFinalize(callback) {
      this.handlers.onFinalize = callback;
      this.handlers.isWorklet[CALLBACK_TYPE.FINALIZE] = this.isWorklet(callback);
      return this;
    }
  }, {
    key: "onTouchesDown",
    value: function onTouchesDown(callback) {
      this.config.needsPointerData = true;
      this.handlers.onTouchesDown = callback;
      this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_DOWN] = this.isWorklet(callback);
      return this;
    }
  }, {
    key: "onTouchesMove",
    value: function onTouchesMove(callback) {
      this.config.needsPointerData = true;
      this.handlers.onTouchesMove = callback;
      this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_MOVE] = this.isWorklet(callback);
      return this;
    }
  }, {
    key: "onTouchesUp",
    value: function onTouchesUp(callback) {
      this.config.needsPointerData = true;
      this.handlers.onTouchesUp = callback;
      this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_UP] = this.isWorklet(callback);
      return this;
    }
  }, {
    key: "onTouchesCancelled",
    value: function onTouchesCancelled(callback) {
      this.config.needsPointerData = true;
      this.handlers.onTouchesCancelled = callback;
      this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_CANCELLED] = this.isWorklet(callback);
      return this;
    }
  }, {
    key: "enabled",
    value: function enabled(_enabled) {
      this.config.enabled = _enabled;
      return this;
    }
  }, {
    key: "shouldCancelWhenOutside",
    value: function shouldCancelWhenOutside(value) {
      this.config.shouldCancelWhenOutside = value;
      return this;
    }
  }, {
    key: "hitSlop",
    value: function hitSlop(_hitSlop) {
      this.config.hitSlop = _hitSlop;
      return this;
    }
  }, {
    key: "activeCursor",
    value: function activeCursor(_activeCursor) {
      this.config.activeCursor = _activeCursor;
      return this;
    }
  }, {
    key: "mouseButton",
    value: function mouseButton(_mouseButton) {
      this.config.mouseButton = _mouseButton;
      return this;
    }
  }, {
    key: "runOnJS",
    value: function runOnJS(_runOnJS) {
      this.config.runOnJS = _runOnJS;
      return this;
    }
  }, {
    key: "simultaneousWithExternalGesture",
    value: function simultaneousWithExternalGesture() {
      for (var _len = arguments.length, gestures = new Array(_len), _key = 0; _key < _len; _key++) {
        gestures[_key] = arguments[_key];
      }
      for (var gesture of gestures) {
        this.addDependency('simultaneousWith', gesture);
      }
      return this;
    }
  }, {
    key: "requireExternalGestureToFail",
    value: function requireExternalGestureToFail() {
      for (var _len2 = arguments.length, gestures = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        gestures[_key2] = arguments[_key2];
      }
      for (var gesture of gestures) {
        this.addDependency('requireToFail', gesture);
      }
      return this;
    }
  }, {
    key: "blocksExternalGesture",
    value: function blocksExternalGesture() {
      for (var _len3 = arguments.length, gestures = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        gestures[_key3] = arguments[_key3];
      }
      for (var gesture of gestures) {
        this.addDependency('blocksHandlers', gesture);
      }
      return this;
    }
  }, {
    key: "withTestId",
    value: function withTestId(id) {
      this.config.testId = id;
      return this;
    }
  }, {
    key: "cancelsTouchesInView",
    value: function cancelsTouchesInView(value) {
      this.config.cancelsTouchesInView = value;
      return this;
    }
  }, {
    key: "initialize",
    value: function initialize() {
      this.handlerTag = (0, _handlersRegistry.getNextHandlerTag)();
      this.handlers = Object.assign({}, this.handlers, {
        handlerTag: this.handlerTag
      });
      if (this.config.ref) {
        this.config.ref.current = this;
      }
    }
  }, {
    key: "toGestureArray",
    value: function toGestureArray() {
      return [this];
    }
  }, {
    key: "prepare",
    value: function prepare() {}
  }, {
    key: "shouldUseReanimated",
    get: function get() {
      return this.config.runOnJS !== true && !this.handlers.isWorklet.includes(false) && !(0, _utils.isRemoteDebuggingEnabled)();
    }
  }]);
}(Gesture);
exports.BaseGesture = BaseGesture;
var ContinousBaseGesture = function (_BaseGesture) {
  function ContinousBaseGesture() {
    (0, _classCallCheck2.default)(this, ContinousBaseGesture);
    return _callSuper(this, ContinousBaseGesture, arguments);
  }
  (0, _inherits2.default)(ContinousBaseGesture, _BaseGesture);
  return (0, _createClass2.default)(ContinousBaseGesture, [{
    key: "onUpdate",
    value: function onUpdate(callback) {
      this.handlers.onUpdate = callback;
      this.handlers.isWorklet[CALLBACK_TYPE.UPDATE] = this.isWorklet(callback);
      return this;
    }
  }, {
    key: "onChange",
    value: function onChange(callback) {
      this.handlers.onChange = callback;
      this.handlers.isWorklet[CALLBACK_TYPE.CHANGE] = this.isWorklet(callback);
      return this;
    }
  }, {
    key: "manualActivation",
    value: function manualActivation(_manualActivation) {
      this.config.manualActivation = _manualActivation;
      return this;
    }
  }]);
}(BaseGesture);
exports.ContinousBaseGesture = ContinousBaseGesture;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,