0e377956d8e458c3b46190ba4f963509
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.LaunchCard = void 0;
var _native = require("@react-navigation/native");
var _moment = _interopRequireDefault(require("moment"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeFastImage = _interopRequireDefault(require("react-native-fast-image"));
var _getAvailableImage = require("../utils/getAvailableImage");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var LaunchCard = exports.LaunchCard = function LaunchCard(_ref) {
  var launch = _ref.launch;
  var navigation = (0, _native.useNavigation)();
  var handleClickLaunch = (0, _react.useCallback)(function () {
    navigation.navigate('Detail', {
      launch: launch
    });
  }, [launch, navigation]);
  var isUpcomingLaunch = (0, _react.useMemo)(function () {
    return launch.upcoming;
  }, [launch]);
  var conditionalCardStyle = (0, _react.useMemo)(function () {
    return {
      backgroundColor: isUpcomingLaunch ? 'rgba(0,0,0,0.3)' : launch.success ? 'rgba(38,194,129,0.4)' : 'rgba(255,0,0,0.4)'
    };
  }, [launch]);
  var launchFailures = (0, _react.useMemo)(function () {
    return launch.failures.map(function (fail, index) {
      return `${fail.reason}${index < launch.failures.length - 1 ? ',' : ''}`;
    });
  }, [launch]);
  return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
    style: [styles.card, conditionalCardStyle],
    onPress: handleClickLaunch,
    children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.content,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        numberOfLines: 1,
        style: styles.title,
        children: `Mission: ${launch.name}`
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.detailsContainer,
        children: [(0, _jsxRuntime.jsx)(_reactNativeFastImage.default, {
          style: styles.thumbnail,
          source: (0, _getAvailableImage.getAvailableImage)({
            launch: launch,
            thumbnail: true
          }),
          resizeMode: _reactNativeFastImage.default.resizeMode.contain
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.textContainer,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            numberOfLines: 1,
            style: styles.text,
            children: `${_moment.default.utc(launch.date_utc).utcOffset((0, _moment.default)().utcOffset()).format('MMMM Do YYYY, HH:mm')}`
          }), !!launch.details && (0, _jsxRuntime.jsx)(_reactNative.Text, {
            numberOfLines: launch.failures.length ? 2 : 4,
            style: styles.text,
            children: `Details: ${launch.details}`
          }), !!launch.failures.length && (0, _jsxRuntime.jsx)(_reactNative.Text, {
            numberOfLines: !!launch.details ? 2 : 4,
            style: styles.text,
            children: `Fail Reason: ${launchFailures}`
          })]
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: {
            alignSelf: 'center',
            fontSize: 20,
            color: 'white',
            textAlignVertical: 'top'
          },
          children: `${'>'}`
        })]
      })]
    })
  });
};
var styles = _reactNative.StyleSheet.create({
  card: {
    height: 150,
    width: "100%",
    marginBottom: 16,
    shadowColor: "#000",
    shadowOffset: {
      width: 2,
      height: 20
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
    borderRadius: 16
  },
  content: {
    flex: 1,
    padding: 8,
    borderRadius: 16,
    borderStyle: 'solid',
    alignItems: 'flex-start',
    justifyContent: 'flex-start'
  },
  title: {
    fontSize: 16,
    fontWeight: "bold",
    color: "white",
    marginRight: 4,
    flexWrap: 'wrap'
  },
  detailsContainer: {
    flexDirection: "row",
    alignItems: "flex-start"
  },
  thumbnail: {
    height: 100,
    width: 100,
    marginRight: 8,
    marginTop: 8
  },
  textContainer: {
    flexDirection: "column",
    flex: 1,
    marginTop: 16,
    marginLeft: 8
  },
  text: {
    color: "white",
    marginBottom: 5,
    marginRight: 4,
    flexWrap: 'wrap'
  }
});
var _default = exports.default = LaunchCard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,