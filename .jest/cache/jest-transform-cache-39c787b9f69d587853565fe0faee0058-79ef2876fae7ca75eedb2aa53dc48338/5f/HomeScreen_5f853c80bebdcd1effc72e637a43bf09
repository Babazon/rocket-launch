bf717f2289d1c79e3a1d2c4d85f3e762
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HomeScreen = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _LaunchCard = require("../components/LaunchCard");
var _useLaunches2 = require("../hooks/useLaunches");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var SCREEN_HEIGHT = _reactNative.Dimensions.get('window').height;
var HomeScreen = exports.HomeScreen = function HomeScreen() {
  var _useLaunches = (0, _useLaunches2.useLaunches)(),
    isLoading = _useLaunches.isLoading,
    isError = _useLaunches.isError,
    sections = _useLaunches.sections,
    fetchData = _useLaunches.fetchData;
  var renderLaunch = function renderLaunch(_ref) {
    var item = _ref.item;
    return (0, _jsxRuntime.jsx)(_LaunchCard.LaunchCard, {
      launch: item
    });
  };
  var renderSectionHeader = function renderSectionHeader(info) {
    return (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: styles.sectionHeader,
      children: info.section.title
    });
  };
  var sectionListRef = (0, _react.useRef)(null);
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    showButton = _useState2[0],
    setShowButton = _useState2[1];
  var handleScroll = function handleScroll(event) {
    var offsetY = event.nativeEvent.contentOffset.y;
    if (offsetY > SCREEN_HEIGHT) {
      setShowButton(true);
    } else {
      setShowButton(false);
    }
  };
  var scrollToTop = function scrollToTop() {
    var _sectionListRef$curre;
    (_sectionListRef$curre = sectionListRef.current) == null ? void 0 : _sectionListRef$curre.scrollToLocation({
      sectionIndex: 0,
      itemIndex: 0
    });
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.SafeAreaView, {
    style: {
      flex: 1
    },
    children: [isError && (0, _jsxRuntime.jsx)(_reactNative.Text, {
      children: "An error occurred. Please try to refresh."
    }), (0, _jsxRuntime.jsx)(_reactNative.SectionList, {
      ref: sectionListRef,
      sections: sections,
      contentContainerStyle: {
        marginHorizontal: 16
      },
      keyExtractor: function keyExtractor(launch, index) {
        return launch.id + index;
      },
      renderItem: renderLaunch,
      stickySectionHeadersEnabled: true,
      renderSectionHeader: renderSectionHeader,
      refreshControl: (0, _jsxRuntime.jsx)(_reactNative.RefreshControl, {
        refreshing: isLoading,
        onRefresh: fetchData
      }),
      onScroll: handleScroll
    }), showButton && (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      style: styles.floatingButton,
      onPress: scrollToTop,
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.buttonText,
        children: "^"
      })
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  sectionHeader: {
    fontSize: 18,
    fontWeight: "bold",
    backgroundColor: "#f0f0f0",
    paddingVertical: 8,
    paddingHorizontal: 16
  },
  floatingButton: {
    position: 'absolute',
    bottom: 20,
    right: 20,
    backgroundColor: 'rgba(255,255,255,0.5)',
    borderRadius: 15,
    width: 30,
    height: 30,
    alignItems: 'center',
    justifyContent: 'flex-end',
    shadowColor: "#000",
    shadowOffset: {
      width: 2,
      height: 10
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
    borderStyle: 'solid',
    borderWidth: 1,
    borderColor: 'whitesmoke'
  },
  buttonText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 24,
    top: 4
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,