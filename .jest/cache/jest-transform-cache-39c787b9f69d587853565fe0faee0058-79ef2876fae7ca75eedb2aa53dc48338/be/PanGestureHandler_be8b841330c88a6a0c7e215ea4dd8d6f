cd8f6a6a442ce3a25c3ead3e91160eab
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.managePanProps = managePanProps;
exports.PanGestureHandler = exports.panHandlerName = exports.panGestureHandlerCustomNativeProps = exports.panGestureHandlerProps = void 0;
var _createHandler = _interopRequireDefault(require("./createHandler"));
var _gestureHandlerCommon = require("./gestureHandlerCommon");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var panGestureHandlerProps = ['activeOffsetY', 'activeOffsetX', 'failOffsetY', 'failOffsetX', 'minDist', 'minVelocity', 'minVelocityX', 'minVelocityY', 'minPointers', 'maxPointers', 'avgTouches', 'enableTrackpadTwoFingerGesture', 'activateAfterLongPress'];
exports.panGestureHandlerProps = panGestureHandlerProps;
var panGestureHandlerCustomNativeProps = ['activeOffsetYStart', 'activeOffsetYEnd', 'activeOffsetXStart', 'activeOffsetXEnd', 'failOffsetYStart', 'failOffsetYEnd', 'failOffsetXStart', 'failOffsetXEnd'];
exports.panGestureHandlerCustomNativeProps = panGestureHandlerCustomNativeProps;
var panHandlerName = 'PanGestureHandler';
exports.panHandlerName = panHandlerName;
var PanGestureHandler = (0, _createHandler.default)({
  name: panHandlerName,
  allowedProps: [].concat((0, _toConsumableArray2.default)(_gestureHandlerCommon.baseGestureHandlerProps), panGestureHandlerProps),
  config: {},
  transformProps: managePanProps,
  customNativeProps: panGestureHandlerCustomNativeProps
});
exports.PanGestureHandler = PanGestureHandler;
function validatePanGestureHandlerProps(props) {
  if (Array.isArray(props.activeOffsetX) && (props.activeOffsetX[0] > 0 || props.activeOffsetX[1] < 0)) {
    throw new Error(`First element of activeOffsetX should be negative, a the second one should be positive`);
  }
  if (Array.isArray(props.activeOffsetY) && (props.activeOffsetY[0] > 0 || props.activeOffsetY[1] < 0)) {
    throw new Error(`First element of activeOffsetY should be negative, a the second one should be positive`);
  }
  if (Array.isArray(props.failOffsetX) && (props.failOffsetX[0] > 0 || props.failOffsetX[1] < 0)) {
    throw new Error(`First element of failOffsetX should be negative, a the second one should be positive`);
  }
  if (Array.isArray(props.failOffsetY) && (props.failOffsetY[0] > 0 || props.failOffsetY[1] < 0)) {
    throw new Error(`First element of failOffsetY should be negative, a the second one should be positive`);
  }
  if (props.minDist && (props.failOffsetX || props.failOffsetY)) {
    throw new Error(`It is not supported to use minDist with failOffsetX or failOffsetY, use activeOffsetX and activeOffsetY instead`);
  }
  if (props.minDist && (props.activeOffsetX || props.activeOffsetY)) {
    throw new Error(`It is not supported to use minDist with activeOffsetX or activeOffsetY`);
  }
}
function transformPanGestureHandlerProps(props) {
  var res = Object.assign({}, props);
  if (props.activeOffsetX !== undefined) {
    delete res.activeOffsetX;
    if (Array.isArray(props.activeOffsetX)) {
      res.activeOffsetXStart = props.activeOffsetX[0];
      res.activeOffsetXEnd = props.activeOffsetX[1];
    } else if (props.activeOffsetX < 0) {
      res.activeOffsetXStart = props.activeOffsetX;
    } else {
      res.activeOffsetXEnd = props.activeOffsetX;
    }
  }
  if (props.activeOffsetY !== undefined) {
    delete res.activeOffsetY;
    if (Array.isArray(props.activeOffsetY)) {
      res.activeOffsetYStart = props.activeOffsetY[0];
      res.activeOffsetYEnd = props.activeOffsetY[1];
    } else if (props.activeOffsetY < 0) {
      res.activeOffsetYStart = props.activeOffsetY;
    } else {
      res.activeOffsetYEnd = props.activeOffsetY;
    }
  }
  if (props.failOffsetX !== undefined) {
    delete res.failOffsetX;
    if (Array.isArray(props.failOffsetX)) {
      res.failOffsetXStart = props.failOffsetX[0];
      res.failOffsetXEnd = props.failOffsetX[1];
    } else if (props.failOffsetX < 0) {
      res.failOffsetXStart = props.failOffsetX;
    } else {
      res.failOffsetXEnd = props.failOffsetX;
    }
  }
  if (props.failOffsetY !== undefined) {
    delete res.failOffsetY;
    if (Array.isArray(props.failOffsetY)) {
      res.failOffsetYStart = props.failOffsetY[0];
      res.failOffsetYEnd = props.failOffsetY[1];
    } else if (props.failOffsetY < 0) {
      res.failOffsetYStart = props.failOffsetY;
    } else {
      res.failOffsetYEnd = props.failOffsetY;
    }
  }
  return res;
}
function managePanProps(props) {
  if (__DEV__) {
    validatePanGestureHandlerProps(props);
  }
  return transformPanGestureHandlerProps(props);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY3JlYXRlSGFuZGxlciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2dlc3R1cmVIYW5kbGVyQ29tbW9uIiwicGFuR2VzdHVyZUhhbmRsZXJQcm9wcyIsInBhbkdlc3R1cmVIYW5kbGVyQ3VzdG9tTmF0aXZlUHJvcHMiLCJwYW5IYW5kbGVyTmFtZSIsIlBhbkdlc3R1cmVIYW5kbGVyIiwiZGVmYXVsdCIsIm5hbWUiLCJhbGxvd2VkUHJvcHMiLCJjb25jYXQiLCJfdG9Db25zdW1hYmxlQXJyYXkyIiwiYmFzZUdlc3R1cmVIYW5kbGVyUHJvcHMiLCJjb25maWciLCJ0cmFuc2Zvcm1Qcm9wcyIsIm1hbmFnZVBhblByb3BzIiwiY3VzdG9tTmF0aXZlUHJvcHMiLCJ2YWxpZGF0ZVBhbkdlc3R1cmVIYW5kbGVyUHJvcHMiLCJwcm9wcyIsIkFycmF5IiwiaXNBcnJheSIsImFjdGl2ZU9mZnNldFgiLCJFcnJvciIsImFjdGl2ZU9mZnNldFkiLCJmYWlsT2Zmc2V0WCIsImZhaWxPZmZzZXRZIiwibWluRGlzdCIsInRyYW5zZm9ybVBhbkdlc3R1cmVIYW5kbGVyUHJvcHMiLCJyZXMiLCJPYmplY3QiLCJhc3NpZ24iLCJ1bmRlZmluZWQiLCJhY3RpdmVPZmZzZXRYU3RhcnQiLCJhY3RpdmVPZmZzZXRYRW5kIiwiYWN0aXZlT2Zmc2V0WVN0YXJ0IiwiYWN0aXZlT2Zmc2V0WUVuZCIsImZhaWxPZmZzZXRYU3RhcnQiLCJmYWlsT2Zmc2V0WEVuZCIsImZhaWxPZmZzZXRZU3RhcnQiLCJmYWlsT2Zmc2V0WUVuZCIsIl9fREVWX18iXSwic291cmNlcyI6WyJQYW5HZXN0dXJlSGFuZGxlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlSGFuZGxlciBmcm9tICcuL2NyZWF0ZUhhbmRsZXInO1xuaW1wb3J0IHtcbiAgQmFzZUdlc3R1cmVIYW5kbGVyUHJvcHMsXG4gIGJhc2VHZXN0dXJlSGFuZGxlclByb3BzLFxufSBmcm9tICcuL2dlc3R1cmVIYW5kbGVyQ29tbW9uJztcblxuZXhwb3J0IGNvbnN0IHBhbkdlc3R1cmVIYW5kbGVyUHJvcHMgPSBbXG4gICdhY3RpdmVPZmZzZXRZJyxcbiAgJ2FjdGl2ZU9mZnNldFgnLFxuICAnZmFpbE9mZnNldFknLFxuICAnZmFpbE9mZnNldFgnLFxuICAnbWluRGlzdCcsXG4gICdtaW5WZWxvY2l0eScsXG4gICdtaW5WZWxvY2l0eVgnLFxuICAnbWluVmVsb2NpdHlZJyxcbiAgJ21pblBvaW50ZXJzJyxcbiAgJ21heFBvaW50ZXJzJyxcbiAgJ2F2Z1RvdWNoZXMnLFxuICAnZW5hYmxlVHJhY2twYWRUd29GaW5nZXJHZXN0dXJlJyxcbiAgJ2FjdGl2YXRlQWZ0ZXJMb25nUHJlc3MnLFxuXSBhcyBjb25zdDtcblxuZXhwb3J0IGNvbnN0IHBhbkdlc3R1cmVIYW5kbGVyQ3VzdG9tTmF0aXZlUHJvcHMgPSBbXG4gICdhY3RpdmVPZmZzZXRZU3RhcnQnLFxuICAnYWN0aXZlT2Zmc2V0WUVuZCcsXG4gICdhY3RpdmVPZmZzZXRYU3RhcnQnLFxuICAnYWN0aXZlT2Zmc2V0WEVuZCcsXG4gICdmYWlsT2Zmc2V0WVN0YXJ0JyxcbiAgJ2ZhaWxPZmZzZXRZRW5kJyxcbiAgJ2ZhaWxPZmZzZXRYU3RhcnQnLFxuICAnZmFpbE9mZnNldFhFbmQnLFxuXSBhcyBjb25zdDtcblxuZXhwb3J0IHR5cGUgUGFuR2VzdHVyZUhhbmRsZXJFdmVudFBheWxvYWQgPSB7XG4gIC8qKlxuICAgKiBYIGNvb3JkaW5hdGUgb2YgdGhlIGN1cnJlbnQgcG9zaXRpb24gb2YgdGhlIHBvaW50ZXIgKGZpbmdlciBvciBhIGxlYWRpbmdcbiAgICogcG9pbnRlciB3aGVuIHRoZXJlIGFyZSBtdWx0aXBsZSBmaW5nZXJzIHBsYWNlZCkgcmVsYXRpdmUgdG8gdGhlIHZpZXdcbiAgICogYXR0YWNoZWQgdG8gdGhlIGhhbmRsZXIuIEV4cHJlc3NlZCBpbiBwb2ludCB1bml0cy5cbiAgICovXG4gIHg6IG51bWJlcjtcblxuICAvKipcbiAgICogWSBjb29yZGluYXRlIG9mIHRoZSBjdXJyZW50IHBvc2l0aW9uIG9mIHRoZSBwb2ludGVyIChmaW5nZXIgb3IgYSBsZWFkaW5nXG4gICAqIHBvaW50ZXIgd2hlbiB0aGVyZSBhcmUgbXVsdGlwbGUgZmluZ2VycyBwbGFjZWQpIHJlbGF0aXZlIHRvIHRoZSB2aWV3XG4gICAqIGF0dGFjaGVkIHRvIHRoZSBoYW5kbGVyLiBFeHByZXNzZWQgaW4gcG9pbnQgdW5pdHMuXG4gICAqL1xuICB5OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFggY29vcmRpbmF0ZSBvZiB0aGUgY3VycmVudCBwb3NpdGlvbiBvZiB0aGUgcG9pbnRlciAoZmluZ2VyIG9yIGEgbGVhZGluZ1xuICAgKiBwb2ludGVyIHdoZW4gdGhlcmUgYXJlIG11bHRpcGxlIGZpbmdlcnMgcGxhY2VkKSByZWxhdGl2ZSB0byB0aGUgd2luZG93LlxuICAgKiBUaGUgdmFsdWUgaXMgZXhwcmVzc2VkIGluIHBvaW50IHVuaXRzLiBJdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgaXQgaW5zdGVhZFxuICAgKiBvZiBgeGAgaW4gY2FzZXMgd2hlbiB0aGUgb3JpZ2luYWwgdmlldyBjYW4gYmUgdHJhbnNmb3JtZWQgYXMgYW4gZWZmZWN0IG9mXG4gICAqIHRoZSBnZXN0dXJlLlxuICAgKi9cbiAgYWJzb2x1dGVYOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFkgY29vcmRpbmF0ZSBvZiB0aGUgY3VycmVudCBwb3NpdGlvbiBvZiB0aGUgcG9pbnRlciAoZmluZ2VyIG9yIGEgbGVhZGluZ1xuICAgKiBwb2ludGVyIHdoZW4gdGhlcmUgYXJlIG11bHRpcGxlIGZpbmdlcnMgcGxhY2VkKSByZWxhdGl2ZSB0byB0aGUgd2luZG93LlxuICAgKiBUaGUgdmFsdWUgaXMgZXhwcmVzc2VkIGluIHBvaW50IHVuaXRzLiBJdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgaXQgaW5zdGVhZFxuICAgKiBvZiBgeWAgaW4gY2FzZXMgd2hlbiB0aGUgb3JpZ2luYWwgdmlldyBjYW4gYmUgdHJhbnNmb3JtZWQgYXMgYW5cbiAgICogZWZmZWN0IG9mIHRoZSBnZXN0dXJlLlxuICAgKi9cbiAgYWJzb2x1dGVZOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRyYW5zbGF0aW9uIG9mIHRoZSBwYW4gZ2VzdHVyZSBhbG9uZyBYIGF4aXMgYWNjdW11bGF0ZWQgb3ZlciB0aGUgdGltZSBvZlxuICAgKiB0aGUgZ2VzdHVyZS4gVGhlIHZhbHVlIGlzIGV4cHJlc3NlZCBpbiB0aGUgcG9pbnQgdW5pdHMuXG4gICAqL1xuICB0cmFuc2xhdGlvblg6IG51bWJlcjtcblxuICAvKipcbiAgICogVHJhbnNsYXRpb24gb2YgdGhlIHBhbiBnZXN0dXJlIGFsb25nIFkgYXhpcyBhY2N1bXVsYXRlZCBvdmVyIHRoZSB0aW1lIG9mXG4gICAqIHRoZSBnZXN0dXJlLiBUaGUgdmFsdWUgaXMgZXhwcmVzc2VkIGluIHRoZSBwb2ludCB1bml0cy5cbiAgICovXG4gIHRyYW5zbGF0aW9uWTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBWZWxvY2l0eSBvZiB0aGUgcGFuIGdlc3R1cmUgYWxvbmcgdGhlIFggYXhpcyBpbiB0aGUgY3VycmVudCBtb21lbnQuIFRoZVxuICAgKiB2YWx1ZSBpcyBleHByZXNzZWQgaW4gcG9pbnQgdW5pdHMgcGVyIHNlY29uZC5cbiAgICovXG4gIHZlbG9jaXR5WDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBWZWxvY2l0eSBvZiB0aGUgcGFuIGdlc3R1cmUgYWxvbmcgdGhlIFkgYXhpcyBpbiB0aGUgY3VycmVudCBtb21lbnQuIFRoZVxuICAgKiB2YWx1ZSBpcyBleHByZXNzZWQgaW4gcG9pbnQgdW5pdHMgcGVyIHNlY29uZC5cbiAgICovXG4gIHZlbG9jaXR5WTogbnVtYmVyO1xufTtcblxuaW50ZXJmYWNlIENvbW1vblBhblByb3BlcnRpZXMge1xuICAvKipcbiAgICogTWluaW11bSBkaXN0YW5jZSB0aGUgZmluZ2VyIChvciBtdWx0aXBsZSBmaW5nZXIpIG5lZWQgdG8gdHJhdmVsIGJlZm9yZSB0aGVcbiAgICogaGFuZGxlciBhY3RpdmF0ZXMuIEV4cHJlc3NlZCBpbiBwb2ludHMuXG4gICAqL1xuICBtaW5EaXN0PzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBBbmRyb2lkIG9ubHkuXG4gICAqL1xuICBhdmdUb3VjaGVzPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogRW5hYmxlcyB0d28tZmluZ2VyIGdlc3R1cmVzIG9uIHN1cHBvcnRlZCBkZXZpY2VzLCBmb3IgZXhhbXBsZSBpUGFkcyB3aXRoXG4gICAqIHRyYWNrcGFkcy4gSWYgbm90IGVuYWJsZWQgdGhlIGdlc3R1cmUgd2lsbCByZXF1aXJlIGNsaWNrICsgZHJhZywgd2l0aFxuICAgKiBlbmFibGVUcmFja3BhZFR3b0Zpbmdlckdlc3R1cmUgc3dpcGluZyB3aXRoIHR3byBmaW5nZXJzIHdpbGwgYWxzbyB0cmlnZ2VyXG4gICAqIHRoZSBnZXN0dXJlLlxuICAgKi9cbiAgZW5hYmxlVHJhY2twYWRUd29GaW5nZXJHZXN0dXJlPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogQSBudW1iZXIgb2YgZmluZ2VycyB0aGF0IGlzIHJlcXVpcmVkIHRvIGJlIHBsYWNlZCBiZWZvcmUgaGFuZGxlciBjYW5cbiAgICogYWN0aXZhdGUuIFNob3VsZCBiZSBhIGhpZ2hlciBvciBlcXVhbCB0byAwIGludGVnZXIuXG4gICAqL1xuICBtaW5Qb2ludGVycz86IG51bWJlcjtcblxuICAvKipcbiAgICogV2hlbiB0aGUgZ2l2ZW4gbnVtYmVyIG9mIGZpbmdlcnMgaXMgcGxhY2VkIG9uIHRoZSBzY3JlZW4gYW5kIGhhbmRsZXIgaGFzbid0XG4gICAqIHlldCBhY3RpdmF0ZWQgaXQgd2lsbCBmYWlsIHJlY29nbml6aW5nIHRoZSBnZXN0dXJlLiBTaG91bGQgYmUgYSBoaWdoZXIgb3JcbiAgICogZXF1YWwgdG8gMCBpbnRlZ2VyLlxuICAgKi9cbiAgbWF4UG9pbnRlcnM/OiBudW1iZXI7XG5cbiAgbWluVmVsb2NpdHk/OiBudW1iZXI7XG4gIG1pblZlbG9jaXR5WD86IG51bWJlcjtcbiAgbWluVmVsb2NpdHlZPzogbnVtYmVyO1xuICBhY3RpdmF0ZUFmdGVyTG9uZ1ByZXNzPzogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBhbkdlc3R1cmVDb25maWcgZXh0ZW5kcyBDb21tb25QYW5Qcm9wZXJ0aWVzIHtcbiAgYWN0aXZlT2Zmc2V0WVN0YXJ0PzogbnVtYmVyO1xuICBhY3RpdmVPZmZzZXRZRW5kPzogbnVtYmVyO1xuICBhY3RpdmVPZmZzZXRYU3RhcnQ/OiBudW1iZXI7XG4gIGFjdGl2ZU9mZnNldFhFbmQ/OiBudW1iZXI7XG4gIGZhaWxPZmZzZXRZU3RhcnQ/OiBudW1iZXI7XG4gIGZhaWxPZmZzZXRZRW5kPzogbnVtYmVyO1xuICBmYWlsT2Zmc2V0WFN0YXJ0PzogbnVtYmVyO1xuICBmYWlsT2Zmc2V0WEVuZD86IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYW5HZXN0dXJlSGFuZGxlclByb3BzXG4gIGV4dGVuZHMgQmFzZUdlc3R1cmVIYW5kbGVyUHJvcHM8UGFuR2VzdHVyZUhhbmRsZXJFdmVudFBheWxvYWQ+LFxuICAgIENvbW1vblBhblByb3BlcnRpZXMge1xuICAvKipcbiAgICogUmFuZ2UgYWxvbmcgWCBheGlzIChpbiBwb2ludHMpIHdoZXJlIGZpbmdlcnMgdHJhdmVscyB3aXRob3V0IGFjdGl2YXRpb24gb2ZcbiAgICogaGFuZGxlci4gTW92aW5nIG91dHNpZGUgb2YgdGhpcyByYW5nZSBpbXBsaWVzIGFjdGl2YXRpb24gb2YgaGFuZGxlci4gUmFuZ2VcbiAgICogY2FuIGJlIGdpdmVuIGFzIGFuIGFycmF5IG9yIGEgc2luZ2xlIG51bWJlci4gSWYgcmFuZ2UgaXMgc2V0IGFzIGFuIGFycmF5LFxuICAgKiBmaXJzdCB2YWx1ZSBtdXN0IGJlIGxvd2VyIG9yIGVxdWFsIHRvIDAsIGEgdGhlIHNlY29uZCBvbmUgaGlnaGVyIG9yIGVxdWFsXG4gICAqIHRvIDAuIElmIG9ubHkgb25lIG51bWJlciBgcGAgaXMgZ2l2ZW4gYSByYW5nZSBvZiBgKC1pbmYsIHApYCB3aWxsIGJlIHVzZWRcbiAgICogaWYgYHBgIGlzIGhpZ2hlciBvciBlcXVhbCB0byAwIGFuZCBgKC1wLCBpbmYpYCBvdGhlcndpc2UuXG4gICAqL1xuICBhY3RpdmVPZmZzZXRZPzogbnVtYmVyIHwgbnVtYmVyW107XG5cbiAgLyoqXG4gICAqIFJhbmdlIGFsb25nIFggYXhpcyAoaW4gcG9pbnRzKSB3aGVyZSBmaW5nZXJzIHRyYXZlbHMgd2l0aG91dCBhY3RpdmF0aW9uIG9mXG4gICAqIGhhbmRsZXIuIE1vdmluZyBvdXRzaWRlIG9mIHRoaXMgcmFuZ2UgaW1wbGllcyBhY3RpdmF0aW9uIG9mIGhhbmRsZXIuIFJhbmdlXG4gICAqIGNhbiBiZSBnaXZlbiBhcyBhbiBhcnJheSBvciBhIHNpbmdsZSBudW1iZXIuIElmIHJhbmdlIGlzIHNldCBhcyBhbiBhcnJheSxcbiAgICogZmlyc3QgdmFsdWUgbXVzdCBiZSBsb3dlciBvciBlcXVhbCB0byAwLCBhIHRoZSBzZWNvbmQgb25lIGhpZ2hlciBvciBlcXVhbFxuICAgKiB0byAwLiBJZiBvbmx5IG9uZSBudW1iZXIgYHBgIGlzIGdpdmVuIGEgcmFuZ2Ugb2YgYCgtaW5mLCBwKWAgd2lsbCBiZSB1c2VkXG4gICAqIGlmIGBwYCBpcyBoaWdoZXIgb3IgZXF1YWwgdG8gMCBhbmQgYCgtcCwgaW5mKWAgb3RoZXJ3aXNlLlxuICAgKi9cbiAgYWN0aXZlT2Zmc2V0WD86IG51bWJlciB8IG51bWJlcltdO1xuXG4gIC8qKlxuICAgKiBXaGVuIHRoZSBmaW5nZXIgbW92ZXMgb3V0c2lkZSB0aGlzIHJhbmdlIChpbiBwb2ludHMpIGFsb25nIFkgYXhpcyBhbmRcbiAgICogaGFuZGxlciBoYXNuJ3QgeWV0IGFjdGl2YXRlZCBpdCB3aWxsIGZhaWwgcmVjb2duaXppbmcgdGhlIGdlc3R1cmUuIFJhbmdlXG4gICAqIGNhbiBiZSBnaXZlbiBhcyBhbiBhcnJheSBvciBhIHNpbmdsZSBudW1iZXIuIElmIHJhbmdlIGlzIHNldCBhcyBhbiBhcnJheSxcbiAgICogZmlyc3QgdmFsdWUgbXVzdCBiZSBsb3dlciBvciBlcXVhbCB0byAwLCBhIHRoZSBzZWNvbmQgb25lIGhpZ2hlciBvciBlcXVhbFxuICAgKiB0byAwLiBJZiBvbmx5IG9uZSBudW1iZXIgYHBgIGlzIGdpdmVuIGEgcmFuZ2Ugb2YgYCgtaW5mLCBwKWAgd2lsbCBiZSB1c2VkXG4gICAqIGlmIGBwYCBpcyBoaWdoZXIgb3IgZXF1YWwgdG8gMCBhbmQgYCgtcCwgaW5mKWAgb3RoZXJ3aXNlLlxuICAgKi9cbiAgZmFpbE9mZnNldFk/OiBudW1iZXIgfCBudW1iZXJbXTtcblxuICAvKipcbiAgICogV2hlbiB0aGUgZmluZ2VyIG1vdmVzIG91dHNpZGUgdGhpcyByYW5nZSAoaW4gcG9pbnRzKSBhbG9uZyBYIGF4aXMgYW5kXG4gICAqIGhhbmRsZXIgaGFzbid0IHlldCBhY3RpdmF0ZWQgaXQgd2lsbCBmYWlsIHJlY29nbml6aW5nIHRoZSBnZXN0dXJlLiBSYW5nZVxuICAgKiBjYW4gYmUgZ2l2ZW4gYXMgYW4gYXJyYXkgb3IgYSBzaW5nbGUgbnVtYmVyLiBJZiByYW5nZSBpcyBzZXQgYXMgYW4gYXJyYXksXG4gICAqIGZpcnN0IHZhbHVlIG11c3QgYmUgbG93ZXIgb3IgZXF1YWwgdG8gMCwgYSB0aGUgc2Vjb25kIG9uZSBoaWdoZXIgb3IgZXF1YWxcbiAgICogdG8gMC4gSWYgb25seSBvbmUgbnVtYmVyIGBwYCBpcyBnaXZlbiBhIHJhbmdlIG9mIGAoLWluZiwgcClgIHdpbGwgYmUgdXNlZFxuICAgKiBpZiBgcGAgaXMgaGlnaGVyIG9yIGVxdWFsIHRvIDAgYW5kIGAoLXAsIGluZilgIG90aGVyd2lzZS5cbiAgICovXG4gIGZhaWxPZmZzZXRYPzogbnVtYmVyIHwgbnVtYmVyW107XG59XG5cbmV4cG9ydCBjb25zdCBwYW5IYW5kbGVyTmFtZSA9ICdQYW5HZXN0dXJlSGFuZGxlcic7XG5cbmV4cG9ydCB0eXBlIFBhbkdlc3R1cmVIYW5kbGVyID0gdHlwZW9mIFBhbkdlc3R1cmVIYW5kbGVyO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmUgLS0gYmFja3dhcmQgY29tcGF0aWJpbGl0eTsgc2VlIGRlc2NyaXB0aW9uIG9uIHRoZSB0b3Agb2YgZ2VzdHVyZUhhbmRsZXJDb21tb24udHMgZmlsZVxuZXhwb3J0IGNvbnN0IFBhbkdlc3R1cmVIYW5kbGVyID0gY3JlYXRlSGFuZGxlcjxcbiAgUGFuR2VzdHVyZUhhbmRsZXJQcm9wcyxcbiAgUGFuR2VzdHVyZUhhbmRsZXJFdmVudFBheWxvYWRcbj4oe1xuICBuYW1lOiBwYW5IYW5kbGVyTmFtZSxcbiAgYWxsb3dlZFByb3BzOiBbXG4gICAgLi4uYmFzZUdlc3R1cmVIYW5kbGVyUHJvcHMsXG4gICAgLi4ucGFuR2VzdHVyZUhhbmRsZXJQcm9wcyxcbiAgXSBhcyBjb25zdCxcbiAgY29uZmlnOiB7fSxcbiAgdHJhbnNmb3JtUHJvcHM6IG1hbmFnZVBhblByb3BzLFxuICBjdXN0b21OYXRpdmVQcm9wczogcGFuR2VzdHVyZUhhbmRsZXJDdXN0b21OYXRpdmVQcm9wcyxcbn0pO1xuXG5mdW5jdGlvbiB2YWxpZGF0ZVBhbkdlc3R1cmVIYW5kbGVyUHJvcHMocHJvcHM6IFBhbkdlc3R1cmVIYW5kbGVyUHJvcHMpIHtcbiAgaWYgKFxuICAgIEFycmF5LmlzQXJyYXkocHJvcHMuYWN0aXZlT2Zmc2V0WCkgJiZcbiAgICAocHJvcHMuYWN0aXZlT2Zmc2V0WFswXSA+IDAgfHwgcHJvcHMuYWN0aXZlT2Zmc2V0WFsxXSA8IDApXG4gICkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBGaXJzdCBlbGVtZW50IG9mIGFjdGl2ZU9mZnNldFggc2hvdWxkIGJlIG5lZ2F0aXZlLCBhIHRoZSBzZWNvbmQgb25lIHNob3VsZCBiZSBwb3NpdGl2ZWBcbiAgICApO1xuICB9XG5cbiAgaWYgKFxuICAgIEFycmF5LmlzQXJyYXkocHJvcHMuYWN0aXZlT2Zmc2V0WSkgJiZcbiAgICAocHJvcHMuYWN0aXZlT2Zmc2V0WVswXSA+IDAgfHwgcHJvcHMuYWN0aXZlT2Zmc2V0WVsxXSA8IDApXG4gICkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBGaXJzdCBlbGVtZW50IG9mIGFjdGl2ZU9mZnNldFkgc2hvdWxkIGJlIG5lZ2F0aXZlLCBhIHRoZSBzZWNvbmQgb25lIHNob3VsZCBiZSBwb3NpdGl2ZWBcbiAgICApO1xuICB9XG5cbiAgaWYgKFxuICAgIEFycmF5LmlzQXJyYXkocHJvcHMuZmFpbE9mZnNldFgpICYmXG4gICAgKHByb3BzLmZhaWxPZmZzZXRYWzBdID4gMCB8fCBwcm9wcy5mYWlsT2Zmc2V0WFsxXSA8IDApXG4gICkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBGaXJzdCBlbGVtZW50IG9mIGZhaWxPZmZzZXRYIHNob3VsZCBiZSBuZWdhdGl2ZSwgYSB0aGUgc2Vjb25kIG9uZSBzaG91bGQgYmUgcG9zaXRpdmVgXG4gICAgKTtcbiAgfVxuXG4gIGlmIChcbiAgICBBcnJheS5pc0FycmF5KHByb3BzLmZhaWxPZmZzZXRZKSAmJlxuICAgIChwcm9wcy5mYWlsT2Zmc2V0WVswXSA+IDAgfHwgcHJvcHMuZmFpbE9mZnNldFlbMV0gPCAwKVxuICApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgRmlyc3QgZWxlbWVudCBvZiBmYWlsT2Zmc2V0WSBzaG91bGQgYmUgbmVnYXRpdmUsIGEgdGhlIHNlY29uZCBvbmUgc2hvdWxkIGJlIHBvc2l0aXZlYFxuICAgICk7XG4gIH1cblxuICBpZiAocHJvcHMubWluRGlzdCAmJiAocHJvcHMuZmFpbE9mZnNldFggfHwgcHJvcHMuZmFpbE9mZnNldFkpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEl0IGlzIG5vdCBzdXBwb3J0ZWQgdG8gdXNlIG1pbkRpc3Qgd2l0aCBmYWlsT2Zmc2V0WCBvciBmYWlsT2Zmc2V0WSwgdXNlIGFjdGl2ZU9mZnNldFggYW5kIGFjdGl2ZU9mZnNldFkgaW5zdGVhZGBcbiAgICApO1xuICB9XG5cbiAgaWYgKHByb3BzLm1pbkRpc3QgJiYgKHByb3BzLmFjdGl2ZU9mZnNldFggfHwgcHJvcHMuYWN0aXZlT2Zmc2V0WSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgSXQgaXMgbm90IHN1cHBvcnRlZCB0byB1c2UgbWluRGlzdCB3aXRoIGFjdGl2ZU9mZnNldFggb3IgYWN0aXZlT2Zmc2V0WWBcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybVBhbkdlc3R1cmVIYW5kbGVyUHJvcHMocHJvcHM6IFBhbkdlc3R1cmVIYW5kbGVyUHJvcHMpIHtcbiAgdHlwZSBJbnRlcm5hbFBhbkdIS2V5cyA9XG4gICAgfCAnYWN0aXZlT2Zmc2V0WFN0YXJ0J1xuICAgIHwgJ2FjdGl2ZU9mZnNldFhFbmQnXG4gICAgfCAnZmFpbE9mZnNldFhTdGFydCdcbiAgICB8ICdmYWlsT2Zmc2V0WEVuZCdcbiAgICB8ICdhY3RpdmVPZmZzZXRZU3RhcnQnXG4gICAgfCAnYWN0aXZlT2Zmc2V0WUVuZCdcbiAgICB8ICdmYWlsT2Zmc2V0WVN0YXJ0J1xuICAgIHwgJ2ZhaWxPZmZzZXRZRW5kJztcbiAgdHlwZSBQYW5HZXN0dXJlSGFuZGxlckludGVybmFsUHJvcHMgPSBQYW5HZXN0dXJlSGFuZGxlclByb3BzICZcbiAgICBQYXJ0aWFsPFJlY29yZDxJbnRlcm5hbFBhbkdIS2V5cywgbnVtYmVyPj47XG5cbiAgY29uc3QgcmVzOiBQYW5HZXN0dXJlSGFuZGxlckludGVybmFsUHJvcHMgPSB7IC4uLnByb3BzIH07XG5cbiAgaWYgKHByb3BzLmFjdGl2ZU9mZnNldFggIT09IHVuZGVmaW5lZCkge1xuICAgIGRlbGV0ZSByZXMuYWN0aXZlT2Zmc2V0WDtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wcy5hY3RpdmVPZmZzZXRYKSkge1xuICAgICAgcmVzLmFjdGl2ZU9mZnNldFhTdGFydCA9IHByb3BzLmFjdGl2ZU9mZnNldFhbMF07XG4gICAgICByZXMuYWN0aXZlT2Zmc2V0WEVuZCA9IHByb3BzLmFjdGl2ZU9mZnNldFhbMV07XG4gICAgfSBlbHNlIGlmIChwcm9wcy5hY3RpdmVPZmZzZXRYIDwgMCkge1xuICAgICAgcmVzLmFjdGl2ZU9mZnNldFhTdGFydCA9IHByb3BzLmFjdGl2ZU9mZnNldFg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcy5hY3RpdmVPZmZzZXRYRW5kID0gcHJvcHMuYWN0aXZlT2Zmc2V0WDtcbiAgICB9XG4gIH1cblxuICBpZiAocHJvcHMuYWN0aXZlT2Zmc2V0WSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZGVsZXRlIHJlcy5hY3RpdmVPZmZzZXRZO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHByb3BzLmFjdGl2ZU9mZnNldFkpKSB7XG4gICAgICByZXMuYWN0aXZlT2Zmc2V0WVN0YXJ0ID0gcHJvcHMuYWN0aXZlT2Zmc2V0WVswXTtcbiAgICAgIHJlcy5hY3RpdmVPZmZzZXRZRW5kID0gcHJvcHMuYWN0aXZlT2Zmc2V0WVsxXTtcbiAgICB9IGVsc2UgaWYgKHByb3BzLmFjdGl2ZU9mZnNldFkgPCAwKSB7XG4gICAgICByZXMuYWN0aXZlT2Zmc2V0WVN0YXJ0ID0gcHJvcHMuYWN0aXZlT2Zmc2V0WTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzLmFjdGl2ZU9mZnNldFlFbmQgPSBwcm9wcy5hY3RpdmVPZmZzZXRZO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcm9wcy5mYWlsT2Zmc2V0WCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZGVsZXRlIHJlcy5mYWlsT2Zmc2V0WDtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wcy5mYWlsT2Zmc2V0WCkpIHtcbiAgICAgIHJlcy5mYWlsT2Zmc2V0WFN0YXJ0ID0gcHJvcHMuZmFpbE9mZnNldFhbMF07XG4gICAgICByZXMuZmFpbE9mZnNldFhFbmQgPSBwcm9wcy5mYWlsT2Zmc2V0WFsxXTtcbiAgICB9IGVsc2UgaWYgKHByb3BzLmZhaWxPZmZzZXRYIDwgMCkge1xuICAgICAgcmVzLmZhaWxPZmZzZXRYU3RhcnQgPSBwcm9wcy5mYWlsT2Zmc2V0WDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzLmZhaWxPZmZzZXRYRW5kID0gcHJvcHMuZmFpbE9mZnNldFg7XG4gICAgfVxuICB9XG5cbiAgaWYgKHByb3BzLmZhaWxPZmZzZXRZICE9PSB1bmRlZmluZWQpIHtcbiAgICBkZWxldGUgcmVzLmZhaWxPZmZzZXRZO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHByb3BzLmZhaWxPZmZzZXRZKSkge1xuICAgICAgcmVzLmZhaWxPZmZzZXRZU3RhcnQgPSBwcm9wcy5mYWlsT2Zmc2V0WVswXTtcbiAgICAgIHJlcy5mYWlsT2Zmc2V0WUVuZCA9IHByb3BzLmZhaWxPZmZzZXRZWzFdO1xuICAgIH0gZWxzZSBpZiAocHJvcHMuZmFpbE9mZnNldFkgPCAwKSB7XG4gICAgICByZXMuZmFpbE9mZnNldFlTdGFydCA9IHByb3BzLmZhaWxPZmZzZXRZO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMuZmFpbE9mZnNldFlFbmQgPSBwcm9wcy5mYWlsT2Zmc2V0WTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFuYWdlUGFuUHJvcHMocHJvcHM6IFBhbkdlc3R1cmVIYW5kbGVyUHJvcHMpIHtcbiAgaWYgKF9fREVWX18pIHtcbiAgICB2YWxpZGF0ZVBhbkdlc3R1cmVIYW5kbGVyUHJvcHMocHJvcHMpO1xuICB9XG4gIHJldHVybiB0cmFuc2Zvcm1QYW5HZXN0dXJlSGFuZGxlclByb3BzKHByb3BzKTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsSUFBQUEsY0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMscUJBQUEsR0FBQUQsT0FBQTs7Ozs7O0FBS08sSUFBTUUsc0JBQXNCLEdBQUcsQ0FDcEMsZUFEb0MsRUFFcEMsZUFGb0MsRUFHcEMsYUFIb0MsRUFJcEMsYUFKb0MsRUFLcEMsU0FMb0MsRUFNcEMsYUFOb0MsRUFPcEMsY0FQb0MsRUFRcEMsY0FSb0MsRUFTcEMsYUFUb0MsRUFVcEMsYUFWb0MsRUFXcEMsWUFYb0MsRUFZcEMsZ0NBWm9DLEVBYXBDLHdCQWJvQyxDQUEvQjs7QUFnQkEsSUFBTUMsa0NBQWtDLEdBQUcsQ0FDaEQsb0JBRGdELEVBRWhELGtCQUZnRCxFQUdoRCxvQkFIZ0QsRUFJaEQsa0JBSmdELEVBS2hELGtCQUxnRCxFQU1oRCxnQkFOZ0QsRUFPaEQsa0JBUGdELEVBUWhELGdCQVJnRCxDQUEzQzs7QUFtS0EsSUFBTUMsY0FBYyxHQUFHLG1CQUF2Qjs7QUFJQSxJQUFNQyxpQkFBaUIsR0FBRyxJQUFBUCxjQUFBLENBQUFRLE9BQUEsRUFHL0I7RUFDQUMsSUFBSSxFQUFFSCxjQUROO0VBRUFJLFlBQVksS0FBQUMsTUFBQSxLQUFBQyxtQkFBQSxDQUFBSixPQUFBLEVBQ1BMLHFCQUFBLENBQUFVLHVCQURTLEdBRVRULHNCQUZTLENBRmQ7RUFNQVUsTUFBTSxFQUFFLEVBTlI7RUFPQUMsY0FBYyxFQUFFQyxjQVBoQjtFQVFBQyxpQkFBaUIsRUFBRVo7QUFSbkIsQ0FIK0IsQ0FBMUI7O0FBY1AsU0FBU2EsOEJBQVRBLENBQXdDQyxLQUF4QyxFQUF1RTtFQUNyRSxJQUNFQyxLQUFLLENBQUNDLE9BQU4sQ0FBY0YsS0FBSyxDQUFDRyxhQUFwQixNQUNDSCxLQUFLLENBQUNHLGFBQU4sQ0FBb0IsQ0FBcEIsSUFBeUIsQ0FBekIsSUFBOEJILEtBQUssQ0FBQ0csYUFBTixDQUFvQixDQUFwQixJQUF5QixDQUR4RCxDQURGLEVBR0U7SUFDQSxNQUFNLElBQUlDLEtBQUosQ0FDSCx3RkFERyxDQUFOO0VBR0Q7RUFFRCxJQUNFSCxLQUFLLENBQUNDLE9BQU4sQ0FBY0YsS0FBSyxDQUFDSyxhQUFwQixNQUNDTCxLQUFLLENBQUNLLGFBQU4sQ0FBb0IsQ0FBcEIsSUFBeUIsQ0FBekIsSUFBOEJMLEtBQUssQ0FBQ0ssYUFBTixDQUFvQixDQUFwQixJQUF5QixDQUR4RCxDQURGLEVBR0U7SUFDQSxNQUFNLElBQUlELEtBQUosQ0FDSCx3RkFERyxDQUFOO0VBR0Q7RUFFRCxJQUNFSCxLQUFLLENBQUNDLE9BQU4sQ0FBY0YsS0FBSyxDQUFDTSxXQUFwQixNQUNDTixLQUFLLENBQUNNLFdBQU4sQ0FBa0IsQ0FBbEIsSUFBdUIsQ0FBdkIsSUFBNEJOLEtBQUssQ0FBQ00sV0FBTixDQUFrQixDQUFsQixJQUF1QixDQURwRCxDQURGLEVBR0U7SUFDQSxNQUFNLElBQUlGLEtBQUosQ0FDSCxzRkFERyxDQUFOO0VBR0Q7RUFFRCxJQUNFSCxLQUFLLENBQUNDLE9BQU4sQ0FBY0YsS0FBSyxDQUFDTyxXQUFwQixNQUNDUCxLQUFLLENBQUNPLFdBQU4sQ0FBa0IsQ0FBbEIsSUFBdUIsQ0FBdkIsSUFBNEJQLEtBQUssQ0FBQ08sV0FBTixDQUFrQixDQUFsQixJQUF1QixDQURwRCxDQURGLEVBR0U7SUFDQSxNQUFNLElBQUlILEtBQUosQ0FDSCxzRkFERyxDQUFOO0VBR0Q7RUFFRCxJQUFJSixLQUFLLENBQUNRLE9BQU4sS0FBa0JSLEtBQUssQ0FBQ00sV0FBTixJQUFxQk4sS0FBSyxDQUFDTyxXQUE3QyxDQUFKLEVBQStEO0lBQzdELE1BQU0sSUFBSUgsS0FBSixDQUNILGlIQURHLENBQU47RUFHRDtFQUVELElBQUlKLEtBQUssQ0FBQ1EsT0FBTixLQUFrQlIsS0FBSyxDQUFDRyxhQUFOLElBQXVCSCxLQUFLLENBQUNLLGFBQS9DLENBQUosRUFBbUU7SUFDakUsTUFBTSxJQUFJRCxLQUFKLENBQ0gsd0VBREcsQ0FBTjtFQUdEO0FBQ0Y7QUFFRCxTQUFTSywrQkFBVEEsQ0FBeUNULEtBQXpDLEVBQXdFO0VBYXRFLElBQU1VLEdBQW1DLEdBQUFDLE1BQUEsQ0FBQUMsTUFBQSxLQUFRWixLQUFBLENBQWpEO0VBRUEsSUFBSUEsS0FBSyxDQUFDRyxhQUFOLEtBQXdCVSxTQUE1QixFQUF1QztJQUNyQyxPQUFPSCxHQUFHLENBQUNQLGFBQVg7SUFDQSxJQUFJRixLQUFLLENBQUNDLE9BQU4sQ0FBY0YsS0FBSyxDQUFDRyxhQUFwQixDQUFKLEVBQXdDO01BQ3RDTyxHQUFHLENBQUNJLGtCQUFKLEdBQXlCZCxLQUFLLENBQUNHLGFBQU4sQ0FBb0IsQ0FBcEIsQ0FBekI7TUFDQU8sR0FBRyxDQUFDSyxnQkFBSixHQUF1QmYsS0FBSyxDQUFDRyxhQUFOLENBQW9CLENBQXBCLENBQXZCO0lBQ0QsQ0FIRCxNQUdPLElBQUlILEtBQUssQ0FBQ0csYUFBTixHQUFzQixDQUExQixFQUE2QjtNQUNsQ08sR0FBRyxDQUFDSSxrQkFBSixHQUF5QmQsS0FBSyxDQUFDRyxhQUEvQjtJQUNELENBRk0sTUFFQTtNQUNMTyxHQUFHLENBQUNLLGdCQUFKLEdBQXVCZixLQUFLLENBQUNHLGFBQTdCO0lBQ0Q7RUFDRjtFQUVELElBQUlILEtBQUssQ0FBQ0ssYUFBTixLQUF3QlEsU0FBNUIsRUFBdUM7SUFDckMsT0FBT0gsR0FBRyxDQUFDTCxhQUFYO0lBQ0EsSUFBSUosS0FBSyxDQUFDQyxPQUFOLENBQWNGLEtBQUssQ0FBQ0ssYUFBcEIsQ0FBSixFQUF3QztNQUN0Q0ssR0FBRyxDQUFDTSxrQkFBSixHQUF5QmhCLEtBQUssQ0FBQ0ssYUFBTixDQUFvQixDQUFwQixDQUF6QjtNQUNBSyxHQUFHLENBQUNPLGdCQUFKLEdBQXVCakIsS0FBSyxDQUFDSyxhQUFOLENBQW9CLENBQXBCLENBQXZCO0lBQ0QsQ0FIRCxNQUdPLElBQUlMLEtBQUssQ0FBQ0ssYUFBTixHQUFzQixDQUExQixFQUE2QjtNQUNsQ0ssR0FBRyxDQUFDTSxrQkFBSixHQUF5QmhCLEtBQUssQ0FBQ0ssYUFBL0I7SUFDRCxDQUZNLE1BRUE7TUFDTEssR0FBRyxDQUFDTyxnQkFBSixHQUF1QmpCLEtBQUssQ0FBQ0ssYUFBN0I7SUFDRDtFQUNGO0VBRUQsSUFBSUwsS0FBSyxDQUFDTSxXQUFOLEtBQXNCTyxTQUExQixFQUFxQztJQUNuQyxPQUFPSCxHQUFHLENBQUNKLFdBQVg7SUFDQSxJQUFJTCxLQUFLLENBQUNDLE9BQU4sQ0FBY0YsS0FBSyxDQUFDTSxXQUFwQixDQUFKLEVBQXNDO01BQ3BDSSxHQUFHLENBQUNRLGdCQUFKLEdBQXVCbEIsS0FBSyxDQUFDTSxXQUFOLENBQWtCLENBQWxCLENBQXZCO01BQ0FJLEdBQUcsQ0FBQ1MsY0FBSixHQUFxQm5CLEtBQUssQ0FBQ00sV0FBTixDQUFrQixDQUFsQixDQUFyQjtJQUNELENBSEQsTUFHTyxJQUFJTixLQUFLLENBQUNNLFdBQU4sR0FBb0IsQ0FBeEIsRUFBMkI7TUFDaENJLEdBQUcsQ0FBQ1EsZ0JBQUosR0FBdUJsQixLQUFLLENBQUNNLFdBQTdCO0lBQ0QsQ0FGTSxNQUVBO01BQ0xJLEdBQUcsQ0FBQ1MsY0FBSixHQUFxQm5CLEtBQUssQ0FBQ00sV0FBM0I7SUFDRDtFQUNGO0VBRUQsSUFBSU4sS0FBSyxDQUFDTyxXQUFOLEtBQXNCTSxTQUExQixFQUFxQztJQUNuQyxPQUFPSCxHQUFHLENBQUNILFdBQVg7SUFDQSxJQUFJTixLQUFLLENBQUNDLE9BQU4sQ0FBY0YsS0FBSyxDQUFDTyxXQUFwQixDQUFKLEVBQXNDO01BQ3BDRyxHQUFHLENBQUNVLGdCQUFKLEdBQXVCcEIsS0FBSyxDQUFDTyxXQUFOLENBQWtCLENBQWxCLENBQXZCO01BQ0FHLEdBQUcsQ0FBQ1csY0FBSixHQUFxQnJCLEtBQUssQ0FBQ08sV0FBTixDQUFrQixDQUFsQixDQUFyQjtJQUNELENBSEQsTUFHTyxJQUFJUCxLQUFLLENBQUNPLFdBQU4sR0FBb0IsQ0FBeEIsRUFBMkI7TUFDaENHLEdBQUcsQ0FBQ1UsZ0JBQUosR0FBdUJwQixLQUFLLENBQUNPLFdBQTdCO0lBQ0QsQ0FGTSxNQUVBO01BQ0xHLEdBQUcsQ0FBQ1csY0FBSixHQUFxQnJCLEtBQUssQ0FBQ08sV0FBM0I7SUFDRDtFQUNGO0VBRUQsT0FBT0csR0FBUDtBQUNEO0FBRU0sU0FBU2IsY0FBVEEsQ0FBd0JHLEtBQXhCLEVBQXVEO0VBQzVELElBQUlzQixPQUFKLEVBQWE7SUFDWHZCLDhCQUE4QixDQUFDQyxLQUFELENBQTlCO0VBQ0Q7RUFDRCxPQUFPUywrQkFBK0IsQ0FBQ1QsS0FBRCxDQUF0QztBQUNEIiwiaWdub3JlTGlzdCI6W119