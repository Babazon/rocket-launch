42feeaf4e6d2e1cfcef279c72e7aee39
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _reactNative = require("react-native");
var _Batchinator = _interopRequireDefault(require("../Interaction/Batchinator"));
var _clamp = _interopRequireDefault(require("../Utilities/clamp"));
var _infoLog = _interopRequireDefault(require("../Utilities/infoLog"));
var _CellRenderMask = require("./CellRenderMask");
var _ChildListCollection = _interopRequireDefault(require("./ChildListCollection"));
var _FillRateHelper = _interopRequireDefault(require("./FillRateHelper"));
var _ListMetricsAggregator = _interopRequireDefault(require("./ListMetricsAggregator"));
var _StateSafePureComponent = _interopRequireDefault(require("./StateSafePureComponent"));
var _ViewabilityHelper = _interopRequireDefault(require("./ViewabilityHelper"));
var _VirtualizedListCellRenderer = _interopRequireDefault(require("./VirtualizedListCellRenderer"));
var _VirtualizedListContext = require("./VirtualizedListContext.js");
var _VirtualizeUtils = require("./VirtualizeUtils");
var _invariant = _interopRequireDefault(require("invariant"));
var _nullthrows = _interopRequireDefault(require("nullthrows"));
var React = _interopRequireWildcard(require("react"));
var _VirtualizedListProps = require("./VirtualizedListProps");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var ON_EDGE_REACHED_EPSILON = 0.001;
var _usedIndexForKey = false;
var _keylessItemComponentName = '';
function getScrollingThreshold(threshold, visibleLength) {
  return threshold * visibleLength / 2;
}
var VirtualizedList = function (_StateSafePureCompone) {
  function VirtualizedList(_props) {
    var _this$props$updateCel, _this$props$maintainV, _this$props$maintainV2;
    var _this;
    (0, _classCallCheck2.default)(this, VirtualizedList);
    _this = _callSuper(this, VirtualizedList, [_props]);
    _this._getScrollMetrics = function () {
      return _this._scrollMetrics;
    };
    _this._getOutermostParentListRef = function () {
      if (_this._isNestedWithSameOrientation()) {
        return _this.context.getOutermostParentListRef();
      } else {
        return _this;
      }
    };
    _this._registerAsNestedChild = function (childList) {
      _this._nestedChildLists.add(childList.ref, childList.cellKey);
      if (_this._hasInteracted) {
        childList.ref.recordInteraction();
      }
    };
    _this._unregisterAsNestedChild = function (childList) {
      _this._nestedChildLists.remove(childList.ref);
    };
    _this._onUpdateSeparators = function (keys, newProps) {
      keys.forEach(function (key) {
        var ref = key != null && _this._cellRefs[key];
        ref && ref.updateSeparatorProps(newProps);
      });
    };
    _this._getSpacerKey = function (isVertical) {
      return isVertical ? 'height' : 'width';
    };
    _this._cellRefs = {};
    _this._listMetrics = new _ListMetricsAggregator.default();
    _this._footerLength = 0;
    _this._hasTriggeredInitialScrollToIndex = false;
    _this._hasInteracted = false;
    _this._hasMore = false;
    _this._hasWarned = {};
    _this._headerLength = 0;
    _this._hiPriInProgress = false;
    _this._indicesToKeys = new Map();
    _this._lastFocusedCellKey = null;
    _this._nestedChildLists = new _ChildListCollection.default();
    _this._offsetFromParentVirtualizedList = 0;
    _this._pendingViewabilityUpdate = false;
    _this._prevParentOffset = 0;
    _this._scrollMetrics = {
      dOffset: 0,
      dt: 10,
      offset: 0,
      timestamp: 0,
      velocity: 0,
      visibleLength: 0,
      zoomScale: 1
    };
    _this._scrollRef = null;
    _this._sentStartForContentLength = 0;
    _this._sentEndForContentLength = 0;
    _this._viewabilityTuples = [];
    _this._captureScrollRef = function (ref) {
      _this._scrollRef = ref;
    };
    _this._defaultRenderScrollComponent = function (props) {
      var onRefresh = props.onRefresh;
      if (_this._isNestedWithSameOrientation()) {
        return (0, _jsxRuntime.jsx)(_reactNative.View, Object.assign({}, props));
      } else if (onRefresh) {
        var _props$refreshing;
        (0, _invariant.default)(typeof props.refreshing === 'boolean', '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' + JSON.stringify((_props$refreshing = props.refreshing) != null ? _props$refreshing : 'undefined') + '`');
        return (0, _jsxRuntime.jsx)(_reactNative.ScrollView, Object.assign({}, props, {
          refreshControl: props.refreshControl == null ? (0, _jsxRuntime.jsx)(_reactNative.RefreshControl, {
            refreshing: props.refreshing,
            onRefresh: onRefresh,
            progressViewOffset: props.progressViewOffset
          }) : props.refreshControl
        }));
      } else {
        return (0, _jsxRuntime.jsx)(_reactNative.ScrollView, Object.assign({}, props));
      }
    };
    _this._onCellLayout = function (e, cellKey, cellIndex) {
      var layoutHasChanged = _this._listMetrics.notifyCellLayout({
        cellIndex: cellIndex,
        cellKey: cellKey,
        layout: e.nativeEvent.layout,
        orientation: _this._orientation()
      });
      if (layoutHasChanged) {
        _this._scheduleCellsToRenderUpdate();
      }
      _this._triggerRemeasureForChildListsInCell(cellKey);
      _this._computeBlankness();
      _this._updateViewableItems(_this.props, _this.state.cellsAroundViewport);
    };
    _this._onCellUnmount = function (cellKey) {
      delete _this._cellRefs[cellKey];
      _this._listMetrics.notifyCellUnmounted(cellKey);
    };
    _this._onLayout = function (e) {
      if (_this._isNestedWithSameOrientation()) {
        _this.measureLayoutRelativeToContainingList();
      } else {
        _this._scrollMetrics.visibleLength = _this._selectLength(e.nativeEvent.layout);
      }
      _this.props.onLayout && _this.props.onLayout(e);
      _this._scheduleCellsToRenderUpdate();
      _this._maybeCallOnEdgeReached();
    };
    _this._onLayoutEmpty = function (e) {
      _this.props.onLayout && _this.props.onLayout(e);
    };
    _this._onLayoutFooter = function (e) {
      _this._triggerRemeasureForChildListsInCell(_this._getFooterCellKey());
      _this._footerLength = _this._selectLength(e.nativeEvent.layout);
    };
    _this._onLayoutHeader = function (e) {
      _this._headerLength = _this._selectLength(e.nativeEvent.layout);
    };
    _this._onContentSizeChange = function (width, height) {
      _this._listMetrics.notifyListContentLayout({
        layout: {
          width: width,
          height: height
        },
        orientation: _this._orientation()
      });
      _this._maybeScrollToInitialScrollIndex(width, height);
      if (_this.props.onContentSizeChange) {
        _this.props.onContentSizeChange(width, height);
      }
      _this._scheduleCellsToRenderUpdate();
      _this._maybeCallOnEdgeReached();
    };
    _this._convertParentScrollMetrics = function (metrics) {
      var offset = metrics.offset - _this._offsetFromParentVirtualizedList;
      var visibleLength = metrics.visibleLength;
      var dOffset = offset - _this._scrollMetrics.offset;
      var contentLength = _this._listMetrics.getContentLength();
      return {
        visibleLength: visibleLength,
        contentLength: contentLength,
        offset: offset,
        dOffset: dOffset
      };
    };
    _this._onScroll = function (e) {
      _this._nestedChildLists.forEach(function (childList) {
        childList._onScroll(e);
      });
      if (_this.props.onScroll) {
        _this.props.onScroll(e);
      }
      var timestamp = e.timeStamp;
      var visibleLength = _this._selectLength(e.nativeEvent.layoutMeasurement);
      var contentLength = _this._selectLength(e.nativeEvent.contentSize);
      var offset = _this._offsetFromScrollEvent(e);
      var dOffset = offset - _this._scrollMetrics.offset;
      if (_this._isNestedWithSameOrientation()) {
        if (_this._listMetrics.getContentLength() === 0) {
          return;
        }
        var _this$_convertParentS = _this._convertParentScrollMetrics({
          visibleLength: visibleLength,
          offset: offset
        });
        visibleLength = _this$_convertParentS.visibleLength;
        contentLength = _this$_convertParentS.contentLength;
        offset = _this$_convertParentS.offset;
        dOffset = _this$_convertParentS.dOffset;
      }
      var dt = _this._scrollMetrics.timestamp ? Math.max(1, timestamp - _this._scrollMetrics.timestamp) : 1;
      var velocity = dOffset / dt;
      if (dt > 500 && _this._scrollMetrics.dt > 500 && contentLength > 5 * visibleLength && !_this._hasWarned.perf) {
        (0, _infoLog.default)('VirtualizedList: You have a large list that is slow to update - make sure your ' + 'renderItem function renders components that follow React performance best practices ' + 'like PureComponent, shouldComponentUpdate, etc.', {
          dt: dt,
          prevDt: _this._scrollMetrics.dt,
          contentLength: contentLength
        });
        _this._hasWarned.perf = true;
      }
      var zoomScale = e.nativeEvent.zoomScale < 0 ? 1 : e.nativeEvent.zoomScale;
      _this._scrollMetrics = {
        dt: dt,
        dOffset: dOffset,
        offset: offset,
        timestamp: timestamp,
        velocity: velocity,
        visibleLength: visibleLength,
        zoomScale: zoomScale
      };
      if (_this.state.pendingScrollUpdateCount > 0) {
        _this.setState(function (state) {
          return {
            pendingScrollUpdateCount: state.pendingScrollUpdateCount - 1
          };
        });
      }
      _this._updateViewableItems(_this.props, _this.state.cellsAroundViewport);
      if (!_this.props) {
        return;
      }
      _this._maybeCallOnEdgeReached();
      if (velocity !== 0) {
        _this._fillRateHelper.activate();
      }
      _this._computeBlankness();
      _this._scheduleCellsToRenderUpdate();
    };
    _this._onScrollBeginDrag = function (e) {
      _this._nestedChildLists.forEach(function (childList) {
        childList._onScrollBeginDrag(e);
      });
      _this._viewabilityTuples.forEach(function (tuple) {
        tuple.viewabilityHelper.recordInteraction();
      });
      _this._hasInteracted = true;
      _this.props.onScrollBeginDrag && _this.props.onScrollBeginDrag(e);
    };
    _this._onScrollEndDrag = function (e) {
      _this._nestedChildLists.forEach(function (childList) {
        childList._onScrollEndDrag(e);
      });
      var velocity = e.nativeEvent.velocity;
      if (velocity) {
        _this._scrollMetrics.velocity = _this._selectOffset(velocity);
      }
      _this._computeBlankness();
      _this.props.onScrollEndDrag && _this.props.onScrollEndDrag(e);
    };
    _this._onMomentumScrollBegin = function (e) {
      _this._nestedChildLists.forEach(function (childList) {
        childList._onMomentumScrollBegin(e);
      });
      _this.props.onMomentumScrollBegin && _this.props.onMomentumScrollBegin(e);
    };
    _this._onMomentumScrollEnd = function (e) {
      _this._nestedChildLists.forEach(function (childList) {
        childList._onMomentumScrollEnd(e);
      });
      _this._scrollMetrics.velocity = 0;
      _this._computeBlankness();
      _this.props.onMomentumScrollEnd && _this.props.onMomentumScrollEnd(e);
    };
    _this._updateCellsToRender = function () {
      _this._updateViewableItems(_this.props, _this.state.cellsAroundViewport);
      _this.setState(function (state, props) {
        var cellsAroundViewport = _this._adjustCellsAroundViewport(props, state.cellsAroundViewport, state.pendingScrollUpdateCount);
        var renderMask = VirtualizedList._createRenderMask(props, cellsAroundViewport, _this._getNonViewportRenderRegions(props));
        if (cellsAroundViewport.first === state.cellsAroundViewport.first && cellsAroundViewport.last === state.cellsAroundViewport.last && renderMask.equals(state.renderMask)) {
          return null;
        }
        return {
          cellsAroundViewport: cellsAroundViewport,
          renderMask: renderMask
        };
      });
    };
    _this._createViewToken = function (index, isViewable, props) {
      var data = props.data,
        getItem = props.getItem;
      var item = getItem(data, index);
      return {
        index: index,
        item: item,
        key: VirtualizedList._keyExtractor(item, index, props),
        isViewable: isViewable
      };
    };
    _this._getNonViewportRenderRegions = function (props) {
      if (!(_this._lastFocusedCellKey && _this._cellRefs[_this._lastFocusedCellKey])) {
        return [];
      }
      var lastFocusedCellRenderer = _this._cellRefs[_this._lastFocusedCellKey];
      var focusedCellIndex = lastFocusedCellRenderer.props.index;
      var itemCount = props.getItemCount(props.data);
      if (focusedCellIndex >= itemCount || VirtualizedList._getItemKey(props, focusedCellIndex) !== _this._lastFocusedCellKey) {
        return [];
      }
      var first = focusedCellIndex;
      var heightOfCellsBeforeFocused = 0;
      for (var i = first - 1; i >= 0 && heightOfCellsBeforeFocused < _this._scrollMetrics.visibleLength; i--) {
        first--;
        heightOfCellsBeforeFocused += _this._listMetrics.getCellMetricsApprox(i, props).length;
      }
      var last = focusedCellIndex;
      var heightOfCellsAfterFocused = 0;
      for (var _i = last + 1; _i < itemCount && heightOfCellsAfterFocused < _this._scrollMetrics.visibleLength; _i++) {
        last++;
        heightOfCellsAfterFocused += _this._listMetrics.getCellMetricsApprox(_i, props).length;
      }
      return [{
        first: first,
        last: last
      }];
    };
    _this._checkProps(_props);
    _this._fillRateHelper = new _FillRateHelper.default(_this._listMetrics);
    _this._updateCellsToRenderBatcher = new _Batchinator.default(_this._updateCellsToRender, (_this$props$updateCel = _this.props.updateCellsBatchingPeriod) != null ? _this$props$updateCel : 50);
    if (_this.props.viewabilityConfigCallbackPairs) {
      _this._viewabilityTuples = _this.props.viewabilityConfigCallbackPairs.map(function (pair) {
        return {
          viewabilityHelper: new _ViewabilityHelper.default(pair.viewabilityConfig),
          onViewableItemsChanged: pair.onViewableItemsChanged
        };
      });
    } else {
      var _this$props = _this.props,
        onViewableItemsChanged = _this$props.onViewableItemsChanged,
        viewabilityConfig = _this$props.viewabilityConfig;
      if (onViewableItemsChanged) {
        _this._viewabilityTuples.push({
          viewabilityHelper: new _ViewabilityHelper.default(viewabilityConfig),
          onViewableItemsChanged: onViewableItemsChanged
        });
      }
    }
    var initialRenderRegion = VirtualizedList._initialRenderRegion(_props);
    var minIndexForVisible = (_this$props$maintainV = (_this$props$maintainV2 = _this.props.maintainVisibleContentPosition) == null ? void 0 : _this$props$maintainV2.minIndexForVisible) != null ? _this$props$maintainV : 0;
    _this.state = {
      cellsAroundViewport: initialRenderRegion,
      renderMask: VirtualizedList._createRenderMask(_props, initialRenderRegion),
      firstVisibleItemKey: _this.props.getItemCount(_this.props.data) > minIndexForVisible ? VirtualizedList._getItemKey(_this.props, minIndexForVisible) : null,
      pendingScrollUpdateCount: _this.props.initialScrollIndex != null && _this.props.initialScrollIndex > 0 ? 1 : 0
    };
    return _this;
  }
  (0, _inherits2.default)(VirtualizedList, _StateSafePureCompone);
  return (0, _createClass2.default)(VirtualizedList, [{
    key: "scrollToEnd",
    value: function scrollToEnd(params) {
      var animated = params ? params.animated : true;
      var veryLast = this.props.getItemCount(this.props.data) - 1;
      if (veryLast < 0) {
        return;
      }
      var frame = this._listMetrics.getCellMetricsApprox(veryLast, this.props);
      var offset = Math.max(0, frame.offset + frame.length + this._footerLength - this._scrollMetrics.visibleLength);
      this.scrollToOffset({
        animated: animated,
        offset: offset
      });
    }
  }, {
    key: "scrollToIndex",
    value: function scrollToIndex(params) {
      var _this$props2 = this.props,
        data = _this$props2.data,
        getItemCount = _this$props2.getItemCount,
        getItemLayout = _this$props2.getItemLayout,
        onScrollToIndexFailed = _this$props2.onScrollToIndexFailed;
      var animated = params.animated,
        index = params.index,
        viewOffset = params.viewOffset,
        viewPosition = params.viewPosition;
      (0, _invariant.default)(index >= 0, `scrollToIndex out of range: requested index ${index} but minimum is 0`);
      (0, _invariant.default)(getItemCount(data) >= 1, `scrollToIndex out of range: item length ${getItemCount(data)} but minimum is 1`);
      (0, _invariant.default)(index < getItemCount(data), `scrollToIndex out of range: requested index ${index} is out of 0 to ${getItemCount(data) - 1}`);
      if (!getItemLayout && index > this._listMetrics.getHighestMeasuredCellIndex()) {
        (0, _invariant.default)(!!onScrollToIndexFailed, 'scrollToIndex should be used in conjunction with getItemLayout or onScrollToIndexFailed, ' + 'otherwise there is no way to know the location of offscreen indices or handle failures.');
        onScrollToIndexFailed({
          averageItemLength: this._listMetrics.getAverageCellLength(),
          highestMeasuredFrameIndex: this._listMetrics.getHighestMeasuredCellIndex(),
          index: index
        });
        return;
      }
      var frame = this._listMetrics.getCellMetricsApprox(Math.floor(index), this.props);
      var offset = Math.max(0, this._listMetrics.getCellOffsetApprox(index, this.props) - (viewPosition || 0) * (this._scrollMetrics.visibleLength - frame.length)) - (viewOffset || 0);
      this.scrollToOffset({
        offset: offset,
        animated: animated
      });
    }
  }, {
    key: "scrollToItem",
    value: function scrollToItem(params) {
      var item = params.item;
      var _this$props3 = this.props,
        data = _this$props3.data,
        getItem = _this$props3.getItem,
        getItemCount = _this$props3.getItemCount;
      var itemCount = getItemCount(data);
      for (var index = 0; index < itemCount; index++) {
        if (getItem(data, index) === item) {
          this.scrollToIndex(Object.assign({}, params, {
            index: index
          }));
          break;
        }
      }
    }
  }, {
    key: "scrollToOffset",
    value: function scrollToOffset(params) {
      var animated = params.animated,
        offset = params.offset;
      var scrollRef = this._scrollRef;
      if (scrollRef == null) {
        return;
      }
      if (scrollRef.scrollTo == null) {
        console.warn('No scrollTo method provided. This may be because you have two nested ' + 'VirtualizedLists with the same orientation, or because you are ' + 'using a custom component that does not implement scrollTo.');
        return;
      }
      var _this$_orientation = this._orientation(),
        horizontal = _this$_orientation.horizontal,
        rtl = _this$_orientation.rtl;
      if (horizontal && rtl && !this._listMetrics.hasContentLength()) {
        console.warn('scrollToOffset may not be called in RTL before content is laid out');
        return;
      }
      scrollRef.scrollTo(Object.assign({
        animated: animated
      }, this._scrollToParamsFromOffset(offset)));
    }
  }, {
    key: "_scrollToParamsFromOffset",
    value: function _scrollToParamsFromOffset(offset) {
      var _this$_orientation2 = this._orientation(),
        horizontal = _this$_orientation2.horizontal,
        rtl = _this$_orientation2.rtl;
      if (horizontal && rtl) {
        var cartOffset = this._listMetrics.cartesianOffset(offset + this._scrollMetrics.visibleLength);
        return horizontal ? {
          x: cartOffset
        } : {
          y: cartOffset
        };
      } else {
        return horizontal ? {
          x: offset
        } : {
          y: offset
        };
      }
    }
  }, {
    key: "recordInteraction",
    value: function recordInteraction() {
      this._nestedChildLists.forEach(function (childList) {
        childList.recordInteraction();
      });
      this._viewabilityTuples.forEach(function (t) {
        t.viewabilityHelper.recordInteraction();
      });
      this._updateViewableItems(this.props, this.state.cellsAroundViewport);
    }
  }, {
    key: "flashScrollIndicators",
    value: function flashScrollIndicators() {
      if (this._scrollRef == null) {
        return;
      }
      this._scrollRef.flashScrollIndicators();
    }
  }, {
    key: "getScrollResponder",
    value: function getScrollResponder() {
      if (this._scrollRef && this._scrollRef.getScrollResponder) {
        return this._scrollRef.getScrollResponder();
      }
    }
  }, {
    key: "getScrollableNode",
    value: function getScrollableNode() {
      if (this._scrollRef && this._scrollRef.getScrollableNode) {
        return this._scrollRef.getScrollableNode();
      } else {
        return (0, _reactNative.findNodeHandle)(this._scrollRef);
      }
    }
  }, {
    key: "getScrollRef",
    value: function getScrollRef() {
      if (this._scrollRef && this._scrollRef.getScrollRef) {
        return this._scrollRef.getScrollRef();
      } else {
        return this._scrollRef;
      }
    }
  }, {
    key: "setNativeProps",
    value: function setNativeProps(props) {
      if (this._scrollRef) {
        this._scrollRef.setNativeProps(props);
      }
    }
  }, {
    key: "_getCellKey",
    value: function _getCellKey() {
      var _this$context;
      return ((_this$context = this.context) == null ? void 0 : _this$context.cellKey) || 'rootList';
    }
  }, {
    key: "hasMore",
    value: function hasMore() {
      return this._hasMore;
    }
  }, {
    key: "_checkProps",
    value: function _checkProps(props) {
      var onScroll = props.onScroll,
        windowSize = props.windowSize,
        getItemCount = props.getItemCount,
        data = props.data,
        initialScrollIndex = props.initialScrollIndex;
      (0, _invariant.default)(!onScroll || !onScroll.__isNative, 'Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent ' + 'to support native onScroll events with useNativeDriver');
      (0, _invariant.default)((0, _VirtualizedListProps.windowSizeOrDefault)(windowSize) > 0, 'VirtualizedList: The windowSize prop must be present and set to a value greater than 0.');
      (0, _invariant.default)(getItemCount, 'VirtualizedList: The "getItemCount" prop must be provided');
      var itemCount = getItemCount(data);
      if (initialScrollIndex != null && !this._hasTriggeredInitialScrollToIndex && (initialScrollIndex < 0 || itemCount > 0 && initialScrollIndex >= itemCount) && !this._hasWarned.initialScrollIndex) {
        console.warn(`initialScrollIndex "${initialScrollIndex}" is not valid (list has ${itemCount} items)`);
        this._hasWarned.initialScrollIndex = true;
      }
      if (__DEV__ && !this._hasWarned.flexWrap) {
        var flatStyles = _reactNative.StyleSheet.flatten(this.props.contentContainerStyle);
        if (flatStyles != null && flatStyles.flexWrap === 'wrap') {
          console.warn('`flexWrap: `wrap`` is not supported with the `VirtualizedList` components.' + 'Consider using `numColumns` with `FlatList` instead.');
          this._hasWarned.flexWrap = true;
        }
      }
    }
  }, {
    key: "_adjustCellsAroundViewport",
    value: function _adjustCellsAroundViewport(props, cellsAroundViewport, pendingScrollUpdateCount) {
      var data = props.data,
        getItemCount = props.getItemCount;
      var onEndReachedThreshold = (0, _VirtualizedListProps.onEndReachedThresholdOrDefault)(props.onEndReachedThreshold);
      var _this$_scrollMetrics = this._scrollMetrics,
        offset = _this$_scrollMetrics.offset,
        visibleLength = _this$_scrollMetrics.visibleLength;
      var contentLength = this._listMetrics.getContentLength();
      var distanceFromEnd = contentLength - visibleLength - offset;
      if (visibleLength <= 0 || contentLength <= 0) {
        return cellsAroundViewport.last >= getItemCount(data) ? VirtualizedList._constrainToItemCount(cellsAroundViewport, props) : cellsAroundViewport;
      }
      var newCellsAroundViewport;
      if (props.disableVirtualization) {
        var renderAhead = distanceFromEnd < onEndReachedThreshold * visibleLength ? (0, _VirtualizedListProps.maxToRenderPerBatchOrDefault)(props.maxToRenderPerBatch) : 0;
        newCellsAroundViewport = {
          first: 0,
          last: Math.min(cellsAroundViewport.last + renderAhead, getItemCount(data) - 1)
        };
      } else {
        if (pendingScrollUpdateCount > 0) {
          return cellsAroundViewport.last >= getItemCount(data) ? VirtualizedList._constrainToItemCount(cellsAroundViewport, props) : cellsAroundViewport;
        }
        newCellsAroundViewport = (0, _VirtualizeUtils.computeWindowedRenderLimits)(props, (0, _VirtualizedListProps.maxToRenderPerBatchOrDefault)(props.maxToRenderPerBatch), (0, _VirtualizedListProps.windowSizeOrDefault)(props.windowSize), cellsAroundViewport, this._listMetrics, this._scrollMetrics);
        (0, _invariant.default)(newCellsAroundViewport.last < getItemCount(data), 'computeWindowedRenderLimits() should return range in-bounds');
      }
      if (this._nestedChildLists.size() > 0) {
        var childIdx = this._findFirstChildWithMore(newCellsAroundViewport.first, newCellsAroundViewport.last);
        newCellsAroundViewport.last = childIdx != null ? childIdx : newCellsAroundViewport.last;
      }
      return newCellsAroundViewport;
    }
  }, {
    key: "_findFirstChildWithMore",
    value: function _findFirstChildWithMore(first, last) {
      for (var ii = first; ii <= last; ii++) {
        var cellKeyForIndex = this._indicesToKeys.get(ii);
        if (cellKeyForIndex != null && this._nestedChildLists.anyInCell(cellKeyForIndex, function (childList) {
          return childList.hasMore();
        })) {
          return ii;
        }
      }
      return null;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this._isNestedWithSameOrientation()) {
        this.context.registerAsNestedChild({
          ref: this,
          cellKey: this.context.cellKey
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this._isNestedWithSameOrientation()) {
        this.context.unregisterAsNestedChild({
          ref: this
        });
      }
      this._updateCellsToRenderBatcher.dispose({
        abort: true
      });
      this._viewabilityTuples.forEach(function (tuple) {
        tuple.viewabilityHelper.dispose();
      });
      this._fillRateHelper.deactivateAndFlush();
    }
  }, {
    key: "_pushCells",
    value: function _pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, first, last, inversionStyle) {
      var _this2 = this;
      var _this$props4 = this.props,
        CellRendererComponent = _this$props4.CellRendererComponent,
        ItemSeparatorComponent = _this$props4.ItemSeparatorComponent,
        ListHeaderComponent = _this$props4.ListHeaderComponent,
        ListItemComponent = _this$props4.ListItemComponent,
        data = _this$props4.data,
        debug = _this$props4.debug,
        getItem = _this$props4.getItem,
        getItemCount = _this$props4.getItemCount,
        getItemLayout = _this$props4.getItemLayout,
        horizontal = _this$props4.horizontal,
        renderItem = _this$props4.renderItem;
      var stickyOffset = ListHeaderComponent ? 1 : 0;
      var end = getItemCount(data) - 1;
      var prevCellKey;
      last = Math.min(end, last);
      var _loop = function _loop() {
        var item = getItem(data, ii);
        var key = VirtualizedList._keyExtractor(item, ii, _this2.props);
        _this2._indicesToKeys.set(ii, key);
        if (stickyIndicesFromProps.has(ii + stickyOffset)) {
          stickyHeaderIndices.push(cells.length);
        }
        var shouldListenForLayout = getItemLayout == null || debug || _this2._fillRateHelper.enabled();
        cells.push((0, _jsxRuntime.jsx)(_VirtualizedListCellRenderer.default, Object.assign({
          CellRendererComponent: CellRendererComponent,
          ItemSeparatorComponent: ii < end ? ItemSeparatorComponent : undefined,
          ListItemComponent: ListItemComponent,
          cellKey: key,
          horizontal: horizontal,
          index: ii,
          inversionStyle: inversionStyle,
          item: item,
          prevCellKey: prevCellKey,
          onUpdateSeparators: _this2._onUpdateSeparators,
          onCellFocusCapture: function onCellFocusCapture(e) {
            return _this2._onCellFocusCapture(key);
          },
          onUnmount: _this2._onCellUnmount,
          ref: function ref(_ref) {
            _this2._cellRefs[key] = _ref;
          },
          renderItem: renderItem
        }, shouldListenForLayout && {
          onCellLayout: _this2._onCellLayout
        }), key));
        prevCellKey = key;
      };
      for (var ii = first; ii <= last; ii++) {
        _loop();
      }
    }
  }, {
    key: "_isNestedWithSameOrientation",
    value: function _isNestedWithSameOrientation() {
      var nestedContext = this.context;
      return !!(nestedContext && !!nestedContext.horizontal === (0, _VirtualizedListProps.horizontalOrDefault)(this.props.horizontal));
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this,
        _this$props$scrollEve;
      this._checkProps(this.props);
      var _this$props5 = this.props,
        ListEmptyComponent = _this$props5.ListEmptyComponent,
        ListFooterComponent = _this$props5.ListFooterComponent,
        ListHeaderComponent = _this$props5.ListHeaderComponent;
      var _this$props6 = this.props,
        data = _this$props6.data,
        horizontal = _this$props6.horizontal;
      var inversionStyle = this.props.inverted ? (0, _VirtualizedListProps.horizontalOrDefault)(this.props.horizontal) ? styles.horizontallyInverted : styles.verticallyInverted : null;
      var cells = [];
      var stickyIndicesFromProps = new Set(this.props.stickyHeaderIndices);
      var stickyHeaderIndices = [];
      if (ListHeaderComponent) {
        if (stickyIndicesFromProps.has(0)) {
          stickyHeaderIndices.push(0);
        }
        var element = React.isValidElement(ListHeaderComponent) ? ListHeaderComponent : (0, _jsxRuntime.jsx)(ListHeaderComponent, {});
        cells.push((0, _jsxRuntime.jsx)(_VirtualizedListContext.VirtualizedListCellContextProvider, {
          cellKey: this._getCellKey() + '-header',
          children: (0, _jsxRuntime.jsx)(_reactNative.View, {
            collapsable: false,
            onLayout: this._onLayoutHeader,
            style: _reactNative.StyleSheet.compose(inversionStyle, this.props.ListHeaderComponentStyle),
            children: element
          })
        }, "$header"));
      }
      var itemCount = this.props.getItemCount(data);
      if (itemCount === 0 && ListEmptyComponent) {
        var _element = React.isValidElement(ListEmptyComponent) ? ListEmptyComponent : (0, _jsxRuntime.jsx)(ListEmptyComponent, {});
        cells.push((0, _jsxRuntime.jsx)(_VirtualizedListContext.VirtualizedListCellContextProvider, {
          cellKey: this._getCellKey() + '-empty',
          children: React.cloneElement(_element, {
            onLayout: function onLayout(event) {
              _this3._onLayoutEmpty(event);
              if (_element.props.onLayout) {
                _element.props.onLayout(event);
              }
            },
            style: _reactNative.StyleSheet.compose(inversionStyle, _element.props.style)
          })
        }, "$empty"));
      }
      if (itemCount > 0) {
        _usedIndexForKey = false;
        _keylessItemComponentName = '';
        var spacerKey = this._getSpacerKey(!horizontal);
        var renderRegions = this.state.renderMask.enumerateRegions();
        var lastRegion = renderRegions[renderRegions.length - 1];
        var lastSpacer = lastRegion != null && lastRegion.isSpacer ? lastRegion : null;
        for (var section of renderRegions) {
          if (section.isSpacer) {
            if (this.props.disableVirtualization) {
              continue;
            }
            var isLastSpacer = section === lastSpacer;
            var constrainToMeasured = isLastSpacer && !this.props.getItemLayout;
            var last = constrainToMeasured ? (0, _clamp.default)(section.first - 1, section.last, this._listMetrics.getHighestMeasuredCellIndex()) : section.last;
            var firstMetrics = this._listMetrics.getCellMetricsApprox(section.first, this.props);
            var lastMetrics = this._listMetrics.getCellMetricsApprox(last, this.props);
            var spacerSize = lastMetrics.offset + lastMetrics.length - firstMetrics.offset;
            cells.push((0, _jsxRuntime.jsx)(_reactNative.View, {
              style: (0, _defineProperty2.default)({}, spacerKey, spacerSize)
            }, `$spacer-${section.first}`));
          } else {
            this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, section.first, section.last, inversionStyle);
          }
        }
        if (!this._hasWarned.keys && _usedIndexForKey) {
          console.warn('VirtualizedList: missing keys for items, make sure to specify a key or id property on each ' + 'item or provide a custom keyExtractor.', _keylessItemComponentName);
          this._hasWarned.keys = true;
        }
      }
      if (ListFooterComponent) {
        var _element2 = React.isValidElement(ListFooterComponent) ? ListFooterComponent : (0, _jsxRuntime.jsx)(ListFooterComponent, {});
        cells.push((0, _jsxRuntime.jsx)(_VirtualizedListContext.VirtualizedListCellContextProvider, {
          cellKey: this._getFooterCellKey(),
          children: (0, _jsxRuntime.jsx)(_reactNative.View, {
            onLayout: this._onLayoutFooter,
            style: _reactNative.StyleSheet.compose(inversionStyle, this.props.ListFooterComponentStyle),
            children: _element2
          })
        }, "$footer"));
      }
      var scrollProps = Object.assign({}, this.props, {
        onContentSizeChange: this._onContentSizeChange,
        onLayout: this._onLayout,
        onScroll: this._onScroll,
        onScrollBeginDrag: this._onScrollBeginDrag,
        onScrollEndDrag: this._onScrollEndDrag,
        onMomentumScrollBegin: this._onMomentumScrollBegin,
        onMomentumScrollEnd: this._onMomentumScrollEnd,
        scrollEventThrottle: (_this$props$scrollEve = this.props.scrollEventThrottle) != null ? _this$props$scrollEve : 0.0001,
        invertStickyHeaders: this.props.invertStickyHeaders !== undefined ? this.props.invertStickyHeaders : this.props.inverted,
        stickyHeaderIndices: stickyHeaderIndices,
        style: inversionStyle ? [inversionStyle, this.props.style] : this.props.style,
        isInvertedVirtualizedList: this.props.inverted,
        maintainVisibleContentPosition: this.props.maintainVisibleContentPosition != null ? Object.assign({}, this.props.maintainVisibleContentPosition, {
          minIndexForVisible: this.props.maintainVisibleContentPosition.minIndexForVisible + (this.props.ListHeaderComponent ? 1 : 0)
        }) : undefined
      });
      this._hasMore = this.state.cellsAroundViewport.last < itemCount - 1;
      var innerRet = (0, _jsxRuntime.jsx)(_VirtualizedListContext.VirtualizedListContextProvider, {
        value: {
          cellKey: null,
          getScrollMetrics: this._getScrollMetrics,
          horizontal: (0, _VirtualizedListProps.horizontalOrDefault)(this.props.horizontal),
          getOutermostParentListRef: this._getOutermostParentListRef,
          registerAsNestedChild: this._registerAsNestedChild,
          unregisterAsNestedChild: this._unregisterAsNestedChild
        },
        children: React.cloneElement((this.props.renderScrollComponent || this._defaultRenderScrollComponent)(scrollProps), {
          ref: this._captureScrollRef
        }, cells)
      });
      var ret = innerRet;
      if (__DEV__) {
        ret = (0, _jsxRuntime.jsx)(_reactNative.ScrollView.Context.Consumer, {
          children: function children(scrollContext) {
            if (scrollContext != null && !scrollContext.horizontal === !(0, _VirtualizedListProps.horizontalOrDefault)(_this3.props.horizontal) && !_this3._hasWarned.nesting && _this3.context == null && _this3.props.scrollEnabled !== false) {
              console.error('VirtualizedLists should never be nested inside plain ScrollViews with the same ' + 'orientation because it can break windowing and other functionality - use another ' + 'VirtualizedList-backed container instead.');
              _this3._hasWarned.nesting = true;
            }
            return innerRet;
          }
        });
      }
      if (this.props.debug) {
        return (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.debug,
          children: [ret, this._renderDebugOverlay()]
        });
      } else {
        return ret;
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props7 = this.props,
        data = _this$props7.data,
        extraData = _this$props7.extraData;
      if (data !== prevProps.data || extraData !== prevProps.extraData) {
        this._viewabilityTuples.forEach(function (tuple) {
          tuple.viewabilityHelper.resetViewableIndices();
        });
      }
      var hiPriInProgress = this._hiPriInProgress;
      this._scheduleCellsToRenderUpdate();
      if (hiPriInProgress) {
        this._hiPriInProgress = false;
      }
    }
  }, {
    key: "_computeBlankness",
    value: function _computeBlankness() {
      this._fillRateHelper.computeBlankness(this.props, this.state.cellsAroundViewport, this._scrollMetrics);
    }
  }, {
    key: "_onCellFocusCapture",
    value: function _onCellFocusCapture(cellKey) {
      this._lastFocusedCellKey = cellKey;
      this._updateCellsToRender();
    }
  }, {
    key: "_triggerRemeasureForChildListsInCell",
    value: function _triggerRemeasureForChildListsInCell(cellKey) {
      this._nestedChildLists.forEachInCell(cellKey, function (childList) {
        childList.measureLayoutRelativeToContainingList();
      });
    }
  }, {
    key: "measureLayoutRelativeToContainingList",
    value: function measureLayoutRelativeToContainingList() {
      var _this4 = this;
      try {
        if (!this._scrollRef) {
          return;
        }
        this._scrollRef.measureLayout(this.context.getOutermostParentListRef().getScrollRef(), function (x, y, width, height) {
          _this4._offsetFromParentVirtualizedList = _this4._selectOffset({
            x: x,
            y: y
          });
          _this4._listMetrics.notifyListContentLayout({
            layout: {
              width: width,
              height: height
            },
            orientation: _this4._orientation()
          });
          var scrollMetrics = _this4._convertParentScrollMetrics(_this4.context.getScrollMetrics());
          var metricsChanged = _this4._scrollMetrics.visibleLength !== scrollMetrics.visibleLength || _this4._scrollMetrics.offset !== scrollMetrics.offset;
          if (metricsChanged) {
            _this4._scrollMetrics.visibleLength = scrollMetrics.visibleLength;
            _this4._scrollMetrics.offset = scrollMetrics.offset;
            _this4._nestedChildLists.forEach(function (childList) {
              childList.measureLayoutRelativeToContainingList();
            });
          }
        }, function (error) {
          console.warn("VirtualizedList: Encountered an error while measuring a list's" + ' offset from its containing VirtualizedList.');
        });
      } catch (error) {
        console.warn('measureLayoutRelativeToContainingList threw an error', error.stack);
      }
    }
  }, {
    key: "_getFooterCellKey",
    value: function _getFooterCellKey() {
      return this._getCellKey() + '-footer';
    }
  }, {
    key: "_renderDebugOverlay",
    value: function _renderDebugOverlay() {
      var normalize = this._scrollMetrics.visibleLength / (this._listMetrics.getContentLength() || 1);
      var framesInLayout = [];
      var itemCount = this.props.getItemCount(this.props.data);
      for (var ii = 0; ii < itemCount; ii++) {
        var frame = this._listMetrics.getCellMetricsApprox(ii, this.props);
        if (frame.isMounted) {
          framesInLayout.push(frame);
        }
      }
      var windowTop = this._listMetrics.getCellMetricsApprox(this.state.cellsAroundViewport.first, this.props).offset;
      var frameLast = this._listMetrics.getCellMetricsApprox(this.state.cellsAroundViewport.last, this.props);
      var windowLen = frameLast.offset + frameLast.length - windowTop;
      var visTop = this._scrollMetrics.offset;
      var visLen = this._scrollMetrics.visibleLength;
      return (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [styles.debugOverlayBase, styles.debugOverlay],
        children: [framesInLayout.map(function (f, ii) {
          return (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [styles.debugOverlayBase, styles.debugOverlayFrame, {
              top: f.offset * normalize,
              height: f.length * normalize
            }]
          }, 'f' + ii);
        }), (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [styles.debugOverlayBase, styles.debugOverlayFrameLast, {
            top: windowTop * normalize,
            height: windowLen * normalize
          }]
        }), (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [styles.debugOverlayBase, styles.debugOverlayFrameVis, {
            top: visTop * normalize,
            height: visLen * normalize
          }]
        })]
      });
    }
  }, {
    key: "_selectLength",
    value: function _selectLength(metrics) {
      return !(0, _VirtualizedListProps.horizontalOrDefault)(this.props.horizontal) ? metrics.height : metrics.width;
    }
  }, {
    key: "_selectOffset",
    value: function _selectOffset(_ref3) {
      var x = _ref3.x,
        y = _ref3.y;
      return this._orientation().horizontal ? x : y;
    }
  }, {
    key: "_orientation",
    value: function _orientation() {
      return {
        horizontal: (0, _VirtualizedListProps.horizontalOrDefault)(this.props.horizontal),
        rtl: _reactNative.I18nManager.isRTL
      };
    }
  }, {
    key: "_maybeCallOnEdgeReached",
    value: function _maybeCallOnEdgeReached() {
      var _this$props8 = this.props,
        data = _this$props8.data,
        getItemCount = _this$props8.getItemCount,
        onStartReached = _this$props8.onStartReached,
        onStartReachedThreshold = _this$props8.onStartReachedThreshold,
        onEndReached = _this$props8.onEndReached,
        onEndReachedThreshold = _this$props8.onEndReachedThreshold;
      if (this.state.pendingScrollUpdateCount > 0) {
        return;
      }
      var _this$_scrollMetrics2 = this._scrollMetrics,
        visibleLength = _this$_scrollMetrics2.visibleLength,
        offset = _this$_scrollMetrics2.offset;
      var distanceFromStart = offset;
      var distanceFromEnd = this._listMetrics.getContentLength() - visibleLength - offset;
      if (distanceFromStart < ON_EDGE_REACHED_EPSILON) {
        distanceFromStart = 0;
      }
      if (distanceFromEnd < ON_EDGE_REACHED_EPSILON) {
        distanceFromEnd = 0;
      }
      var DEFAULT_THRESHOLD_PX = 2;
      var startThreshold = onStartReachedThreshold != null ? onStartReachedThreshold * visibleLength : DEFAULT_THRESHOLD_PX;
      var endThreshold = onEndReachedThreshold != null ? onEndReachedThreshold * visibleLength : DEFAULT_THRESHOLD_PX;
      var isWithinStartThreshold = distanceFromStart <= startThreshold;
      var isWithinEndThreshold = distanceFromEnd <= endThreshold;
      if (onEndReached && this.state.cellsAroundViewport.last === getItemCount(data) - 1 && isWithinEndThreshold && this._listMetrics.getContentLength() !== this._sentEndForContentLength) {
        this._sentEndForContentLength = this._listMetrics.getContentLength();
        onEndReached({
          distanceFromEnd: distanceFromEnd
        });
      } else if (onStartReached != null && this.state.cellsAroundViewport.first === 0 && isWithinStartThreshold && this._listMetrics.getContentLength() !== this._sentStartForContentLength) {
        this._sentStartForContentLength = this._listMetrics.getContentLength();
        onStartReached({
          distanceFromStart: distanceFromStart
        });
      } else {
        this._sentStartForContentLength = isWithinStartThreshold ? this._sentStartForContentLength : 0;
        this._sentEndForContentLength = isWithinEndThreshold ? this._sentEndForContentLength : 0;
      }
    }
  }, {
    key: "_maybeScrollToInitialScrollIndex",
    value: function _maybeScrollToInitialScrollIndex(contentWidth, contentHeight) {
      if (contentWidth > 0 && contentHeight > 0 && this.props.initialScrollIndex != null && this.props.initialScrollIndex > 0 && !this._hasTriggeredInitialScrollToIndex) {
        if (this.props.contentOffset == null) {
          if (this.props.initialScrollIndex < this.props.getItemCount(this.props.data)) {
            this.scrollToIndex({
              animated: false,
              index: (0, _nullthrows.default)(this.props.initialScrollIndex)
            });
          } else {
            this.scrollToEnd({
              animated: false
            });
          }
        }
        this._hasTriggeredInitialScrollToIndex = true;
      }
    }
  }, {
    key: "_offsetFromScrollEvent",
    value: function _offsetFromScrollEvent(e) {
      var _e$nativeEvent = e.nativeEvent,
        contentOffset = _e$nativeEvent.contentOffset,
        contentSize = _e$nativeEvent.contentSize,
        layoutMeasurement = _e$nativeEvent.layoutMeasurement;
      var _this$_orientation3 = this._orientation(),
        horizontal = _this$_orientation3.horizontal,
        rtl = _this$_orientation3.rtl;
      if (horizontal && rtl) {
        return this._selectLength(contentSize) - (this._selectOffset(contentOffset) + this._selectLength(layoutMeasurement));
      } else {
        return this._selectOffset(contentOffset);
      }
    }
  }, {
    key: "_scheduleCellsToRenderUpdate",
    value: function _scheduleCellsToRenderUpdate() {
      if ((this._listMetrics.getAverageCellLength() > 0 || this.props.getItemLayout != null) && this._shouldRenderWithPriority() && !this._hiPriInProgress) {
        this._hiPriInProgress = true;
        this._updateCellsToRenderBatcher.dispose({
          abort: true
        });
        this._updateCellsToRender();
        return;
      } else {
        this._updateCellsToRenderBatcher.schedule();
      }
    }
  }, {
    key: "_shouldRenderWithPriority",
    value: function _shouldRenderWithPriority() {
      var _this$state$cellsArou = this.state.cellsAroundViewport,
        first = _this$state$cellsArou.first,
        last = _this$state$cellsArou.last;
      var _this$_scrollMetrics3 = this._scrollMetrics,
        offset = _this$_scrollMetrics3.offset,
        visibleLength = _this$_scrollMetrics3.visibleLength,
        velocity = _this$_scrollMetrics3.velocity;
      var itemCount = this.props.getItemCount(this.props.data);
      var hiPri = false;
      var onStartReachedThreshold = (0, _VirtualizedListProps.onStartReachedThresholdOrDefault)(this.props.onStartReachedThreshold);
      var onEndReachedThreshold = (0, _VirtualizedListProps.onEndReachedThresholdOrDefault)(this.props.onEndReachedThreshold);
      if (first > 0) {
        var distTop = offset - this._listMetrics.getCellMetricsApprox(first, this.props).offset;
        hiPri = distTop < 0 || velocity < -2 && distTop < getScrollingThreshold(onStartReachedThreshold, visibleLength);
      }
      if (!hiPri && last >= 0 && last < itemCount - 1) {
        var distBottom = this._listMetrics.getCellMetricsApprox(last, this.props).offset - (offset + visibleLength);
        hiPri = distBottom < 0 || velocity > 2 && distBottom < getScrollingThreshold(onEndReachedThreshold, visibleLength);
      }
      return hiPri;
    }
  }, {
    key: "__getListMetrics",
    value: function __getListMetrics() {
      return this._listMetrics;
    }
  }, {
    key: "_updateViewableItems",
    value: function _updateViewableItems(props, cellsAroundViewport) {
      var _this5 = this;
      if (this.state.pendingScrollUpdateCount > 0) {
        return;
      }
      this._viewabilityTuples.forEach(function (tuple) {
        tuple.viewabilityHelper.onUpdate(props, _this5._scrollMetrics.offset, _this5._scrollMetrics.visibleLength, _this5._listMetrics, _this5._createViewToken, tuple.onViewableItemsChanged, cellsAroundViewport);
      });
    }
  }], [{
    key: "_findItemIndexWithKey",
    value: function _findItemIndexWithKey(props, key, hint) {
      var itemCount = props.getItemCount(props.data);
      if (hint != null && hint >= 0 && hint < itemCount) {
        var curKey = VirtualizedList._getItemKey(props, hint);
        if (curKey === key) {
          return hint;
        }
      }
      for (var ii = 0; ii < itemCount; ii++) {
        var _curKey = VirtualizedList._getItemKey(props, ii);
        if (_curKey === key) {
          return ii;
        }
      }
      return null;
    }
  }, {
    key: "_getItemKey",
    value: function _getItemKey(props, index) {
      var item = props.getItem(props.data, index);
      return VirtualizedList._keyExtractor(item, index, props);
    }
  }, {
    key: "_createRenderMask",
    value: function _createRenderMask(props, cellsAroundViewport, additionalRegions) {
      var itemCount = props.getItemCount(props.data);
      (0, _invariant.default)(cellsAroundViewport.first >= 0 && cellsAroundViewport.last >= cellsAroundViewport.first - 1 && cellsAroundViewport.last < itemCount, `Invalid cells around viewport "[${cellsAroundViewport.first}, ${cellsAroundViewport.last}]" was passed to VirtualizedList._createRenderMask`);
      var renderMask = new _CellRenderMask.CellRenderMask(itemCount);
      if (itemCount > 0) {
        var allRegions = [cellsAroundViewport].concat((0, _toConsumableArray2.default)(additionalRegions != null ? additionalRegions : []));
        for (var region of allRegions) {
          renderMask.addCells(region);
        }
        if (props.initialScrollIndex == null || props.initialScrollIndex <= 0) {
          var initialRegion = VirtualizedList._initialRenderRegion(props);
          renderMask.addCells(initialRegion);
        }
        var stickyIndicesSet = new Set(props.stickyHeaderIndices);
        VirtualizedList._ensureClosestStickyHeader(props, stickyIndicesSet, renderMask, cellsAroundViewport.first);
      }
      return renderMask;
    }
  }, {
    key: "_initialRenderRegion",
    value: function _initialRenderRegion(props) {
      var _props$initialScrollI;
      var itemCount = props.getItemCount(props.data);
      var firstCellIndex = Math.max(0, Math.min(itemCount - 1, Math.floor((_props$initialScrollI = props.initialScrollIndex) != null ? _props$initialScrollI : 0)));
      var lastCellIndex = Math.min(itemCount, firstCellIndex + (0, _VirtualizedListProps.initialNumToRenderOrDefault)(props.initialNumToRender)) - 1;
      return {
        first: firstCellIndex,
        last: lastCellIndex
      };
    }
  }, {
    key: "_ensureClosestStickyHeader",
    value: function _ensureClosestStickyHeader(props, stickyIndicesSet, renderMask, cellIdx) {
      var stickyOffset = props.ListHeaderComponent ? 1 : 0;
      for (var itemIdx = cellIdx - 1; itemIdx >= 0; itemIdx--) {
        if (stickyIndicesSet.has(itemIdx + stickyOffset)) {
          renderMask.addCells({
            first: itemIdx,
            last: itemIdx
          });
          break;
        }
      }
    }
  }, {
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(newProps, prevState) {
      var _newProps$maintainVis, _newProps$maintainVis2;
      var itemCount = newProps.getItemCount(newProps.data);
      if (itemCount === prevState.renderMask.numCells()) {
        return prevState;
      }
      var maintainVisibleContentPositionAdjustment = null;
      var prevFirstVisibleItemKey = prevState.firstVisibleItemKey;
      var minIndexForVisible = (_newProps$maintainVis = (_newProps$maintainVis2 = newProps.maintainVisibleContentPosition) == null ? void 0 : _newProps$maintainVis2.minIndexForVisible) != null ? _newProps$maintainVis : 0;
      var newFirstVisibleItemKey = newProps.getItemCount(newProps.data) > minIndexForVisible ? VirtualizedList._getItemKey(newProps, minIndexForVisible) : null;
      if (newProps.maintainVisibleContentPosition != null && prevFirstVisibleItemKey != null && newFirstVisibleItemKey != null) {
        if (newFirstVisibleItemKey !== prevFirstVisibleItemKey) {
          var hint = itemCount - prevState.renderMask.numCells() + minIndexForVisible;
          var firstVisibleItemIndex = VirtualizedList._findItemIndexWithKey(newProps, prevFirstVisibleItemKey, hint);
          maintainVisibleContentPositionAdjustment = firstVisibleItemIndex != null ? firstVisibleItemIndex - minIndexForVisible : null;
        } else {
          maintainVisibleContentPositionAdjustment = null;
        }
      }
      var constrainedCells = VirtualizedList._constrainToItemCount(maintainVisibleContentPositionAdjustment != null ? {
        first: prevState.cellsAroundViewport.first + maintainVisibleContentPositionAdjustment,
        last: prevState.cellsAroundViewport.last + maintainVisibleContentPositionAdjustment
      } : prevState.cellsAroundViewport, newProps);
      return {
        cellsAroundViewport: constrainedCells,
        renderMask: VirtualizedList._createRenderMask(newProps, constrainedCells),
        firstVisibleItemKey: newFirstVisibleItemKey,
        pendingScrollUpdateCount: maintainVisibleContentPositionAdjustment != null ? prevState.pendingScrollUpdateCount + 1 : prevState.pendingScrollUpdateCount
      };
    }
  }, {
    key: "_constrainToItemCount",
    value: function _constrainToItemCount(cells, props) {
      var itemCount = props.getItemCount(props.data);
      var lastPossibleCellIndex = itemCount - 1;
      var maxToRenderPerBatch = (0, _VirtualizedListProps.maxToRenderPerBatchOrDefault)(props.maxToRenderPerBatch);
      var maxFirst = Math.max(0, lastPossibleCellIndex - maxToRenderPerBatch);
      return {
        first: (0, _clamp.default)(0, cells.first, maxFirst),
        last: Math.min(lastPossibleCellIndex, cells.last)
      };
    }
  }, {
    key: "_keyExtractor",
    value: function _keyExtractor(item, index, props) {
      if (props.keyExtractor != null) {
        return props.keyExtractor(item, index);
      }
      var key = (0, _VirtualizeUtils.keyExtractor)(item, index);
      if (key === String(index)) {
        _usedIndexForKey = true;
        if (item.type && item.type.displayName) {
          _keylessItemComponentName = item.type.displayName;
        }
      }
      return key;
    }
  }]);
}(_StateSafePureComponent.default);
VirtualizedList.contextType = _VirtualizedListContext.VirtualizedListContext;
var styles = _reactNative.StyleSheet.create({
  verticallyInverted: _reactNative.Platform.OS === 'android' ? {
    transform: [{
      scale: -1
    }]
  } : {
    transform: [{
      scaleY: -1
    }]
  },
  horizontallyInverted: {
    transform: [{
      scaleX: -1
    }]
  },
  debug: {
    flex: 1
  },
  debugOverlayBase: {
    position: 'absolute',
    top: 0,
    right: 0
  },
  debugOverlay: {
    bottom: 0,
    width: 20,
    borderColor: 'blue',
    borderWidth: 1
  },
  debugOverlayFrame: {
    left: 0,
    backgroundColor: 'orange'
  },
  debugOverlayFrameLast: {
    left: 0,
    borderColor: 'green',
    borderWidth: 2
  },
  debugOverlayFrameVis: {
    left: 0,
    borderColor: 'red',
    borderWidth: 2
  }
});
module.exports = VirtualizedList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX0JhdGNoaW5hdG9yIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9jbGFtcCIsIl9pbmZvTG9nIiwiX0NlbGxSZW5kZXJNYXNrIiwiX0NoaWxkTGlzdENvbGxlY3Rpb24iLCJfRmlsbFJhdGVIZWxwZXIiLCJfTGlzdE1ldHJpY3NBZ2dyZWdhdG9yIiwiX1N0YXRlU2FmZVB1cmVDb21wb25lbnQiLCJfVmlld2FiaWxpdHlIZWxwZXIiLCJfVmlydHVhbGl6ZWRMaXN0Q2VsbFJlbmRlcmVyIiwiX1ZpcnR1YWxpemVkTGlzdENvbnRleHQiLCJfVmlydHVhbGl6ZVV0aWxzIiwiX2ludmFyaWFudCIsIl9udWxsdGhyb3dzIiwiUmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9WaXJ0dWFsaXplZExpc3RQcm9wcyIsIl9qc3hSdW50aW1lIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiX2NhbGxTdXBlciIsIm8iLCJfZ2V0UHJvdG90eXBlT2YyIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJjb25zdHJ1Y3RvciIsImFwcGx5IiwiQm9vbGVhbiIsInByb3RvdHlwZSIsInZhbHVlT2YiLCJPTl9FREdFX1JFQUNIRURfRVBTSUxPTiIsIl91c2VkSW5kZXhGb3JLZXkiLCJfa2V5bGVzc0l0ZW1Db21wb25lbnROYW1lIiwiZ2V0U2Nyb2xsaW5nVGhyZXNob2xkIiwidGhyZXNob2xkIiwidmlzaWJsZUxlbmd0aCIsIlZpcnR1YWxpemVkTGlzdCIsIl9TdGF0ZVNhZmVQdXJlQ29tcG9uZSIsInByb3BzIiwiX3RoaXMkcHJvcHMkdXBkYXRlQ2VsIiwiX3RoaXMkcHJvcHMkbWFpbnRhaW5WIiwiX3RoaXMkcHJvcHMkbWFpbnRhaW5WMiIsIl90aGlzIiwiX2NsYXNzQ2FsbENoZWNrMiIsIl9nZXRTY3JvbGxNZXRyaWNzIiwiX3Njcm9sbE1ldHJpY3MiLCJfZ2V0T3V0ZXJtb3N0UGFyZW50TGlzdFJlZiIsIl9pc05lc3RlZFdpdGhTYW1lT3JpZW50YXRpb24iLCJjb250ZXh0IiwiZ2V0T3V0ZXJtb3N0UGFyZW50TGlzdFJlZiIsIl9yZWdpc3RlckFzTmVzdGVkQ2hpbGQiLCJjaGlsZExpc3QiLCJfbmVzdGVkQ2hpbGRMaXN0cyIsImFkZCIsInJlZiIsImNlbGxLZXkiLCJfaGFzSW50ZXJhY3RlZCIsInJlY29yZEludGVyYWN0aW9uIiwiX3VucmVnaXN0ZXJBc05lc3RlZENoaWxkIiwicmVtb3ZlIiwiX29uVXBkYXRlU2VwYXJhdG9ycyIsImtleXMiLCJuZXdQcm9wcyIsImZvckVhY2giLCJrZXkiLCJfY2VsbFJlZnMiLCJ1cGRhdGVTZXBhcmF0b3JQcm9wcyIsIl9nZXRTcGFjZXJLZXkiLCJpc1ZlcnRpY2FsIiwiX2xpc3RNZXRyaWNzIiwiTGlzdE1ldHJpY3NBZ2dyZWdhdG9yIiwiX2Zvb3Rlckxlbmd0aCIsIl9oYXNUcmlnZ2VyZWRJbml0aWFsU2Nyb2xsVG9JbmRleCIsIl9oYXNNb3JlIiwiX2hhc1dhcm5lZCIsIl9oZWFkZXJMZW5ndGgiLCJfaGlQcmlJblByb2dyZXNzIiwiX2luZGljZXNUb0tleXMiLCJNYXAiLCJfbGFzdEZvY3VzZWRDZWxsS2V5IiwiQ2hpbGRMaXN0Q29sbGVjdGlvbiIsIl9vZmZzZXRGcm9tUGFyZW50VmlydHVhbGl6ZWRMaXN0IiwiX3BlbmRpbmdWaWV3YWJpbGl0eVVwZGF0ZSIsIl9wcmV2UGFyZW50T2Zmc2V0IiwiZE9mZnNldCIsImR0Iiwib2Zmc2V0IiwidGltZXN0YW1wIiwidmVsb2NpdHkiLCJ6b29tU2NhbGUiLCJfc2Nyb2xsUmVmIiwiX3NlbnRTdGFydEZvckNvbnRlbnRMZW5ndGgiLCJfc2VudEVuZEZvckNvbnRlbnRMZW5ndGgiLCJfdmlld2FiaWxpdHlUdXBsZXMiLCJfY2FwdHVyZVNjcm9sbFJlZiIsIl9kZWZhdWx0UmVuZGVyU2Nyb2xsQ29tcG9uZW50Iiwib25SZWZyZXNoIiwianN4IiwiVmlldyIsImFzc2lnbiIsIl9wcm9wcyRyZWZyZXNoaW5nIiwiaW52YXJpYW50IiwicmVmcmVzaGluZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJTY3JvbGxWaWV3IiwicmVmcmVzaENvbnRyb2wiLCJSZWZyZXNoQ29udHJvbCIsInByb2dyZXNzVmlld09mZnNldCIsIl9vbkNlbGxMYXlvdXQiLCJjZWxsSW5kZXgiLCJsYXlvdXRIYXNDaGFuZ2VkIiwibm90aWZ5Q2VsbExheW91dCIsImxheW91dCIsIm5hdGl2ZUV2ZW50Iiwib3JpZW50YXRpb24iLCJfb3JpZW50YXRpb24iLCJfc2NoZWR1bGVDZWxsc1RvUmVuZGVyVXBkYXRlIiwiX3RyaWdnZXJSZW1lYXN1cmVGb3JDaGlsZExpc3RzSW5DZWxsIiwiX2NvbXB1dGVCbGFua25lc3MiLCJfdXBkYXRlVmlld2FibGVJdGVtcyIsInN0YXRlIiwiY2VsbHNBcm91bmRWaWV3cG9ydCIsIl9vbkNlbGxVbm1vdW50Iiwibm90aWZ5Q2VsbFVubW91bnRlZCIsIl9vbkxheW91dCIsIm1lYXN1cmVMYXlvdXRSZWxhdGl2ZVRvQ29udGFpbmluZ0xpc3QiLCJfc2VsZWN0TGVuZ3RoIiwib25MYXlvdXQiLCJfbWF5YmVDYWxsT25FZGdlUmVhY2hlZCIsIl9vbkxheW91dEVtcHR5IiwiX29uTGF5b3V0Rm9vdGVyIiwiX2dldEZvb3RlckNlbGxLZXkiLCJfb25MYXlvdXRIZWFkZXIiLCJfb25Db250ZW50U2l6ZUNoYW5nZSIsIndpZHRoIiwiaGVpZ2h0Iiwibm90aWZ5TGlzdENvbnRlbnRMYXlvdXQiLCJfbWF5YmVTY3JvbGxUb0luaXRpYWxTY3JvbGxJbmRleCIsIm9uQ29udGVudFNpemVDaGFuZ2UiLCJfY29udmVydFBhcmVudFNjcm9sbE1ldHJpY3MiLCJtZXRyaWNzIiwiY29udGVudExlbmd0aCIsImdldENvbnRlbnRMZW5ndGgiLCJfb25TY3JvbGwiLCJvblNjcm9sbCIsInRpbWVTdGFtcCIsImxheW91dE1lYXN1cmVtZW50IiwiY29udGVudFNpemUiLCJfb2Zmc2V0RnJvbVNjcm9sbEV2ZW50IiwiX3RoaXMkX2NvbnZlcnRQYXJlbnRTIiwiTWF0aCIsIm1heCIsInBlcmYiLCJpbmZvTG9nIiwicHJldkR0IiwicGVuZGluZ1Njcm9sbFVwZGF0ZUNvdW50Iiwic2V0U3RhdGUiLCJfZmlsbFJhdGVIZWxwZXIiLCJhY3RpdmF0ZSIsIl9vblNjcm9sbEJlZ2luRHJhZyIsInR1cGxlIiwidmlld2FiaWxpdHlIZWxwZXIiLCJvblNjcm9sbEJlZ2luRHJhZyIsIl9vblNjcm9sbEVuZERyYWciLCJfc2VsZWN0T2Zmc2V0Iiwib25TY3JvbGxFbmREcmFnIiwiX29uTW9tZW50dW1TY3JvbGxCZWdpbiIsIm9uTW9tZW50dW1TY3JvbGxCZWdpbiIsIl9vbk1vbWVudHVtU2Nyb2xsRW5kIiwib25Nb21lbnR1bVNjcm9sbEVuZCIsIl91cGRhdGVDZWxsc1RvUmVuZGVyIiwiX2FkanVzdENlbGxzQXJvdW5kVmlld3BvcnQiLCJyZW5kZXJNYXNrIiwiX2NyZWF0ZVJlbmRlck1hc2siLCJfZ2V0Tm9uVmlld3BvcnRSZW5kZXJSZWdpb25zIiwiZmlyc3QiLCJsYXN0IiwiZXF1YWxzIiwiX2NyZWF0ZVZpZXdUb2tlbiIsImluZGV4IiwiaXNWaWV3YWJsZSIsImRhdGEiLCJnZXRJdGVtIiwiaXRlbSIsIl9rZXlFeHRyYWN0b3IiLCJsYXN0Rm9jdXNlZENlbGxSZW5kZXJlciIsImZvY3VzZWRDZWxsSW5kZXgiLCJpdGVtQ291bnQiLCJnZXRJdGVtQ291bnQiLCJfZ2V0SXRlbUtleSIsImhlaWdodE9mQ2VsbHNCZWZvcmVGb2N1c2VkIiwiZ2V0Q2VsbE1ldHJpY3NBcHByb3giLCJsZW5ndGgiLCJoZWlnaHRPZkNlbGxzQWZ0ZXJGb2N1c2VkIiwiX2NoZWNrUHJvcHMiLCJGaWxsUmF0ZUhlbHBlciIsIl91cGRhdGVDZWxsc1RvUmVuZGVyQmF0Y2hlciIsIkJhdGNoaW5hdG9yIiwidXBkYXRlQ2VsbHNCYXRjaGluZ1BlcmlvZCIsInZpZXdhYmlsaXR5Q29uZmlnQ2FsbGJhY2tQYWlycyIsIm1hcCIsInBhaXIiLCJWaWV3YWJpbGl0eUhlbHBlciIsInZpZXdhYmlsaXR5Q29uZmlnIiwib25WaWV3YWJsZUl0ZW1zQ2hhbmdlZCIsIl90aGlzJHByb3BzIiwicHVzaCIsImluaXRpYWxSZW5kZXJSZWdpb24iLCJfaW5pdGlhbFJlbmRlclJlZ2lvbiIsIm1pbkluZGV4Rm9yVmlzaWJsZSIsIm1haW50YWluVmlzaWJsZUNvbnRlbnRQb3NpdGlvbiIsImZpcnN0VmlzaWJsZUl0ZW1LZXkiLCJpbml0aWFsU2Nyb2xsSW5kZXgiLCJfaW5oZXJpdHMyIiwiX2NyZWF0ZUNsYXNzMiIsInZhbHVlIiwic2Nyb2xsVG9FbmQiLCJwYXJhbXMiLCJhbmltYXRlZCIsInZlcnlMYXN0IiwiZnJhbWUiLCJzY3JvbGxUb09mZnNldCIsInNjcm9sbFRvSW5kZXgiLCJfdGhpcyRwcm9wczIiLCJnZXRJdGVtTGF5b3V0Iiwib25TY3JvbGxUb0luZGV4RmFpbGVkIiwidmlld09mZnNldCIsInZpZXdQb3NpdGlvbiIsImdldEhpZ2hlc3RNZWFzdXJlZENlbGxJbmRleCIsImF2ZXJhZ2VJdGVtTGVuZ3RoIiwiZ2V0QXZlcmFnZUNlbGxMZW5ndGgiLCJoaWdoZXN0TWVhc3VyZWRGcmFtZUluZGV4IiwiZmxvb3IiLCJnZXRDZWxsT2Zmc2V0QXBwcm94Iiwic2Nyb2xsVG9JdGVtIiwiX3RoaXMkcHJvcHMzIiwic2Nyb2xsUmVmIiwic2Nyb2xsVG8iLCJjb25zb2xlIiwid2FybiIsIl90aGlzJF9vcmllbnRhdGlvbiIsImhvcml6b250YWwiLCJydGwiLCJoYXNDb250ZW50TGVuZ3RoIiwiX3Njcm9sbFRvUGFyYW1zRnJvbU9mZnNldCIsIl90aGlzJF9vcmllbnRhdGlvbjIiLCJjYXJ0T2Zmc2V0IiwiY2FydGVzaWFuT2Zmc2V0IiwieCIsInkiLCJmbGFzaFNjcm9sbEluZGljYXRvcnMiLCJnZXRTY3JvbGxSZXNwb25kZXIiLCJnZXRTY3JvbGxhYmxlTm9kZSIsImZpbmROb2RlSGFuZGxlIiwiZ2V0U2Nyb2xsUmVmIiwic2V0TmF0aXZlUHJvcHMiLCJfZ2V0Q2VsbEtleSIsIl90aGlzJGNvbnRleHQiLCJoYXNNb3JlIiwid2luZG93U2l6ZSIsIl9faXNOYXRpdmUiLCJ3aW5kb3dTaXplT3JEZWZhdWx0IiwiX19ERVZfXyIsImZsZXhXcmFwIiwiZmxhdFN0eWxlcyIsIlN0eWxlU2hlZXQiLCJmbGF0dGVuIiwiY29udGVudENvbnRhaW5lclN0eWxlIiwib25FbmRSZWFjaGVkVGhyZXNob2xkIiwib25FbmRSZWFjaGVkVGhyZXNob2xkT3JEZWZhdWx0IiwiX3RoaXMkX3Njcm9sbE1ldHJpY3MiLCJkaXN0YW5jZUZyb21FbmQiLCJfY29uc3RyYWluVG9JdGVtQ291bnQiLCJuZXdDZWxsc0Fyb3VuZFZpZXdwb3J0IiwiZGlzYWJsZVZpcnR1YWxpemF0aW9uIiwicmVuZGVyQWhlYWQiLCJtYXhUb1JlbmRlclBlckJhdGNoT3JEZWZhdWx0IiwibWF4VG9SZW5kZXJQZXJCYXRjaCIsIm1pbiIsImNvbXB1dGVXaW5kb3dlZFJlbmRlckxpbWl0cyIsInNpemUiLCJjaGlsZElkeCIsIl9maW5kRmlyc3RDaGlsZFdpdGhNb3JlIiwiaWkiLCJjZWxsS2V5Rm9ySW5kZXgiLCJhbnlJbkNlbGwiLCJjb21wb25lbnREaWRNb3VudCIsInJlZ2lzdGVyQXNOZXN0ZWRDaGlsZCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwidW5yZWdpc3RlckFzTmVzdGVkQ2hpbGQiLCJkaXNwb3NlIiwiYWJvcnQiLCJkZWFjdGl2YXRlQW5kRmx1c2giLCJfcHVzaENlbGxzIiwiY2VsbHMiLCJzdGlja3lIZWFkZXJJbmRpY2VzIiwic3RpY2t5SW5kaWNlc0Zyb21Qcm9wcyIsImludmVyc2lvblN0eWxlIiwiX3RoaXMyIiwiX3RoaXMkcHJvcHM0IiwiQ2VsbFJlbmRlcmVyQ29tcG9uZW50IiwiSXRlbVNlcGFyYXRvckNvbXBvbmVudCIsIkxpc3RIZWFkZXJDb21wb25lbnQiLCJMaXN0SXRlbUNvbXBvbmVudCIsImRlYnVnIiwicmVuZGVySXRlbSIsInN0aWNreU9mZnNldCIsImVuZCIsInByZXZDZWxsS2V5IiwiX2xvb3AiLCJzaG91bGRMaXN0ZW5Gb3JMYXlvdXQiLCJlbmFibGVkIiwidW5kZWZpbmVkIiwib25VcGRhdGVTZXBhcmF0b3JzIiwib25DZWxsRm9jdXNDYXB0dXJlIiwiX29uQ2VsbEZvY3VzQ2FwdHVyZSIsIm9uVW5tb3VudCIsIm9uQ2VsbExheW91dCIsIm5lc3RlZENvbnRleHQiLCJob3Jpem9udGFsT3JEZWZhdWx0IiwicmVuZGVyIiwiX3RoaXMzIiwiX3RoaXMkcHJvcHMkc2Nyb2xsRXZlIiwiX3RoaXMkcHJvcHM1IiwiTGlzdEVtcHR5Q29tcG9uZW50IiwiTGlzdEZvb3RlckNvbXBvbmVudCIsIl90aGlzJHByb3BzNiIsImludmVydGVkIiwic3R5bGVzIiwiaG9yaXpvbnRhbGx5SW52ZXJ0ZWQiLCJ2ZXJ0aWNhbGx5SW52ZXJ0ZWQiLCJTZXQiLCJlbGVtZW50IiwiaXNWYWxpZEVsZW1lbnQiLCJWaXJ0dWFsaXplZExpc3RDZWxsQ29udGV4dFByb3ZpZGVyIiwiY2hpbGRyZW4iLCJjb2xsYXBzYWJsZSIsInN0eWxlIiwiY29tcG9zZSIsIkxpc3RIZWFkZXJDb21wb25lbnRTdHlsZSIsImNsb25lRWxlbWVudCIsImV2ZW50Iiwic3BhY2VyS2V5IiwicmVuZGVyUmVnaW9ucyIsImVudW1lcmF0ZVJlZ2lvbnMiLCJsYXN0UmVnaW9uIiwibGFzdFNwYWNlciIsImlzU3BhY2VyIiwic2VjdGlvbiIsImlzTGFzdFNwYWNlciIsImNvbnN0cmFpblRvTWVhc3VyZWQiLCJjbGFtcCIsImZpcnN0TWV0cmljcyIsImxhc3RNZXRyaWNzIiwic3BhY2VyU2l6ZSIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJMaXN0Rm9vdGVyQ29tcG9uZW50U3R5bGUiLCJzY3JvbGxQcm9wcyIsInNjcm9sbEV2ZW50VGhyb3R0bGUiLCJpbnZlcnRTdGlja3lIZWFkZXJzIiwiaXNJbnZlcnRlZFZpcnR1YWxpemVkTGlzdCIsImlubmVyUmV0IiwiVmlydHVhbGl6ZWRMaXN0Q29udGV4dFByb3ZpZGVyIiwiZ2V0U2Nyb2xsTWV0cmljcyIsInJlbmRlclNjcm9sbENvbXBvbmVudCIsInJldCIsIkNvbnRleHQiLCJDb25zdW1lciIsInNjcm9sbENvbnRleHQiLCJuZXN0aW5nIiwic2Nyb2xsRW5hYmxlZCIsImVycm9yIiwianN4cyIsIl9yZW5kZXJEZWJ1Z092ZXJsYXkiLCJjb21wb25lbnREaWRVcGRhdGUiLCJwcmV2UHJvcHMiLCJfdGhpcyRwcm9wczciLCJleHRyYURhdGEiLCJyZXNldFZpZXdhYmxlSW5kaWNlcyIsImhpUHJpSW5Qcm9ncmVzcyIsImNvbXB1dGVCbGFua25lc3MiLCJmb3JFYWNoSW5DZWxsIiwiX3RoaXM0IiwibWVhc3VyZUxheW91dCIsInNjcm9sbE1ldHJpY3MiLCJtZXRyaWNzQ2hhbmdlZCIsInN0YWNrIiwibm9ybWFsaXplIiwiZnJhbWVzSW5MYXlvdXQiLCJpc01vdW50ZWQiLCJ3aW5kb3dUb3AiLCJmcmFtZUxhc3QiLCJ3aW5kb3dMZW4iLCJ2aXNUb3AiLCJ2aXNMZW4iLCJkZWJ1Z092ZXJsYXlCYXNlIiwiZGVidWdPdmVybGF5IiwiZiIsImRlYnVnT3ZlcmxheUZyYW1lIiwidG9wIiwiZGVidWdPdmVybGF5RnJhbWVMYXN0IiwiZGVidWdPdmVybGF5RnJhbWVWaXMiLCJfcmVmMyIsIkkxOG5NYW5hZ2VyIiwiaXNSVEwiLCJfdGhpcyRwcm9wczgiLCJvblN0YXJ0UmVhY2hlZCIsIm9uU3RhcnRSZWFjaGVkVGhyZXNob2xkIiwib25FbmRSZWFjaGVkIiwiX3RoaXMkX3Njcm9sbE1ldHJpY3MyIiwiZGlzdGFuY2VGcm9tU3RhcnQiLCJERUZBVUxUX1RIUkVTSE9MRF9QWCIsInN0YXJ0VGhyZXNob2xkIiwiZW5kVGhyZXNob2xkIiwiaXNXaXRoaW5TdGFydFRocmVzaG9sZCIsImlzV2l0aGluRW5kVGhyZXNob2xkIiwiY29udGVudFdpZHRoIiwiY29udGVudEhlaWdodCIsImNvbnRlbnRPZmZzZXQiLCJudWxsdGhyb3dzIiwiX2UkbmF0aXZlRXZlbnQiLCJfdGhpcyRfb3JpZW50YXRpb24zIiwiX3Nob3VsZFJlbmRlcldpdGhQcmlvcml0eSIsInNjaGVkdWxlIiwiX3RoaXMkc3RhdGUkY2VsbHNBcm91IiwiX3RoaXMkX3Njcm9sbE1ldHJpY3MzIiwiaGlQcmkiLCJvblN0YXJ0UmVhY2hlZFRocmVzaG9sZE9yRGVmYXVsdCIsImRpc3RUb3AiLCJkaXN0Qm90dG9tIiwiX19nZXRMaXN0TWV0cmljcyIsIl90aGlzNSIsIm9uVXBkYXRlIiwiX2ZpbmRJdGVtSW5kZXhXaXRoS2V5IiwiaGludCIsImN1cktleSIsImFkZGl0aW9uYWxSZWdpb25zIiwiQ2VsbFJlbmRlck1hc2siLCJhbGxSZWdpb25zIiwiY29uY2F0IiwiX3RvQ29uc3VtYWJsZUFycmF5MiIsInJlZ2lvbiIsImFkZENlbGxzIiwiaW5pdGlhbFJlZ2lvbiIsInN0aWNreUluZGljZXNTZXQiLCJfZW5zdXJlQ2xvc2VzdFN0aWNreUhlYWRlciIsIl9wcm9wcyRpbml0aWFsU2Nyb2xsSSIsImZpcnN0Q2VsbEluZGV4IiwibGFzdENlbGxJbmRleCIsImluaXRpYWxOdW1Ub1JlbmRlck9yRGVmYXVsdCIsImluaXRpYWxOdW1Ub1JlbmRlciIsImNlbGxJZHgiLCJpdGVtSWR4IiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwicHJldlN0YXRlIiwiX25ld1Byb3BzJG1haW50YWluVmlzIiwiX25ld1Byb3BzJG1haW50YWluVmlzMiIsIm51bUNlbGxzIiwibWFpbnRhaW5WaXNpYmxlQ29udGVudFBvc2l0aW9uQWRqdXN0bWVudCIsInByZXZGaXJzdFZpc2libGVJdGVtS2V5IiwibmV3Rmlyc3RWaXNpYmxlSXRlbUtleSIsImZpcnN0VmlzaWJsZUl0ZW1JbmRleCIsImNvbnN0cmFpbmVkQ2VsbHMiLCJsYXN0UG9zc2libGVDZWxsSW5kZXgiLCJtYXhGaXJzdCIsImtleUV4dHJhY3RvciIsImRlZmF1bHRLZXlFeHRyYWN0b3IiLCJTdHJpbmciLCJ0eXBlIiwiZGlzcGxheU5hbWUiLCJTdGF0ZVNhZmVQdXJlQ29tcG9uZW50IiwiY29udGV4dFR5cGUiLCJWaXJ0dWFsaXplZExpc3RDb250ZXh0IiwiY3JlYXRlIiwiUGxhdGZvcm0iLCJPUyIsInRyYW5zZm9ybSIsInNjYWxlIiwic2NhbGVZIiwic2NhbGVYIiwiZmxleCIsInBvc2l0aW9uIiwicmlnaHQiLCJib3R0b20iLCJib3JkZXJDb2xvciIsImJvcmRlcldpZHRoIiwibGVmdCIsImJhY2tncm91bmRDb2xvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJWaXJ0dWFsaXplZExpc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IHR5cGUge1Njcm9sbFJlc3BvbmRlclR5cGV9IGZyb20gJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvQ29tcG9uZW50cy9TY3JvbGxWaWV3L1Njcm9sbFZpZXcnO1xuaW1wb3J0IHR5cGUge1ZpZXdTdHlsZVByb3B9IGZyb20gJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvU3R5bGVTaGVldC9TdHlsZVNoZWV0JztcbmltcG9ydCB0eXBlIHtcbiAgTGF5b3V0RXZlbnQsXG4gIFNjcm9sbEV2ZW50LFxufSBmcm9tICdyZWFjdC1uYXRpdmUvTGlicmFyaWVzL1R5cGVzL0NvcmVFdmVudFR5cGVzJztcbmltcG9ydCB0eXBlIHtWaWV3VG9rZW59IGZyb20gJy4vVmlld2FiaWxpdHlIZWxwZXInO1xuaW1wb3J0IHR5cGUge1xuICBJdGVtLFxuICBQcm9wcyxcbiAgUmVuZGVySXRlbVByb3BzLFxuICBSZW5kZXJJdGVtVHlwZSxcbiAgU2VwYXJhdG9ycyxcbn0gZnJvbSAnLi9WaXJ0dWFsaXplZExpc3RQcm9wcyc7XG5pbXBvcnQgdHlwZSB7Q2VsbE1ldHJpY1Byb3BzLCBMaXN0T3JpZW50YXRpb259IGZyb20gJy4vTGlzdE1ldHJpY3NBZ2dyZWdhdG9yJztcblxuaW1wb3J0IHtcbiAgSTE4bk1hbmFnZXIsXG4gIFBsYXRmb3JtLFxuICBSZWZyZXNoQ29udHJvbCxcbiAgU2Nyb2xsVmlldyxcbiAgVmlldyxcbiAgU3R5bGVTaGVldCxcbiAgZmluZE5vZGVIYW5kbGUsXG59IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgQmF0Y2hpbmF0b3IgZnJvbSAnLi4vSW50ZXJhY3Rpb24vQmF0Y2hpbmF0b3InO1xuaW1wb3J0IGNsYW1wIGZyb20gJy4uL1V0aWxpdGllcy9jbGFtcCc7XG5pbXBvcnQgaW5mb0xvZyBmcm9tICcuLi9VdGlsaXRpZXMvaW5mb0xvZyc7XG5pbXBvcnQge0NlbGxSZW5kZXJNYXNrfSBmcm9tICcuL0NlbGxSZW5kZXJNYXNrJztcbmltcG9ydCBDaGlsZExpc3RDb2xsZWN0aW9uIGZyb20gJy4vQ2hpbGRMaXN0Q29sbGVjdGlvbic7XG5pbXBvcnQgRmlsbFJhdGVIZWxwZXIgZnJvbSAnLi9GaWxsUmF0ZUhlbHBlcic7XG5pbXBvcnQgTGlzdE1ldHJpY3NBZ2dyZWdhdG9yIGZyb20gJy4vTGlzdE1ldHJpY3NBZ2dyZWdhdG9yJztcbmltcG9ydCBTdGF0ZVNhZmVQdXJlQ29tcG9uZW50IGZyb20gJy4vU3RhdGVTYWZlUHVyZUNvbXBvbmVudCc7XG5pbXBvcnQgVmlld2FiaWxpdHlIZWxwZXIgZnJvbSAnLi9WaWV3YWJpbGl0eUhlbHBlcic7XG5pbXBvcnQgQ2VsbFJlbmRlcmVyIGZyb20gJy4vVmlydHVhbGl6ZWRMaXN0Q2VsbFJlbmRlcmVyJztcbmltcG9ydCB7XG4gIFZpcnR1YWxpemVkTGlzdENlbGxDb250ZXh0UHJvdmlkZXIsXG4gIFZpcnR1YWxpemVkTGlzdENvbnRleHQsXG4gIFZpcnR1YWxpemVkTGlzdENvbnRleHRQcm92aWRlcixcbn0gZnJvbSAnLi9WaXJ0dWFsaXplZExpc3RDb250ZXh0LmpzJztcbmltcG9ydCB7XG4gIGNvbXB1dGVXaW5kb3dlZFJlbmRlckxpbWl0cyxcbiAga2V5RXh0cmFjdG9yIGFzIGRlZmF1bHRLZXlFeHRyYWN0b3IsXG59IGZyb20gJy4vVmlydHVhbGl6ZVV0aWxzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCBudWxsdGhyb3dzIGZyb20gJ251bGx0aHJvd3MnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQge1xuICBob3Jpem9udGFsT3JEZWZhdWx0LFxuICBpbml0aWFsTnVtVG9SZW5kZXJPckRlZmF1bHQsXG4gIG1heFRvUmVuZGVyUGVyQmF0Y2hPckRlZmF1bHQsXG4gIG9uU3RhcnRSZWFjaGVkVGhyZXNob2xkT3JEZWZhdWx0LFxuICBvbkVuZFJlYWNoZWRUaHJlc2hvbGRPckRlZmF1bHQsXG4gIHdpbmRvd1NpemVPckRlZmF1bHQsXG59IGZyb20gJy4vVmlydHVhbGl6ZWRMaXN0UHJvcHMnO1xuXG5leHBvcnQgdHlwZSB7UmVuZGVySXRlbVByb3BzLCBSZW5kZXJJdGVtVHlwZSwgU2VwYXJhdG9yc307XG5cbmNvbnN0IE9OX0VER0VfUkVBQ0hFRF9FUFNJTE9OID0gMC4wMDE7XG5cbmxldCBfdXNlZEluZGV4Rm9yS2V5ID0gZmFsc2U7XG5sZXQgX2tleWxlc3NJdGVtQ29tcG9uZW50TmFtZTogc3RyaW5nID0gJyc7XG5cbnR5cGUgVmlld2FiaWxpdHlIZWxwZXJDYWxsYmFja1R1cGxlID0ge1xuICB2aWV3YWJpbGl0eUhlbHBlcjogVmlld2FiaWxpdHlIZWxwZXIsXG4gIG9uVmlld2FibGVJdGVtc0NoYW5nZWQ6IChpbmZvOiB7XG4gICAgdmlld2FibGVJdGVtczogQXJyYXk8Vmlld1Rva2VuPixcbiAgICBjaGFuZ2VkOiBBcnJheTxWaWV3VG9rZW4+LFxuICAgIC4uLlxuICB9KSA9PiB2b2lkLFxuICAuLi5cbn07XG5cbnR5cGUgU3RhdGUgPSB7XG4gIHJlbmRlck1hc2s6IENlbGxSZW5kZXJNYXNrLFxuICBjZWxsc0Fyb3VuZFZpZXdwb3J0OiB7Zmlyc3Q6IG51bWJlciwgbGFzdDogbnVtYmVyfSxcbiAgLy8gVXNlZCB0byB0cmFjayBpdGVtcyBhZGRlZCBhdCB0aGUgc3RhcnQgb2YgdGhlIGxpc3QgZm9yIG1haW50YWluVmlzaWJsZUNvbnRlbnRQb3NpdGlvbi5cbiAgZmlyc3RWaXNpYmxlSXRlbUtleTogP3N0cmluZyxcbiAgLy8gV2hlbiA+IDAgdGhlIHNjcm9sbCBwb3NpdGlvbiBhdmFpbGFibGUgaW4gSlMgaXMgY29uc2lkZXJlZCBzdGFsZSBhbmQgc2hvdWxkIG5vdCBiZSB1c2VkLlxuICBwZW5kaW5nU2Nyb2xsVXBkYXRlQ291bnQ6IG51bWJlcixcbn07XG5cbmZ1bmN0aW9uIGdldFNjcm9sbGluZ1RocmVzaG9sZCh0aHJlc2hvbGQ6IG51bWJlciwgdmlzaWJsZUxlbmd0aDogbnVtYmVyKSB7XG4gIHJldHVybiAodGhyZXNob2xkICogdmlzaWJsZUxlbmd0aCkgLyAyO1xufVxuXG4vKipcbiAqIEJhc2UgaW1wbGVtZW50YXRpb24gZm9yIHRoZSBtb3JlIGNvbnZlbmllbnQgW2A8RmxhdExpc3Q+YF0oaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9mbGF0bGlzdClcbiAqIGFuZCBbYDxTZWN0aW9uTGlzdD5gXShodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3NlY3Rpb25saXN0KSBjb21wb25lbnRzLCB3aGljaCBhcmUgYWxzbyBiZXR0ZXJcbiAqIGRvY3VtZW50ZWQuIEluIGdlbmVyYWwsIHRoaXMgc2hvdWxkIG9ubHkgcmVhbGx5IGJlIHVzZWQgaWYgeW91IG5lZWQgbW9yZSBmbGV4aWJpbGl0eSB0aGFuXG4gKiBgRmxhdExpc3RgIHByb3ZpZGVzLCBlLmcuIGZvciB1c2Ugd2l0aCBpbW11dGFibGUgZGF0YSBpbnN0ZWFkIG9mIHBsYWluIGFycmF5cy5cbiAqXG4gKiBWaXJ0dWFsaXphdGlvbiBtYXNzaXZlbHkgaW1wcm92ZXMgbWVtb3J5IGNvbnN1bXB0aW9uIGFuZCBwZXJmb3JtYW5jZSBvZiBsYXJnZSBsaXN0cyBieVxuICogbWFpbnRhaW5pbmcgYSBmaW5pdGUgcmVuZGVyIHdpbmRvdyBvZiBhY3RpdmUgaXRlbXMgYW5kIHJlcGxhY2luZyBhbGwgaXRlbXMgb3V0c2lkZSBvZiB0aGUgcmVuZGVyXG4gKiB3aW5kb3cgd2l0aCBhcHByb3ByaWF0ZWx5IHNpemVkIGJsYW5rIHNwYWNlLiBUaGUgd2luZG93IGFkYXB0cyB0byBzY3JvbGxpbmcgYmVoYXZpb3IsIGFuZCBpdGVtc1xuICogYXJlIHJlbmRlcmVkIGluY3JlbWVudGFsbHkgd2l0aCBsb3ctcHJpIChhZnRlciBhbnkgcnVubmluZyBpbnRlcmFjdGlvbnMpIGlmIHRoZXkgYXJlIGZhciBmcm9tIHRoZVxuICogdmlzaWJsZSBhcmVhLCBvciB3aXRoIGhpLXByaSBvdGhlcndpc2UgdG8gbWluaW1pemUgdGhlIHBvdGVudGlhbCBvZiBzZWVpbmcgYmxhbmsgc3BhY2UuXG4gKlxuICogU29tZSBjYXZlYXRzOlxuICpcbiAqIC0gSW50ZXJuYWwgc3RhdGUgaXMgbm90IHByZXNlcnZlZCB3aGVuIGNvbnRlbnQgc2Nyb2xscyBvdXQgb2YgdGhlIHJlbmRlciB3aW5kb3cuIE1ha2Ugc3VyZSBhbGxcbiAqICAgeW91ciBkYXRhIGlzIGNhcHR1cmVkIGluIHRoZSBpdGVtIGRhdGEgb3IgZXh0ZXJuYWwgc3RvcmVzIGxpa2UgRmx1eCwgUmVkdXgsIG9yIFJlbGF5LlxuICogLSBUaGlzIGlzIGEgYFB1cmVDb21wb25lbnRgIHdoaWNoIG1lYW5zIHRoYXQgaXQgd2lsbCBub3QgcmUtcmVuZGVyIGlmIGBwcm9wc2AgcmVtYWluIHNoYWxsb3ctXG4gKiAgIGVxdWFsLiBNYWtlIHN1cmUgdGhhdCBldmVyeXRoaW5nIHlvdXIgYHJlbmRlckl0ZW1gIGZ1bmN0aW9uIGRlcGVuZHMgb24gaXMgcGFzc2VkIGFzIGEgcHJvcFxuICogICAoZS5nLiBgZXh0cmFEYXRhYCkgdGhhdCBpcyBub3QgYD09PWAgYWZ0ZXIgdXBkYXRlcywgb3RoZXJ3aXNlIHlvdXIgVUkgbWF5IG5vdCB1cGRhdGUgb25cbiAqICAgY2hhbmdlcy4gVGhpcyBpbmNsdWRlcyB0aGUgYGRhdGFgIHByb3AgYW5kIHBhcmVudCBjb21wb25lbnQgc3RhdGUuXG4gKiAtIEluIG9yZGVyIHRvIGNvbnN0cmFpbiBtZW1vcnkgYW5kIGVuYWJsZSBzbW9vdGggc2Nyb2xsaW5nLCBjb250ZW50IGlzIHJlbmRlcmVkIGFzeW5jaHJvbm91c2x5XG4gKiAgIG9mZnNjcmVlbi4gVGhpcyBtZWFucyBpdCdzIHBvc3NpYmxlIHRvIHNjcm9sbCBmYXN0ZXIgdGhhbiB0aGUgZmlsbCByYXRlIGFuZHMgbW9tZW50YXJpbHkgc2VlXG4gKiAgIGJsYW5rIGNvbnRlbnQuIFRoaXMgaXMgYSB0cmFkZW9mZiB0aGF0IGNhbiBiZSBhZGp1c3RlZCB0byBzdWl0IHRoZSBuZWVkcyBvZiBlYWNoIGFwcGxpY2F0aW9uLFxuICogICBhbmQgd2UgYXJlIHdvcmtpbmcgb24gaW1wcm92aW5nIGl0IGJlaGluZCB0aGUgc2NlbmVzLlxuICogLSBCeSBkZWZhdWx0LCB0aGUgbGlzdCBsb29rcyBmb3IgYSBga2V5YCBvciBgaWRgIHByb3Agb24gZWFjaCBpdGVtIGFuZCB1c2VzIHRoYXQgZm9yIHRoZSBSZWFjdCBrZXkuXG4gKiAgIEFsdGVybmF0aXZlbHksIHlvdSBjYW4gcHJvdmlkZSBhIGN1c3RvbSBga2V5RXh0cmFjdG9yYCBwcm9wLlxuICogLSBBcyBhbiBlZmZvcnQgdG8gcmVtb3ZlIGRlZmF1bHRQcm9wcywgdXNlIGhlbHBlciBmdW5jdGlvbnMgd2hlbiByZWZlcmVuY2luZyBjZXJ0YWluIHByb3BzXG4gKlxuICovXG5jbGFzcyBWaXJ0dWFsaXplZExpc3QgZXh0ZW5kcyBTdGF0ZVNhZmVQdXJlQ29tcG9uZW50PFByb3BzLCBTdGF0ZT4ge1xuICBzdGF0aWMgY29udGV4dFR5cGU6IHR5cGVvZiBWaXJ0dWFsaXplZExpc3RDb250ZXh0ID0gVmlydHVhbGl6ZWRMaXN0Q29udGV4dDtcblxuICAvLyBzY3JvbGxUb0VuZCBtYXkgYmUgamFua3kgd2l0aG91dCBnZXRJdGVtTGF5b3V0IHByb3BcbiAgc2Nyb2xsVG9FbmQocGFyYW1zPzogP3thbmltYXRlZD86ID9ib29sZWFuLCAuLi59KSB7XG4gICAgY29uc3QgYW5pbWF0ZWQgPSBwYXJhbXMgPyBwYXJhbXMuYW5pbWF0ZWQgOiB0cnVlO1xuICAgIGNvbnN0IHZlcnlMYXN0ID0gdGhpcy5wcm9wcy5nZXRJdGVtQ291bnQodGhpcy5wcm9wcy5kYXRhKSAtIDE7XG4gICAgaWYgKHZlcnlMYXN0IDwgMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBmcmFtZSA9IHRoaXMuX2xpc3RNZXRyaWNzLmdldENlbGxNZXRyaWNzQXBwcm94KHZlcnlMYXN0LCB0aGlzLnByb3BzKTtcbiAgICBjb25zdCBvZmZzZXQgPSBNYXRoLm1heChcbiAgICAgIDAsXG4gICAgICBmcmFtZS5vZmZzZXQgK1xuICAgICAgICBmcmFtZS5sZW5ndGggK1xuICAgICAgICB0aGlzLl9mb290ZXJMZW5ndGggLVxuICAgICAgICB0aGlzLl9zY3JvbGxNZXRyaWNzLnZpc2libGVMZW5ndGgsXG4gICAgKTtcblxuICAgIC8vIFRPRE86IGNvbnNpZGVyIHVzaW5nIGByZWYuc2Nyb2xsVG9FbmRgIGRpcmVjdGx5XG4gICAgdGhpcy5zY3JvbGxUb09mZnNldCh7YW5pbWF0ZWQsIG9mZnNldH0pO1xuICB9XG5cbiAgLy8gc2Nyb2xsVG9JbmRleCBtYXkgYmUgamFua3kgd2l0aG91dCBnZXRJdGVtTGF5b3V0IHByb3BcbiAgc2Nyb2xsVG9JbmRleChwYXJhbXM6IHtcbiAgICBhbmltYXRlZD86ID9ib29sZWFuLFxuICAgIGluZGV4OiBudW1iZXIsXG4gICAgdmlld09mZnNldD86IG51bWJlcixcbiAgICB2aWV3UG9zaXRpb24/OiBudW1iZXIsXG4gICAgLi4uXG4gIH0pOiAkRmxvd0ZpeE1lIHtcbiAgICBjb25zdCB7ZGF0YSwgZ2V0SXRlbUNvdW50LCBnZXRJdGVtTGF5b3V0LCBvblNjcm9sbFRvSW5kZXhGYWlsZWR9ID1cbiAgICAgIHRoaXMucHJvcHM7XG4gICAgY29uc3Qge2FuaW1hdGVkLCBpbmRleCwgdmlld09mZnNldCwgdmlld1Bvc2l0aW9ufSA9IHBhcmFtcztcbiAgICBpbnZhcmlhbnQoXG4gICAgICBpbmRleCA+PSAwLFxuICAgICAgYHNjcm9sbFRvSW5kZXggb3V0IG9mIHJhbmdlOiByZXF1ZXN0ZWQgaW5kZXggJHtpbmRleH0gYnV0IG1pbmltdW0gaXMgMGAsXG4gICAgKTtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBnZXRJdGVtQ291bnQoZGF0YSkgPj0gMSxcbiAgICAgIGBzY3JvbGxUb0luZGV4IG91dCBvZiByYW5nZTogaXRlbSBsZW5ndGggJHtnZXRJdGVtQ291bnQoXG4gICAgICAgIGRhdGEsXG4gICAgICApfSBidXQgbWluaW11bSBpcyAxYCxcbiAgICApO1xuICAgIGludmFyaWFudChcbiAgICAgIGluZGV4IDwgZ2V0SXRlbUNvdW50KGRhdGEpLFxuICAgICAgYHNjcm9sbFRvSW5kZXggb3V0IG9mIHJhbmdlOiByZXF1ZXN0ZWQgaW5kZXggJHtpbmRleH0gaXMgb3V0IG9mIDAgdG8gJHtcbiAgICAgICAgZ2V0SXRlbUNvdW50KGRhdGEpIC0gMVxuICAgICAgfWAsXG4gICAgKTtcbiAgICBpZiAoXG4gICAgICAhZ2V0SXRlbUxheW91dCAmJlxuICAgICAgaW5kZXggPiB0aGlzLl9saXN0TWV0cmljcy5nZXRIaWdoZXN0TWVhc3VyZWRDZWxsSW5kZXgoKVxuICAgICkge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICAhIW9uU2Nyb2xsVG9JbmRleEZhaWxlZCxcbiAgICAgICAgJ3Njcm9sbFRvSW5kZXggc2hvdWxkIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBnZXRJdGVtTGF5b3V0IG9yIG9uU2Nyb2xsVG9JbmRleEZhaWxlZCwgJyArXG4gICAgICAgICAgJ290aGVyd2lzZSB0aGVyZSBpcyBubyB3YXkgdG8ga25vdyB0aGUgbG9jYXRpb24gb2Ygb2Zmc2NyZWVuIGluZGljZXMgb3IgaGFuZGxlIGZhaWx1cmVzLicsXG4gICAgICApO1xuICAgICAgb25TY3JvbGxUb0luZGV4RmFpbGVkKHtcbiAgICAgICAgYXZlcmFnZUl0ZW1MZW5ndGg6IHRoaXMuX2xpc3RNZXRyaWNzLmdldEF2ZXJhZ2VDZWxsTGVuZ3RoKCksXG4gICAgICAgIGhpZ2hlc3RNZWFzdXJlZEZyYW1lSW5kZXg6XG4gICAgICAgICAgdGhpcy5fbGlzdE1ldHJpY3MuZ2V0SGlnaGVzdE1lYXN1cmVkQ2VsbEluZGV4KCksXG4gICAgICAgIGluZGV4LFxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGZyYW1lID0gdGhpcy5fbGlzdE1ldHJpY3MuZ2V0Q2VsbE1ldHJpY3NBcHByb3goXG4gICAgICBNYXRoLmZsb29yKGluZGV4KSxcbiAgICAgIHRoaXMucHJvcHMsXG4gICAgKTtcbiAgICBjb25zdCBvZmZzZXQgPVxuICAgICAgTWF0aC5tYXgoXG4gICAgICAgIDAsXG4gICAgICAgIHRoaXMuX2xpc3RNZXRyaWNzLmdldENlbGxPZmZzZXRBcHByb3goaW5kZXgsIHRoaXMucHJvcHMpIC1cbiAgICAgICAgICAodmlld1Bvc2l0aW9uIHx8IDApICpcbiAgICAgICAgICAgICh0aGlzLl9zY3JvbGxNZXRyaWNzLnZpc2libGVMZW5ndGggLSBmcmFtZS5sZW5ndGgpLFxuICAgICAgKSAtICh2aWV3T2Zmc2V0IHx8IDApO1xuXG4gICAgdGhpcy5zY3JvbGxUb09mZnNldCh7b2Zmc2V0LCBhbmltYXRlZH0pO1xuICB9XG5cbiAgLy8gc2Nyb2xsVG9JdGVtIG1heSBiZSBqYW5reSB3aXRob3V0IGdldEl0ZW1MYXlvdXQgcHJvcC4gUmVxdWlyZWQgbGluZWFyIHNjYW4gdGhyb3VnaCBpdGVtcyAtXG4gIC8vIHVzZSBzY3JvbGxUb0luZGV4IGluc3RlYWQgaWYgcG9zc2libGUuXG4gIHNjcm9sbFRvSXRlbShwYXJhbXM6IHtcbiAgICBhbmltYXRlZD86ID9ib29sZWFuLFxuICAgIGl0ZW06IEl0ZW0sXG4gICAgdmlld09mZnNldD86IG51bWJlcixcbiAgICB2aWV3UG9zaXRpb24/OiBudW1iZXIsXG4gICAgLi4uXG4gIH0pIHtcbiAgICBjb25zdCB7aXRlbX0gPSBwYXJhbXM7XG4gICAgY29uc3Qge2RhdGEsIGdldEl0ZW0sIGdldEl0ZW1Db3VudH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGl0ZW1Db3VudCA9IGdldEl0ZW1Db3VudChkYXRhKTtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgaXRlbUNvdW50OyBpbmRleCsrKSB7XG4gICAgICBpZiAoZ2V0SXRlbShkYXRhLCBpbmRleCkgPT09IGl0ZW0pIHtcbiAgICAgICAgdGhpcy5zY3JvbGxUb0luZGV4KHsuLi5wYXJhbXMsIGluZGV4fSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTY3JvbGwgdG8gYSBzcGVjaWZpYyBjb250ZW50IHBpeGVsIG9mZnNldCBpbiB0aGUgbGlzdC5cbiAgICpcbiAgICogUGFyYW0gYG9mZnNldGAgZXhwZWN0cyB0aGUgb2Zmc2V0IHRvIHNjcm9sbCB0by5cbiAgICogSW4gY2FzZSBvZiBgaG9yaXpvbnRhbGAgaXMgdHJ1ZSwgdGhlIG9mZnNldCBpcyB0aGUgeC12YWx1ZSxcbiAgICogaW4gYW55IG90aGVyIGNhc2UgdGhlIG9mZnNldCBpcyB0aGUgeS12YWx1ZS5cbiAgICpcbiAgICogUGFyYW0gYGFuaW1hdGVkYCAoYHRydWVgIGJ5IGRlZmF1bHQpIGRlZmluZXMgd2hldGhlciB0aGUgbGlzdFxuICAgKiBzaG91bGQgZG8gYW4gYW5pbWF0aW9uIHdoaWxlIHNjcm9sbGluZy5cbiAgICovXG4gIHNjcm9sbFRvT2Zmc2V0KHBhcmFtczoge2FuaW1hdGVkPzogP2Jvb2xlYW4sIG9mZnNldDogbnVtYmVyLCAuLi59KSB7XG4gICAgY29uc3Qge2FuaW1hdGVkLCBvZmZzZXR9ID0gcGFyYW1zO1xuICAgIGNvbnN0IHNjcm9sbFJlZiA9IHRoaXMuX3Njcm9sbFJlZjtcblxuICAgIGlmIChzY3JvbGxSZWYgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzY3JvbGxSZWYuc2Nyb2xsVG8gPT0gbnVsbCkge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnTm8gc2Nyb2xsVG8gbWV0aG9kIHByb3ZpZGVkLiBUaGlzIG1heSBiZSBiZWNhdXNlIHlvdSBoYXZlIHR3byBuZXN0ZWQgJyArXG4gICAgICAgICAgJ1ZpcnR1YWxpemVkTGlzdHMgd2l0aCB0aGUgc2FtZSBvcmllbnRhdGlvbiwgb3IgYmVjYXVzZSB5b3UgYXJlICcgK1xuICAgICAgICAgICd1c2luZyBhIGN1c3RvbSBjb21wb25lbnQgdGhhdCBkb2VzIG5vdCBpbXBsZW1lbnQgc2Nyb2xsVG8uJyxcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qge2hvcml6b250YWwsIHJ0bH0gPSB0aGlzLl9vcmllbnRhdGlvbigpO1xuICAgIGlmIChob3Jpem9udGFsICYmIHJ0bCAmJiAhdGhpcy5fbGlzdE1ldHJpY3MuaGFzQ29udGVudExlbmd0aCgpKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdzY3JvbGxUb09mZnNldCBtYXkgbm90IGJlIGNhbGxlZCBpbiBSVEwgYmVmb3JlIGNvbnRlbnQgaXMgbGFpZCBvdXQnLFxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzY3JvbGxSZWYuc2Nyb2xsVG8oe1xuICAgICAgYW5pbWF0ZWQsXG4gICAgICAuLi50aGlzLl9zY3JvbGxUb1BhcmFtc0Zyb21PZmZzZXQob2Zmc2V0KSxcbiAgICB9KTtcbiAgfVxuXG4gIF9zY3JvbGxUb1BhcmFtc0Zyb21PZmZzZXQob2Zmc2V0OiBudW1iZXIpOiB7eD86IG51bWJlciwgeT86IG51bWJlcn0ge1xuICAgIGNvbnN0IHtob3Jpem9udGFsLCBydGx9ID0gdGhpcy5fb3JpZW50YXRpb24oKTtcbiAgICBpZiAoaG9yaXpvbnRhbCAmJiBydGwpIHtcbiAgICAgIC8vIEFkZCB0aGUgdmlzaWJsZSBsZW5ndGggb2YgdGhlIHNjcm9sbHZpZXcgc28gdGhhdCB0aGUgb2Zmc2V0IGlzIHJpZ2h0LWFsaWduZWRcbiAgICAgIGNvbnN0IGNhcnRPZmZzZXQgPSB0aGlzLl9saXN0TWV0cmljcy5jYXJ0ZXNpYW5PZmZzZXQoXG4gICAgICAgIG9mZnNldCArIHRoaXMuX3Njcm9sbE1ldHJpY3MudmlzaWJsZUxlbmd0aCxcbiAgICAgICk7XG4gICAgICByZXR1cm4gaG9yaXpvbnRhbCA/IHt4OiBjYXJ0T2Zmc2V0fSA6IHt5OiBjYXJ0T2Zmc2V0fTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGhvcml6b250YWwgPyB7eDogb2Zmc2V0fSA6IHt5OiBvZmZzZXR9O1xuICAgIH1cbiAgfVxuXG4gIHJlY29yZEludGVyYWN0aW9uKCkge1xuICAgIHRoaXMuX25lc3RlZENoaWxkTGlzdHMuZm9yRWFjaChjaGlsZExpc3QgPT4ge1xuICAgICAgY2hpbGRMaXN0LnJlY29yZEludGVyYWN0aW9uKCk7XG4gICAgfSk7XG4gICAgdGhpcy5fdmlld2FiaWxpdHlUdXBsZXMuZm9yRWFjaCh0ID0+IHtcbiAgICAgIHQudmlld2FiaWxpdHlIZWxwZXIucmVjb3JkSW50ZXJhY3Rpb24oKTtcbiAgICB9KTtcbiAgICB0aGlzLl91cGRhdGVWaWV3YWJsZUl0ZW1zKHRoaXMucHJvcHMsIHRoaXMuc3RhdGUuY2VsbHNBcm91bmRWaWV3cG9ydCk7XG4gIH1cblxuICBmbGFzaFNjcm9sbEluZGljYXRvcnMoKSB7XG4gICAgaWYgKHRoaXMuX3Njcm9sbFJlZiA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fc2Nyb2xsUmVmLmZsYXNoU2Nyb2xsSW5kaWNhdG9ycygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIGEgaGFuZGxlIHRvIHRoZSB1bmRlcmx5aW5nIHNjcm9sbCByZXNwb25kZXIuXG4gICAqIE5vdGUgdGhhdCBgdGhpcy5fc2Nyb2xsUmVmYCBtaWdodCBub3QgYmUgYSBgU2Nyb2xsVmlld2AsIHNvIHdlXG4gICAqIG5lZWQgdG8gY2hlY2sgdGhhdCBpdCByZXNwb25kcyB0byBgZ2V0U2Nyb2xsUmVzcG9uZGVyYCBiZWZvcmUgY2FsbGluZyBpdC5cbiAgICovXG4gIGdldFNjcm9sbFJlc3BvbmRlcigpOiA/U2Nyb2xsUmVzcG9uZGVyVHlwZSB7XG4gICAgaWYgKHRoaXMuX3Njcm9sbFJlZiAmJiB0aGlzLl9zY3JvbGxSZWYuZ2V0U2Nyb2xsUmVzcG9uZGVyKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2Nyb2xsUmVmLmdldFNjcm9sbFJlc3BvbmRlcigpO1xuICAgIH1cbiAgfVxuXG4gIGdldFNjcm9sbGFibGVOb2RlKCk6ID9udW1iZXIge1xuICAgIGlmICh0aGlzLl9zY3JvbGxSZWYgJiYgdGhpcy5fc2Nyb2xsUmVmLmdldFNjcm9sbGFibGVOb2RlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2Nyb2xsUmVmLmdldFNjcm9sbGFibGVOb2RlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmaW5kTm9kZUhhbmRsZSh0aGlzLl9zY3JvbGxSZWYpO1xuICAgIH1cbiAgfVxuXG4gIGdldFNjcm9sbFJlZigpOlxuICAgIHwgP1JlYWN0LkVsZW1lbnRSZWY8dHlwZW9mIFNjcm9sbFZpZXc+XG4gICAgfCA/UmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgVmlldz4ge1xuICAgIGlmICh0aGlzLl9zY3JvbGxSZWYgJiYgdGhpcy5fc2Nyb2xsUmVmLmdldFNjcm9sbFJlZikge1xuICAgICAgcmV0dXJuIHRoaXMuX3Njcm9sbFJlZi5nZXRTY3JvbGxSZWYoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuX3Njcm9sbFJlZjtcbiAgICB9XG4gIH1cblxuICBzZXROYXRpdmVQcm9wcyhwcm9wczogT2JqZWN0KSB7XG4gICAgaWYgKHRoaXMuX3Njcm9sbFJlZikge1xuICAgICAgdGhpcy5fc2Nyb2xsUmVmLnNldE5hdGl2ZVByb3BzKHByb3BzKTtcbiAgICB9XG4gIH1cblxuICBfZ2V0Q2VsbEtleSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQ/LmNlbGxLZXkgfHwgJ3Jvb3RMaXN0JztcbiAgfVxuXG4gIC8vICRGbG93Rml4TWVbbWlzc2luZy1sb2NhbC1hbm5vdF1cbiAgX2dldFNjcm9sbE1ldHJpY3MgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHRoaXMuX3Njcm9sbE1ldHJpY3M7XG4gIH07XG5cbiAgaGFzTW9yZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faGFzTW9yZTtcbiAgfVxuXG4gIC8vICRGbG93Rml4TWVbbWlzc2luZy1sb2NhbC1hbm5vdF1cbiAgX2dldE91dGVybW9zdFBhcmVudExpc3RSZWYgPSAoKSA9PiB7XG4gICAgaWYgKHRoaXMuX2lzTmVzdGVkV2l0aFNhbWVPcmllbnRhdGlvbigpKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb250ZXh0LmdldE91dGVybW9zdFBhcmVudExpc3RSZWYoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xuXG4gIF9yZWdpc3RlckFzTmVzdGVkQ2hpbGQgPSAoY2hpbGRMaXN0OiB7XG4gICAgY2VsbEtleTogc3RyaW5nLFxuICAgIHJlZjogUmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgVmlydHVhbGl6ZWRMaXN0PixcbiAgfSk6IHZvaWQgPT4ge1xuICAgIHRoaXMuX25lc3RlZENoaWxkTGlzdHMuYWRkKGNoaWxkTGlzdC5yZWYsIGNoaWxkTGlzdC5jZWxsS2V5KTtcbiAgICBpZiAodGhpcy5faGFzSW50ZXJhY3RlZCkge1xuICAgICAgY2hpbGRMaXN0LnJlZi5yZWNvcmRJbnRlcmFjdGlvbigpO1xuICAgIH1cbiAgfTtcblxuICBfdW5yZWdpc3RlckFzTmVzdGVkQ2hpbGQgPSAoY2hpbGRMaXN0OiB7XG4gICAgcmVmOiBSZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBWaXJ0dWFsaXplZExpc3Q+LFxuICB9KTogdm9pZCA9PiB7XG4gICAgdGhpcy5fbmVzdGVkQ2hpbGRMaXN0cy5yZW1vdmUoY2hpbGRMaXN0LnJlZik7XG4gIH07XG5cbiAgc3RhdGU6IFN0YXRlO1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLl9jaGVja1Byb3BzKHByb3BzKTtcblxuICAgIHRoaXMuX2ZpbGxSYXRlSGVscGVyID0gbmV3IEZpbGxSYXRlSGVscGVyKHRoaXMuX2xpc3RNZXRyaWNzKTtcbiAgICB0aGlzLl91cGRhdGVDZWxsc1RvUmVuZGVyQmF0Y2hlciA9IG5ldyBCYXRjaGluYXRvcihcbiAgICAgIHRoaXMuX3VwZGF0ZUNlbGxzVG9SZW5kZXIsXG4gICAgICB0aGlzLnByb3BzLnVwZGF0ZUNlbGxzQmF0Y2hpbmdQZXJpb2QgPz8gNTAsXG4gICAgKTtcblxuICAgIGlmICh0aGlzLnByb3BzLnZpZXdhYmlsaXR5Q29uZmlnQ2FsbGJhY2tQYWlycykge1xuICAgICAgdGhpcy5fdmlld2FiaWxpdHlUdXBsZXMgPSB0aGlzLnByb3BzLnZpZXdhYmlsaXR5Q29uZmlnQ2FsbGJhY2tQYWlycy5tYXAoXG4gICAgICAgIHBhaXIgPT4gKHtcbiAgICAgICAgICB2aWV3YWJpbGl0eUhlbHBlcjogbmV3IFZpZXdhYmlsaXR5SGVscGVyKHBhaXIudmlld2FiaWxpdHlDb25maWcpLFxuICAgICAgICAgIG9uVmlld2FibGVJdGVtc0NoYW5nZWQ6IHBhaXIub25WaWV3YWJsZUl0ZW1zQ2hhbmdlZCxcbiAgICAgICAgfSksXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB7b25WaWV3YWJsZUl0ZW1zQ2hhbmdlZCwgdmlld2FiaWxpdHlDb25maWd9ID0gdGhpcy5wcm9wcztcbiAgICAgIGlmIChvblZpZXdhYmxlSXRlbXNDaGFuZ2VkKSB7XG4gICAgICAgIHRoaXMuX3ZpZXdhYmlsaXR5VHVwbGVzLnB1c2goe1xuICAgICAgICAgIHZpZXdhYmlsaXR5SGVscGVyOiBuZXcgVmlld2FiaWxpdHlIZWxwZXIodmlld2FiaWxpdHlDb25maWcpLFxuICAgICAgICAgIG9uVmlld2FibGVJdGVtc0NoYW5nZWQ6IG9uVmlld2FibGVJdGVtc0NoYW5nZWQsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGluaXRpYWxSZW5kZXJSZWdpb24gPSBWaXJ0dWFsaXplZExpc3QuX2luaXRpYWxSZW5kZXJSZWdpb24ocHJvcHMpO1xuXG4gICAgY29uc3QgbWluSW5kZXhGb3JWaXNpYmxlID1cbiAgICAgIHRoaXMucHJvcHMubWFpbnRhaW5WaXNpYmxlQ29udGVudFBvc2l0aW9uPy5taW5JbmRleEZvclZpc2libGUgPz8gMDtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBjZWxsc0Fyb3VuZFZpZXdwb3J0OiBpbml0aWFsUmVuZGVyUmVnaW9uLFxuICAgICAgcmVuZGVyTWFzazogVmlydHVhbGl6ZWRMaXN0Ll9jcmVhdGVSZW5kZXJNYXNrKHByb3BzLCBpbml0aWFsUmVuZGVyUmVnaW9uKSxcbiAgICAgIGZpcnN0VmlzaWJsZUl0ZW1LZXk6XG4gICAgICAgIHRoaXMucHJvcHMuZ2V0SXRlbUNvdW50KHRoaXMucHJvcHMuZGF0YSkgPiBtaW5JbmRleEZvclZpc2libGVcbiAgICAgICAgICA/IFZpcnR1YWxpemVkTGlzdC5fZ2V0SXRlbUtleSh0aGlzLnByb3BzLCBtaW5JbmRleEZvclZpc2libGUpXG4gICAgICAgICAgOiBudWxsLFxuICAgICAgLy8gV2hlbiB3ZSBoYXZlIGEgbm9uLXplcm8gaW5pdGlhbFNjcm9sbEluZGV4LCB3ZSB3aWxsIHJlY2VpdmUgYVxuICAgICAgLy8gc2Nyb2xsIGV2ZW50IGxhdGVyIHNvIHRoaXMgd2lsbCBwcmV2ZW50IHRoZSB3aW5kb3cgZnJvbSB1cGRhdGluZ1xuICAgICAgLy8gdW50aWwgd2UgZ2V0IGEgdmFsaWQgb2Zmc2V0LlxuICAgICAgcGVuZGluZ1Njcm9sbFVwZGF0ZUNvdW50OlxuICAgICAgICB0aGlzLnByb3BzLmluaXRpYWxTY3JvbGxJbmRleCAhPSBudWxsICYmXG4gICAgICAgIHRoaXMucHJvcHMuaW5pdGlhbFNjcm9sbEluZGV4ID4gMFxuICAgICAgICAgID8gMVxuICAgICAgICAgIDogMCxcbiAgICB9O1xuICB9XG5cbiAgX2NoZWNrUHJvcHMocHJvcHM6IFByb3BzKSB7XG4gICAgY29uc3Qge29uU2Nyb2xsLCB3aW5kb3dTaXplLCBnZXRJdGVtQ291bnQsIGRhdGEsIGluaXRpYWxTY3JvbGxJbmRleH0gPVxuICAgICAgcHJvcHM7XG5cbiAgICBpbnZhcmlhbnQoXG4gICAgICAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICAgICFvblNjcm9sbCB8fCAhb25TY3JvbGwuX19pc05hdGl2ZSxcbiAgICAgICdDb21wb25lbnRzIGJhc2VkIG9uIFZpcnR1YWxpemVkTGlzdCBtdXN0IGJlIHdyYXBwZWQgd2l0aCBBbmltYXRlZC5jcmVhdGVBbmltYXRlZENvbXBvbmVudCAnICtcbiAgICAgICAgJ3RvIHN1cHBvcnQgbmF0aXZlIG9uU2Nyb2xsIGV2ZW50cyB3aXRoIHVzZU5hdGl2ZURyaXZlcicsXG4gICAgKTtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB3aW5kb3dTaXplT3JEZWZhdWx0KHdpbmRvd1NpemUpID4gMCxcbiAgICAgICdWaXJ0dWFsaXplZExpc3Q6IFRoZSB3aW5kb3dTaXplIHByb3AgbXVzdCBiZSBwcmVzZW50IGFuZCBzZXQgdG8gYSB2YWx1ZSBncmVhdGVyIHRoYW4gMC4nLFxuICAgICk7XG5cbiAgICBpbnZhcmlhbnQoXG4gICAgICBnZXRJdGVtQ291bnQsXG4gICAgICAnVmlydHVhbGl6ZWRMaXN0OiBUaGUgXCJnZXRJdGVtQ291bnRcIiBwcm9wIG11c3QgYmUgcHJvdmlkZWQnLFxuICAgICk7XG5cbiAgICBjb25zdCBpdGVtQ291bnQgPSBnZXRJdGVtQ291bnQoZGF0YSk7XG5cbiAgICBpZiAoXG4gICAgICBpbml0aWFsU2Nyb2xsSW5kZXggIT0gbnVsbCAmJlxuICAgICAgIXRoaXMuX2hhc1RyaWdnZXJlZEluaXRpYWxTY3JvbGxUb0luZGV4ICYmXG4gICAgICAoaW5pdGlhbFNjcm9sbEluZGV4IDwgMCB8fFxuICAgICAgICAoaXRlbUNvdW50ID4gMCAmJiBpbml0aWFsU2Nyb2xsSW5kZXggPj0gaXRlbUNvdW50KSkgJiZcbiAgICAgICF0aGlzLl9oYXNXYXJuZWQuaW5pdGlhbFNjcm9sbEluZGV4XG4gICAgKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGBpbml0aWFsU2Nyb2xsSW5kZXggXCIke2luaXRpYWxTY3JvbGxJbmRleH1cIiBpcyBub3QgdmFsaWQgKGxpc3QgaGFzICR7aXRlbUNvdW50fSBpdGVtcylgLFxuICAgICAgKTtcbiAgICAgIHRoaXMuX2hhc1dhcm5lZC5pbml0aWFsU2Nyb2xsSW5kZXggPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChfX0RFVl9fICYmICF0aGlzLl9oYXNXYXJuZWQuZmxleFdyYXApIHtcbiAgICAgIC8vICRGbG93Rml4TWVbdW5kZXJjb25zdHJhaW5lZC1pbXBsaWNpdC1pbnN0YW50aWF0aW9uXVxuICAgICAgY29uc3QgZmxhdFN0eWxlcyA9IFN0eWxlU2hlZXQuZmxhdHRlbih0aGlzLnByb3BzLmNvbnRlbnRDb250YWluZXJTdHlsZSk7XG4gICAgICBpZiAoZmxhdFN0eWxlcyAhPSBudWxsICYmIGZsYXRTdHlsZXMuZmxleFdyYXAgPT09ICd3cmFwJykge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgJ2BmbGV4V3JhcDogYHdyYXBgYCBpcyBub3Qgc3VwcG9ydGVkIHdpdGggdGhlIGBWaXJ0dWFsaXplZExpc3RgIGNvbXBvbmVudHMuJyArXG4gICAgICAgICAgICAnQ29uc2lkZXIgdXNpbmcgYG51bUNvbHVtbnNgIHdpdGggYEZsYXRMaXN0YCBpbnN0ZWFkLicsXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuX2hhc1dhcm5lZC5mbGV4V3JhcCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIF9maW5kSXRlbUluZGV4V2l0aEtleShcbiAgICBwcm9wczogUHJvcHMsXG4gICAga2V5OiBzdHJpbmcsXG4gICAgaGludDogP251bWJlcixcbiAgKTogP251bWJlciB7XG4gICAgY29uc3QgaXRlbUNvdW50ID0gcHJvcHMuZ2V0SXRlbUNvdW50KHByb3BzLmRhdGEpO1xuICAgIGlmIChoaW50ICE9IG51bGwgJiYgaGludCA+PSAwICYmIGhpbnQgPCBpdGVtQ291bnQpIHtcbiAgICAgIGNvbnN0IGN1cktleSA9IFZpcnR1YWxpemVkTGlzdC5fZ2V0SXRlbUtleShwcm9wcywgaGludCk7XG4gICAgICBpZiAoY3VyS2V5ID09PSBrZXkpIHtcbiAgICAgICAgcmV0dXJuIGhpbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IGlpID0gMDsgaWkgPCBpdGVtQ291bnQ7IGlpKyspIHtcbiAgICAgIGNvbnN0IGN1cktleSA9IFZpcnR1YWxpemVkTGlzdC5fZ2V0SXRlbUtleShwcm9wcywgaWkpO1xuICAgICAgaWYgKGN1cktleSA9PT0ga2V5KSB7XG4gICAgICAgIHJldHVybiBpaTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBzdGF0aWMgX2dldEl0ZW1LZXkoXG4gICAgcHJvcHM6IHtcbiAgICAgIGRhdGE6IFByb3BzWydkYXRhJ10sXG4gICAgICBnZXRJdGVtOiBQcm9wc1snZ2V0SXRlbSddLFxuICAgICAga2V5RXh0cmFjdG9yOiBQcm9wc1sna2V5RXh0cmFjdG9yJ10sXG4gICAgICAuLi5cbiAgICB9LFxuICAgIGluZGV4OiBudW1iZXIsXG4gICk6IHN0cmluZyB7XG4gICAgY29uc3QgaXRlbSA9IHByb3BzLmdldEl0ZW0ocHJvcHMuZGF0YSwgaW5kZXgpO1xuICAgIHJldHVybiBWaXJ0dWFsaXplZExpc3QuX2tleUV4dHJhY3RvcihpdGVtLCBpbmRleCwgcHJvcHMpO1xuICB9XG5cbiAgc3RhdGljIF9jcmVhdGVSZW5kZXJNYXNrKFxuICAgIHByb3BzOiBQcm9wcyxcbiAgICBjZWxsc0Fyb3VuZFZpZXdwb3J0OiB7Zmlyc3Q6IG51bWJlciwgbGFzdDogbnVtYmVyfSxcbiAgICBhZGRpdGlvbmFsUmVnaW9ucz86ID8kUmVhZE9ubHlBcnJheTx7Zmlyc3Q6IG51bWJlciwgbGFzdDogbnVtYmVyfT4sXG4gICk6IENlbGxSZW5kZXJNYXNrIHtcbiAgICBjb25zdCBpdGVtQ291bnQgPSBwcm9wcy5nZXRJdGVtQ291bnQocHJvcHMuZGF0YSk7XG5cbiAgICBpbnZhcmlhbnQoXG4gICAgICBjZWxsc0Fyb3VuZFZpZXdwb3J0LmZpcnN0ID49IDAgJiZcbiAgICAgICAgY2VsbHNBcm91bmRWaWV3cG9ydC5sYXN0ID49IGNlbGxzQXJvdW5kVmlld3BvcnQuZmlyc3QgLSAxICYmXG4gICAgICAgIGNlbGxzQXJvdW5kVmlld3BvcnQubGFzdCA8IGl0ZW1Db3VudCxcbiAgICAgIGBJbnZhbGlkIGNlbGxzIGFyb3VuZCB2aWV3cG9ydCBcIlske2NlbGxzQXJvdW5kVmlld3BvcnQuZmlyc3R9LCAke2NlbGxzQXJvdW5kVmlld3BvcnQubGFzdH1dXCIgd2FzIHBhc3NlZCB0byBWaXJ0dWFsaXplZExpc3QuX2NyZWF0ZVJlbmRlck1hc2tgLFxuICAgICk7XG5cbiAgICBjb25zdCByZW5kZXJNYXNrID0gbmV3IENlbGxSZW5kZXJNYXNrKGl0ZW1Db3VudCk7XG5cbiAgICBpZiAoaXRlbUNvdW50ID4gMCkge1xuICAgICAgY29uc3QgYWxsUmVnaW9ucyA9IFtjZWxsc0Fyb3VuZFZpZXdwb3J0LCAuLi4oYWRkaXRpb25hbFJlZ2lvbnMgPz8gW10pXTtcbiAgICAgIGZvciAoY29uc3QgcmVnaW9uIG9mIGFsbFJlZ2lvbnMpIHtcbiAgICAgICAgcmVuZGVyTWFzay5hZGRDZWxscyhyZWdpb24pO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgaW5pdGlhbGx5IHJlbmRlcmVkIGNlbGxzIGFyZSByZXRhaW5lZCBhcyBwYXJ0IG9mIHRoZVxuICAgICAgLy8gXCJzY3JvbGwtdG8tdG9wXCIgb3B0aW1pemF0aW9uXG4gICAgICBpZiAocHJvcHMuaW5pdGlhbFNjcm9sbEluZGV4ID09IG51bGwgfHwgcHJvcHMuaW5pdGlhbFNjcm9sbEluZGV4IDw9IDApIHtcbiAgICAgICAgY29uc3QgaW5pdGlhbFJlZ2lvbiA9IFZpcnR1YWxpemVkTGlzdC5faW5pdGlhbFJlbmRlclJlZ2lvbihwcm9wcyk7XG4gICAgICAgIHJlbmRlck1hc2suYWRkQ2VsbHMoaW5pdGlhbFJlZ2lvbik7XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBsYXlvdXQgY29vcmRpbmF0ZXMgb2Ygc3RpY2tlciBoZWFkZXJzIG1heSBiZSBvZmYtc2NyZWVuIHdoaWxlIHRoZVxuICAgICAgLy8gYWN0dWFsIGhlYWRlciBpcyBvbi1zY3JlZW4uIEtlZXAgdGhlIG1vc3QgcmVjZW50IGJlZm9yZSB0aGUgdmlld3BvcnRcbiAgICAgIC8vIHJlbmRlcmVkLCBldmVuIGlmIGl0cyBsYXlvdXQgY29vcmRpbmF0ZXMgYXJlIG5vdCBpbiB2aWV3cG9ydC5cbiAgICAgIGNvbnN0IHN0aWNreUluZGljZXNTZXQgPSBuZXcgU2V0KHByb3BzLnN0aWNreUhlYWRlckluZGljZXMpO1xuICAgICAgVmlydHVhbGl6ZWRMaXN0Ll9lbnN1cmVDbG9zZXN0U3RpY2t5SGVhZGVyKFxuICAgICAgICBwcm9wcyxcbiAgICAgICAgc3RpY2t5SW5kaWNlc1NldCxcbiAgICAgICAgcmVuZGVyTWFzayxcbiAgICAgICAgY2VsbHNBcm91bmRWaWV3cG9ydC5maXJzdCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlbmRlck1hc2s7XG4gIH1cblxuICBzdGF0aWMgX2luaXRpYWxSZW5kZXJSZWdpb24ocHJvcHM6IFByb3BzKToge2ZpcnN0OiBudW1iZXIsIGxhc3Q6IG51bWJlcn0ge1xuICAgIGNvbnN0IGl0ZW1Db3VudCA9IHByb3BzLmdldEl0ZW1Db3VudChwcm9wcy5kYXRhKTtcblxuICAgIGNvbnN0IGZpcnN0Q2VsbEluZGV4ID0gTWF0aC5tYXgoXG4gICAgICAwLFxuICAgICAgTWF0aC5taW4oaXRlbUNvdW50IC0gMSwgTWF0aC5mbG9vcihwcm9wcy5pbml0aWFsU2Nyb2xsSW5kZXggPz8gMCkpLFxuICAgICk7XG5cbiAgICBjb25zdCBsYXN0Q2VsbEluZGV4ID1cbiAgICAgIE1hdGgubWluKFxuICAgICAgICBpdGVtQ291bnQsXG4gICAgICAgIGZpcnN0Q2VsbEluZGV4ICsgaW5pdGlhbE51bVRvUmVuZGVyT3JEZWZhdWx0KHByb3BzLmluaXRpYWxOdW1Ub1JlbmRlciksXG4gICAgICApIC0gMTtcblxuICAgIHJldHVybiB7XG4gICAgICBmaXJzdDogZmlyc3RDZWxsSW5kZXgsXG4gICAgICBsYXN0OiBsYXN0Q2VsbEluZGV4LFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgX2Vuc3VyZUNsb3Nlc3RTdGlja3lIZWFkZXIoXG4gICAgcHJvcHM6IFByb3BzLFxuICAgIHN0aWNreUluZGljZXNTZXQ6IFNldDxudW1iZXI+LFxuICAgIHJlbmRlck1hc2s6IENlbGxSZW5kZXJNYXNrLFxuICAgIGNlbGxJZHg6IG51bWJlcixcbiAgKSB7XG4gICAgY29uc3Qgc3RpY2t5T2Zmc2V0ID0gcHJvcHMuTGlzdEhlYWRlckNvbXBvbmVudCA/IDEgOiAwO1xuXG4gICAgZm9yIChsZXQgaXRlbUlkeCA9IGNlbGxJZHggLSAxOyBpdGVtSWR4ID49IDA7IGl0ZW1JZHgtLSkge1xuICAgICAgaWYgKHN0aWNreUluZGljZXNTZXQuaGFzKGl0ZW1JZHggKyBzdGlja3lPZmZzZXQpKSB7XG4gICAgICAgIHJlbmRlck1hc2suYWRkQ2VsbHMoe2ZpcnN0OiBpdGVtSWR4LCBsYXN0OiBpdGVtSWR4fSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9hZGp1c3RDZWxsc0Fyb3VuZFZpZXdwb3J0KFxuICAgIHByb3BzOiBQcm9wcyxcbiAgICBjZWxsc0Fyb3VuZFZpZXdwb3J0OiB7Zmlyc3Q6IG51bWJlciwgbGFzdDogbnVtYmVyfSxcbiAgICBwZW5kaW5nU2Nyb2xsVXBkYXRlQ291bnQ6IG51bWJlcixcbiAgKToge2ZpcnN0OiBudW1iZXIsIGxhc3Q6IG51bWJlcn0ge1xuICAgIGNvbnN0IHtkYXRhLCBnZXRJdGVtQ291bnR9ID0gcHJvcHM7XG4gICAgY29uc3Qgb25FbmRSZWFjaGVkVGhyZXNob2xkID0gb25FbmRSZWFjaGVkVGhyZXNob2xkT3JEZWZhdWx0KFxuICAgICAgcHJvcHMub25FbmRSZWFjaGVkVGhyZXNob2xkLFxuICAgICk7XG4gICAgY29uc3Qge29mZnNldCwgdmlzaWJsZUxlbmd0aH0gPSB0aGlzLl9zY3JvbGxNZXRyaWNzO1xuICAgIGNvbnN0IGNvbnRlbnRMZW5ndGggPSB0aGlzLl9saXN0TWV0cmljcy5nZXRDb250ZW50TGVuZ3RoKCk7XG4gICAgY29uc3QgZGlzdGFuY2VGcm9tRW5kID0gY29udGVudExlbmd0aCAtIHZpc2libGVMZW5ndGggLSBvZmZzZXQ7XG5cbiAgICAvLyBXYWl0IHVudGlsIHRoZSBzY3JvbGwgdmlldyBtZXRyaWNzIGhhdmUgYmVlbiBzZXQgdXAuIEFuZCB1bnRpbCB0aGVuLFxuICAgIC8vIHdlIHdpbGwgdHJ1c3QgdGhlIGluaXRpYWxOdW1Ub1JlbmRlciBzdWdnZXN0aW9uXG4gICAgaWYgKHZpc2libGVMZW5ndGggPD0gMCB8fCBjb250ZW50TGVuZ3RoIDw9IDApIHtcbiAgICAgIHJldHVybiBjZWxsc0Fyb3VuZFZpZXdwb3J0Lmxhc3QgPj0gZ2V0SXRlbUNvdW50KGRhdGEpXG4gICAgICAgID8gVmlydHVhbGl6ZWRMaXN0Ll9jb25zdHJhaW5Ub0l0ZW1Db3VudChjZWxsc0Fyb3VuZFZpZXdwb3J0LCBwcm9wcylcbiAgICAgICAgOiBjZWxsc0Fyb3VuZFZpZXdwb3J0O1xuICAgIH1cblxuICAgIGxldCBuZXdDZWxsc0Fyb3VuZFZpZXdwb3J0OiB7Zmlyc3Q6IG51bWJlciwgbGFzdDogbnVtYmVyfTtcbiAgICBpZiAocHJvcHMuZGlzYWJsZVZpcnR1YWxpemF0aW9uKSB7XG4gICAgICBjb25zdCByZW5kZXJBaGVhZCA9XG4gICAgICAgIGRpc3RhbmNlRnJvbUVuZCA8IG9uRW5kUmVhY2hlZFRocmVzaG9sZCAqIHZpc2libGVMZW5ndGhcbiAgICAgICAgICA/IG1heFRvUmVuZGVyUGVyQmF0Y2hPckRlZmF1bHQocHJvcHMubWF4VG9SZW5kZXJQZXJCYXRjaClcbiAgICAgICAgICA6IDA7XG5cbiAgICAgIG5ld0NlbGxzQXJvdW5kVmlld3BvcnQgPSB7XG4gICAgICAgIGZpcnN0OiAwLFxuICAgICAgICBsYXN0OiBNYXRoLm1pbihcbiAgICAgICAgICBjZWxsc0Fyb3VuZFZpZXdwb3J0Lmxhc3QgKyByZW5kZXJBaGVhZCxcbiAgICAgICAgICBnZXRJdGVtQ291bnQoZGF0YSkgLSAxLFxuICAgICAgICApLFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgd2UgaGF2ZSBhIHBlbmRpbmcgc2Nyb2xsIHVwZGF0ZSwgd2Ugc2hvdWxkIG5vdCBhZGp1c3QgdGhlIHJlbmRlciB3aW5kb3cgYXMgaXRcbiAgICAgIC8vIG1pZ2h0IG92ZXJyaWRlIHRoZSBjb3JyZWN0IHdpbmRvdy5cbiAgICAgIGlmIChwZW5kaW5nU2Nyb2xsVXBkYXRlQ291bnQgPiAwKSB7XG4gICAgICAgIHJldHVybiBjZWxsc0Fyb3VuZFZpZXdwb3J0Lmxhc3QgPj0gZ2V0SXRlbUNvdW50KGRhdGEpXG4gICAgICAgICAgPyBWaXJ0dWFsaXplZExpc3QuX2NvbnN0cmFpblRvSXRlbUNvdW50KGNlbGxzQXJvdW5kVmlld3BvcnQsIHByb3BzKVxuICAgICAgICAgIDogY2VsbHNBcm91bmRWaWV3cG9ydDtcbiAgICAgIH1cblxuICAgICAgbmV3Q2VsbHNBcm91bmRWaWV3cG9ydCA9IGNvbXB1dGVXaW5kb3dlZFJlbmRlckxpbWl0cyhcbiAgICAgICAgcHJvcHMsXG4gICAgICAgIG1heFRvUmVuZGVyUGVyQmF0Y2hPckRlZmF1bHQocHJvcHMubWF4VG9SZW5kZXJQZXJCYXRjaCksXG4gICAgICAgIHdpbmRvd1NpemVPckRlZmF1bHQocHJvcHMud2luZG93U2l6ZSksXG4gICAgICAgIGNlbGxzQXJvdW5kVmlld3BvcnQsXG4gICAgICAgIHRoaXMuX2xpc3RNZXRyaWNzLFxuICAgICAgICB0aGlzLl9zY3JvbGxNZXRyaWNzLFxuICAgICAgKTtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgbmV3Q2VsbHNBcm91bmRWaWV3cG9ydC5sYXN0IDwgZ2V0SXRlbUNvdW50KGRhdGEpLFxuICAgICAgICAnY29tcHV0ZVdpbmRvd2VkUmVuZGVyTGltaXRzKCkgc2hvdWxkIHJldHVybiByYW5nZSBpbi1ib3VuZHMnLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbmVzdGVkQ2hpbGRMaXN0cy5zaXplKCkgPiAwKSB7XG4gICAgICAvLyBJZiBzb21lIGNlbGwgaW4gdGhlIG5ldyBzdGF0ZSBoYXMgYSBjaGlsZCBsaXN0IGluIGl0LCB3ZSBzaG91bGQgb25seSByZW5kZXJcbiAgICAgIC8vIHVwIHRocm91Z2ggdGhhdCBpdGVtLCBzbyB0aGF0IHdlIGdpdmUgdGhhdCBsaXN0IGEgY2hhbmNlIHRvIHJlbmRlci5cbiAgICAgIC8vIE90aGVyd2lzZSB0aGVyZSdzIGNodXJuIGZyb20gbXVsdGlwbGUgY2hpbGQgbGlzdHMgbW91bnRpbmcgYW5kIHVuLW1vdW50aW5nXG4gICAgICAvLyB0aGVpciBpdGVtcy5cblxuICAgICAgLy8gV2lsbCB0aGlzIHByZXZlbnQgcmVuZGVyaW5nIGlmIHRoZSBuZXN0ZWQgbGlzdCBkb2Vzbid0IHJlYWxpemUgdGhlIGVuZD9cbiAgICAgIGNvbnN0IGNoaWxkSWR4ID0gdGhpcy5fZmluZEZpcnN0Q2hpbGRXaXRoTW9yZShcbiAgICAgICAgbmV3Q2VsbHNBcm91bmRWaWV3cG9ydC5maXJzdCxcbiAgICAgICAgbmV3Q2VsbHNBcm91bmRWaWV3cG9ydC5sYXN0LFxuICAgICAgKTtcblxuICAgICAgbmV3Q2VsbHNBcm91bmRWaWV3cG9ydC5sYXN0ID0gY2hpbGRJZHggPz8gbmV3Q2VsbHNBcm91bmRWaWV3cG9ydC5sYXN0O1xuICAgIH1cblxuICAgIHJldHVybiBuZXdDZWxsc0Fyb3VuZFZpZXdwb3J0O1xuICB9XG5cbiAgX2ZpbmRGaXJzdENoaWxkV2l0aE1vcmUoZmlyc3Q6IG51bWJlciwgbGFzdDogbnVtYmVyKTogbnVtYmVyIHwgbnVsbCB7XG4gICAgZm9yIChsZXQgaWkgPSBmaXJzdDsgaWkgPD0gbGFzdDsgaWkrKykge1xuICAgICAgY29uc3QgY2VsbEtleUZvckluZGV4ID0gdGhpcy5faW5kaWNlc1RvS2V5cy5nZXQoaWkpO1xuICAgICAgaWYgKFxuICAgICAgICBjZWxsS2V5Rm9ySW5kZXggIT0gbnVsbCAmJlxuICAgICAgICB0aGlzLl9uZXN0ZWRDaGlsZExpc3RzLmFueUluQ2VsbChjZWxsS2V5Rm9ySW5kZXgsIGNoaWxkTGlzdCA9PlxuICAgICAgICAgIGNoaWxkTGlzdC5oYXNNb3JlKCksXG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gaWk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodGhpcy5faXNOZXN0ZWRXaXRoU2FtZU9yaWVudGF0aW9uKCkpIHtcbiAgICAgIHRoaXMuY29udGV4dC5yZWdpc3RlckFzTmVzdGVkQ2hpbGQoe1xuICAgICAgICByZWY6IHRoaXMsXG4gICAgICAgIGNlbGxLZXk6IHRoaXMuY29udGV4dC5jZWxsS2V5LFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMuX2lzTmVzdGVkV2l0aFNhbWVPcmllbnRhdGlvbigpKSB7XG4gICAgICB0aGlzLmNvbnRleHQudW5yZWdpc3RlckFzTmVzdGVkQ2hpbGQoe3JlZjogdGhpc30pO1xuICAgIH1cbiAgICB0aGlzLl91cGRhdGVDZWxsc1RvUmVuZGVyQmF0Y2hlci5kaXNwb3NlKHthYm9ydDogdHJ1ZX0pO1xuICAgIHRoaXMuX3ZpZXdhYmlsaXR5VHVwbGVzLmZvckVhY2godHVwbGUgPT4ge1xuICAgICAgdHVwbGUudmlld2FiaWxpdHlIZWxwZXIuZGlzcG9zZSgpO1xuICAgIH0pO1xuICAgIHRoaXMuX2ZpbGxSYXRlSGVscGVyLmRlYWN0aXZhdGVBbmRGbHVzaCgpO1xuICB9XG5cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXdQcm9wczogUHJvcHMsIHByZXZTdGF0ZTogU3RhdGUpOiBTdGF0ZSB7XG4gICAgLy8gZmlyc3QgYW5kIGxhc3QgY291bGQgYmUgc3RhbGUgKGUuZy4gaWYgYSBuZXcsIHNob3J0ZXIgaXRlbXMgcHJvcHMgaXMgcGFzc2VkIGluKSwgc28gd2UgbWFrZVxuICAgIC8vIHN1cmUgd2UncmUgcmVuZGVyaW5nIGEgcmVhc29uYWJsZSByYW5nZSBoZXJlLlxuICAgIGNvbnN0IGl0ZW1Db3VudCA9IG5ld1Byb3BzLmdldEl0ZW1Db3VudChuZXdQcm9wcy5kYXRhKTtcbiAgICBpZiAoaXRlbUNvdW50ID09PSBwcmV2U3RhdGUucmVuZGVyTWFzay5udW1DZWxscygpKSB7XG4gICAgICByZXR1cm4gcHJldlN0YXRlO1xuICAgIH1cblxuICAgIGxldCBtYWludGFpblZpc2libGVDb250ZW50UG9zaXRpb25BZGp1c3RtZW50OiA/bnVtYmVyID0gbnVsbDtcbiAgICBjb25zdCBwcmV2Rmlyc3RWaXNpYmxlSXRlbUtleSA9IHByZXZTdGF0ZS5maXJzdFZpc2libGVJdGVtS2V5O1xuICAgIGNvbnN0IG1pbkluZGV4Rm9yVmlzaWJsZSA9XG4gICAgICBuZXdQcm9wcy5tYWludGFpblZpc2libGVDb250ZW50UG9zaXRpb24/Lm1pbkluZGV4Rm9yVmlzaWJsZSA/PyAwO1xuICAgIGNvbnN0IG5ld0ZpcnN0VmlzaWJsZUl0ZW1LZXkgPVxuICAgICAgbmV3UHJvcHMuZ2V0SXRlbUNvdW50KG5ld1Byb3BzLmRhdGEpID4gbWluSW5kZXhGb3JWaXNpYmxlXG4gICAgICAgID8gVmlydHVhbGl6ZWRMaXN0Ll9nZXRJdGVtS2V5KG5ld1Byb3BzLCBtaW5JbmRleEZvclZpc2libGUpXG4gICAgICAgIDogbnVsbDtcbiAgICBpZiAoXG4gICAgICBuZXdQcm9wcy5tYWludGFpblZpc2libGVDb250ZW50UG9zaXRpb24gIT0gbnVsbCAmJlxuICAgICAgcHJldkZpcnN0VmlzaWJsZUl0ZW1LZXkgIT0gbnVsbCAmJlxuICAgICAgbmV3Rmlyc3RWaXNpYmxlSXRlbUtleSAhPSBudWxsXG4gICAgKSB7XG4gICAgICBpZiAobmV3Rmlyc3RWaXNpYmxlSXRlbUtleSAhPT0gcHJldkZpcnN0VmlzaWJsZUl0ZW1LZXkpIHtcbiAgICAgICAgLy8gRmFzdCBwYXRoIGlmIGl0ZW1zIHdlcmUgYWRkZWQgYXQgdGhlIHN0YXJ0IG9mIHRoZSBsaXN0LlxuICAgICAgICBjb25zdCBoaW50ID1cbiAgICAgICAgICBpdGVtQ291bnQgLSBwcmV2U3RhdGUucmVuZGVyTWFzay5udW1DZWxscygpICsgbWluSW5kZXhGb3JWaXNpYmxlO1xuICAgICAgICBjb25zdCBmaXJzdFZpc2libGVJdGVtSW5kZXggPSBWaXJ0dWFsaXplZExpc3QuX2ZpbmRJdGVtSW5kZXhXaXRoS2V5KFxuICAgICAgICAgIG5ld1Byb3BzLFxuICAgICAgICAgIHByZXZGaXJzdFZpc2libGVJdGVtS2V5LFxuICAgICAgICAgIGhpbnQsXG4gICAgICAgICk7XG4gICAgICAgIG1haW50YWluVmlzaWJsZUNvbnRlbnRQb3NpdGlvbkFkanVzdG1lbnQgPVxuICAgICAgICAgIGZpcnN0VmlzaWJsZUl0ZW1JbmRleCAhPSBudWxsXG4gICAgICAgICAgICA/IGZpcnN0VmlzaWJsZUl0ZW1JbmRleCAtIG1pbkluZGV4Rm9yVmlzaWJsZVxuICAgICAgICAgICAgOiBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWFpbnRhaW5WaXNpYmxlQ29udGVudFBvc2l0aW9uQWRqdXN0bWVudCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgY29uc3RyYWluZWRDZWxscyA9IFZpcnR1YWxpemVkTGlzdC5fY29uc3RyYWluVG9JdGVtQ291bnQoXG4gICAgICBtYWludGFpblZpc2libGVDb250ZW50UG9zaXRpb25BZGp1c3RtZW50ICE9IG51bGxcbiAgICAgICAgPyB7XG4gICAgICAgICAgICBmaXJzdDpcbiAgICAgICAgICAgICAgcHJldlN0YXRlLmNlbGxzQXJvdW5kVmlld3BvcnQuZmlyc3QgK1xuICAgICAgICAgICAgICBtYWludGFpblZpc2libGVDb250ZW50UG9zaXRpb25BZGp1c3RtZW50LFxuICAgICAgICAgICAgbGFzdDpcbiAgICAgICAgICAgICAgcHJldlN0YXRlLmNlbGxzQXJvdW5kVmlld3BvcnQubGFzdCArXG4gICAgICAgICAgICAgIG1haW50YWluVmlzaWJsZUNvbnRlbnRQb3NpdGlvbkFkanVzdG1lbnQsXG4gICAgICAgICAgfVxuICAgICAgICA6IHByZXZTdGF0ZS5jZWxsc0Fyb3VuZFZpZXdwb3J0LFxuICAgICAgbmV3UHJvcHMsXG4gICAgKTtcblxuICAgIHJldHVybiB7XG4gICAgICBjZWxsc0Fyb3VuZFZpZXdwb3J0OiBjb25zdHJhaW5lZENlbGxzLFxuICAgICAgcmVuZGVyTWFzazogVmlydHVhbGl6ZWRMaXN0Ll9jcmVhdGVSZW5kZXJNYXNrKG5ld1Byb3BzLCBjb25zdHJhaW5lZENlbGxzKSxcbiAgICAgIGZpcnN0VmlzaWJsZUl0ZW1LZXk6IG5ld0ZpcnN0VmlzaWJsZUl0ZW1LZXksXG4gICAgICBwZW5kaW5nU2Nyb2xsVXBkYXRlQ291bnQ6XG4gICAgICAgIG1haW50YWluVmlzaWJsZUNvbnRlbnRQb3NpdGlvbkFkanVzdG1lbnQgIT0gbnVsbFxuICAgICAgICAgID8gcHJldlN0YXRlLnBlbmRpbmdTY3JvbGxVcGRhdGVDb3VudCArIDFcbiAgICAgICAgICA6IHByZXZTdGF0ZS5wZW5kaW5nU2Nyb2xsVXBkYXRlQ291bnQsXG4gICAgfTtcbiAgfVxuXG4gIF9wdXNoQ2VsbHMoXG4gICAgY2VsbHM6IEFycmF5PE9iamVjdD4sXG4gICAgc3RpY2t5SGVhZGVySW5kaWNlczogQXJyYXk8bnVtYmVyPixcbiAgICBzdGlja3lJbmRpY2VzRnJvbVByb3BzOiBTZXQ8bnVtYmVyPixcbiAgICBmaXJzdDogbnVtYmVyLFxuICAgIGxhc3Q6IG51bWJlcixcbiAgICBpbnZlcnNpb25TdHlsZTogVmlld1N0eWxlUHJvcCxcbiAgKSB7XG4gICAgY29uc3Qge1xuICAgICAgQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgICAgSXRlbVNlcGFyYXRvckNvbXBvbmVudCxcbiAgICAgIExpc3RIZWFkZXJDb21wb25lbnQsXG4gICAgICBMaXN0SXRlbUNvbXBvbmVudCxcbiAgICAgIGRhdGEsXG4gICAgICBkZWJ1ZyxcbiAgICAgIGdldEl0ZW0sXG4gICAgICBnZXRJdGVtQ291bnQsXG4gICAgICBnZXRJdGVtTGF5b3V0LFxuICAgICAgaG9yaXpvbnRhbCxcbiAgICAgIHJlbmRlckl0ZW0sXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qgc3RpY2t5T2Zmc2V0ID0gTGlzdEhlYWRlckNvbXBvbmVudCA/IDEgOiAwO1xuICAgIGNvbnN0IGVuZCA9IGdldEl0ZW1Db3VudChkYXRhKSAtIDE7XG4gICAgbGV0IHByZXZDZWxsS2V5O1xuICAgIGxhc3QgPSBNYXRoLm1pbihlbmQsIGxhc3QpO1xuXG4gICAgZm9yIChsZXQgaWkgPSBmaXJzdDsgaWkgPD0gbGFzdDsgaWkrKykge1xuICAgICAgY29uc3QgaXRlbSA9IGdldEl0ZW0oZGF0YSwgaWkpO1xuICAgICAgY29uc3Qga2V5ID0gVmlydHVhbGl6ZWRMaXN0Ll9rZXlFeHRyYWN0b3IoaXRlbSwgaWksIHRoaXMucHJvcHMpO1xuXG4gICAgICB0aGlzLl9pbmRpY2VzVG9LZXlzLnNldChpaSwga2V5KTtcbiAgICAgIGlmIChzdGlja3lJbmRpY2VzRnJvbVByb3BzLmhhcyhpaSArIHN0aWNreU9mZnNldCkpIHtcbiAgICAgICAgc3RpY2t5SGVhZGVySW5kaWNlcy5wdXNoKGNlbGxzLmxlbmd0aCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHNob3VsZExpc3RlbkZvckxheW91dCA9XG4gICAgICAgIGdldEl0ZW1MYXlvdXQgPT0gbnVsbCB8fCBkZWJ1ZyB8fCB0aGlzLl9maWxsUmF0ZUhlbHBlci5lbmFibGVkKCk7XG5cbiAgICAgIGNlbGxzLnB1c2goXG4gICAgICAgIDxDZWxsUmVuZGVyZXJcbiAgICAgICAgICBDZWxsUmVuZGVyZXJDb21wb25lbnQ9e0NlbGxSZW5kZXJlckNvbXBvbmVudH1cbiAgICAgICAgICBJdGVtU2VwYXJhdG9yQ29tcG9uZW50PXtpaSA8IGVuZCA/IEl0ZW1TZXBhcmF0b3JDb21wb25lbnQgOiB1bmRlZmluZWR9XG4gICAgICAgICAgTGlzdEl0ZW1Db21wb25lbnQ9e0xpc3RJdGVtQ29tcG9uZW50fVxuICAgICAgICAgIGNlbGxLZXk9e2tleX1cbiAgICAgICAgICBob3Jpem9udGFsPXtob3Jpem9udGFsfVxuICAgICAgICAgIGluZGV4PXtpaX1cbiAgICAgICAgICBpbnZlcnNpb25TdHlsZT17aW52ZXJzaW9uU3R5bGV9XG4gICAgICAgICAgaXRlbT17aXRlbX1cbiAgICAgICAgICBrZXk9e2tleX1cbiAgICAgICAgICBwcmV2Q2VsbEtleT17cHJldkNlbGxLZXl9XG4gICAgICAgICAgb25VcGRhdGVTZXBhcmF0b3JzPXt0aGlzLl9vblVwZGF0ZVNlcGFyYXRvcnN9XG4gICAgICAgICAgb25DZWxsRm9jdXNDYXB0dXJlPXtlID0+IHRoaXMuX29uQ2VsbEZvY3VzQ2FwdHVyZShrZXkpfVxuICAgICAgICAgIG9uVW5tb3VudD17dGhpcy5fb25DZWxsVW5tb3VudH1cbiAgICAgICAgICByZWY9e3JlZiA9PiB7XG4gICAgICAgICAgICB0aGlzLl9jZWxsUmVmc1trZXldID0gcmVmO1xuICAgICAgICAgIH19XG4gICAgICAgICAgcmVuZGVySXRlbT17cmVuZGVySXRlbX1cbiAgICAgICAgICB7Li4uKHNob3VsZExpc3RlbkZvckxheW91dCAmJiB7XG4gICAgICAgICAgICBvbkNlbGxMYXlvdXQ6IHRoaXMuX29uQ2VsbExheW91dCxcbiAgICAgICAgICB9KX1cbiAgICAgICAgLz4sXG4gICAgICApO1xuICAgICAgcHJldkNlbGxLZXkgPSBrZXk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIF9jb25zdHJhaW5Ub0l0ZW1Db3VudChcbiAgICBjZWxsczoge2ZpcnN0OiBudW1iZXIsIGxhc3Q6IG51bWJlcn0sXG4gICAgcHJvcHM6IFByb3BzLFxuICApOiB7Zmlyc3Q6IG51bWJlciwgbGFzdDogbnVtYmVyfSB7XG4gICAgY29uc3QgaXRlbUNvdW50ID0gcHJvcHMuZ2V0SXRlbUNvdW50KHByb3BzLmRhdGEpO1xuICAgIGNvbnN0IGxhc3RQb3NzaWJsZUNlbGxJbmRleCA9IGl0ZW1Db3VudCAtIDE7XG5cbiAgICAvLyBDb25zdHJhaW5pbmcgYGxhc3RgIG1heSBzaWduaWZpY2FudGx5IHNocmluayB0aGUgd2luZG93LiBBZGp1c3QgYGZpcnN0YFxuICAgIC8vIHRvIGV4cGFuZCB0aGUgd2luZG93IGlmIHRoZSBuZXcgYGxhc3RgIHJlc3VsdHMgaW4gYSBuZXcgd2luZG93IHNtYWxsZXJcbiAgICAvLyB0aGFuIHRoZSBudW1iZXIgb2YgY2VsbHMgcmVuZGVyZWQgcGVyIGJhdGNoLlxuICAgIGNvbnN0IG1heFRvUmVuZGVyUGVyQmF0Y2ggPSBtYXhUb1JlbmRlclBlckJhdGNoT3JEZWZhdWx0KFxuICAgICAgcHJvcHMubWF4VG9SZW5kZXJQZXJCYXRjaCxcbiAgICApO1xuICAgIGNvbnN0IG1heEZpcnN0ID0gTWF0aC5tYXgoMCwgbGFzdFBvc3NpYmxlQ2VsbEluZGV4IC0gbWF4VG9SZW5kZXJQZXJCYXRjaCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgZmlyc3Q6IGNsYW1wKDAsIGNlbGxzLmZpcnN0LCBtYXhGaXJzdCksXG4gICAgICBsYXN0OiBNYXRoLm1pbihsYXN0UG9zc2libGVDZWxsSW5kZXgsIGNlbGxzLmxhc3QpLFxuICAgIH07XG4gIH1cblxuICBfb25VcGRhdGVTZXBhcmF0b3JzID0gKGtleXM6IEFycmF5PD9zdHJpbmc+LCBuZXdQcm9wczogT2JqZWN0KSA9PiB7XG4gICAga2V5cy5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBjb25zdCByZWYgPSBrZXkgIT0gbnVsbCAmJiB0aGlzLl9jZWxsUmVmc1trZXldO1xuICAgICAgcmVmICYmIHJlZi51cGRhdGVTZXBhcmF0b3JQcm9wcyhuZXdQcm9wcyk7XG4gICAgfSk7XG4gIH07XG5cbiAgX2lzTmVzdGVkV2l0aFNhbWVPcmllbnRhdGlvbigpOiBib29sZWFuIHtcbiAgICBjb25zdCBuZXN0ZWRDb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuICAgIHJldHVybiAhIShcbiAgICAgIG5lc3RlZENvbnRleHQgJiZcbiAgICAgICEhbmVzdGVkQ29udGV4dC5ob3Jpem9udGFsID09PSBob3Jpem9udGFsT3JEZWZhdWx0KHRoaXMucHJvcHMuaG9yaXpvbnRhbClcbiAgICApO1xuICB9XG5cbiAgX2dldFNwYWNlcktleSA9IChpc1ZlcnRpY2FsOiBib29sZWFuKTogc3RyaW5nID0+XG4gICAgaXNWZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICBzdGF0aWMgX2tleUV4dHJhY3RvcihcbiAgICBpdGVtOiBJdGVtLFxuICAgIGluZGV4OiBudW1iZXIsXG4gICAgcHJvcHM6IHtcbiAgICAgIGtleUV4dHJhY3Rvcj86ID8oaXRlbTogSXRlbSwgaW5kZXg6IG51bWJlcikgPT4gc3RyaW5nLFxuICAgICAgLi4uXG4gICAgfSxcbiAgKTogc3RyaW5nIHtcbiAgICBpZiAocHJvcHMua2V5RXh0cmFjdG9yICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBwcm9wcy5rZXlFeHRyYWN0b3IoaXRlbSwgaW5kZXgpO1xuICAgIH1cblxuICAgIGNvbnN0IGtleSA9IGRlZmF1bHRLZXlFeHRyYWN0b3IoaXRlbSwgaW5kZXgpO1xuICAgIGlmIChrZXkgPT09IFN0cmluZyhpbmRleCkpIHtcbiAgICAgIF91c2VkSW5kZXhGb3JLZXkgPSB0cnVlO1xuICAgICAgaWYgKGl0ZW0udHlwZSAmJiBpdGVtLnR5cGUuZGlzcGxheU5hbWUpIHtcbiAgICAgICAgX2tleWxlc3NJdGVtQ29tcG9uZW50TmFtZSA9IGl0ZW0udHlwZS5kaXNwbGF5TmFtZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbiAgfVxuXG4gIHJlbmRlcigpOiBSZWFjdC5Ob2RlIHtcbiAgICB0aGlzLl9jaGVja1Byb3BzKHRoaXMucHJvcHMpO1xuICAgIGNvbnN0IHtMaXN0RW1wdHlDb21wb25lbnQsIExpc3RGb290ZXJDb21wb25lbnQsIExpc3RIZWFkZXJDb21wb25lbnR9ID1cbiAgICAgIHRoaXMucHJvcHM7XG4gICAgY29uc3Qge2RhdGEsIGhvcml6b250YWx9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBpbnZlcnNpb25TdHlsZSA9IHRoaXMucHJvcHMuaW52ZXJ0ZWRcbiAgICAgID8gaG9yaXpvbnRhbE9yRGVmYXVsdCh0aGlzLnByb3BzLmhvcml6b250YWwpXG4gICAgICAgID8gc3R5bGVzLmhvcml6b250YWxseUludmVydGVkXG4gICAgICAgIDogc3R5bGVzLnZlcnRpY2FsbHlJbnZlcnRlZFxuICAgICAgOiBudWxsO1xuICAgIGNvbnN0IGNlbGxzOiBBcnJheTxhbnkgfCBSZWFjdC5Ob2RlPiA9IFtdO1xuICAgIGNvbnN0IHN0aWNreUluZGljZXNGcm9tUHJvcHMgPSBuZXcgU2V0KHRoaXMucHJvcHMuc3RpY2t5SGVhZGVySW5kaWNlcyk7XG4gICAgY29uc3Qgc3RpY2t5SGVhZGVySW5kaWNlcyA9IFtdO1xuXG4gICAgLy8gMS4gQWRkIGNlbGwgZm9yIExpc3RIZWFkZXJDb21wb25lbnRcbiAgICBpZiAoTGlzdEhlYWRlckNvbXBvbmVudCkge1xuICAgICAgaWYgKHN0aWNreUluZGljZXNGcm9tUHJvcHMuaGFzKDApKSB7XG4gICAgICAgIHN0aWNreUhlYWRlckluZGljZXMucHVzaCgwKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBSZWFjdC5pc1ZhbGlkRWxlbWVudChMaXN0SGVhZGVyQ29tcG9uZW50KSA/IChcbiAgICAgICAgTGlzdEhlYWRlckNvbXBvbmVudFxuICAgICAgKSA6IChcbiAgICAgICAgLy8gJEZsb3dGaXhNZVtub3QtYS1jb21wb25lbnRdXG4gICAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXR5cGUtYXJnXVxuICAgICAgICA8TGlzdEhlYWRlckNvbXBvbmVudCAvPlxuICAgICAgKTtcbiAgICAgIGNlbGxzLnB1c2goXG4gICAgICAgIDxWaXJ0dWFsaXplZExpc3RDZWxsQ29udGV4dFByb3ZpZGVyXG4gICAgICAgICAgY2VsbEtleT17dGhpcy5fZ2V0Q2VsbEtleSgpICsgJy1oZWFkZXInfVxuICAgICAgICAgIGtleT1cIiRoZWFkZXJcIj5cbiAgICAgICAgICA8Vmlld1xuICAgICAgICAgICAgLy8gV2UgZXhwZWN0IHRoYXQgaGVhZGVyIGNvbXBvbmVudCB3aWxsIGJlIGEgc2luZ2xlIG5hdGl2ZSB2aWV3IHNvIG1ha2UgaXRcbiAgICAgICAgICAgIC8vIG5vdCBjb2xsYXBzYWJsZSB0byBhdm9pZCB0aGlzIHZpZXcgYmVpbmcgZmxhdHRlbmVkIGFuZCBtYWtlIHRoaXMgYXNzdW1wdGlvblxuICAgICAgICAgICAgLy8gbm8gbG9uZ2VyIHRydWUuXG4gICAgICAgICAgICBjb2xsYXBzYWJsZT17ZmFsc2V9XG4gICAgICAgICAgICBvbkxheW91dD17dGhpcy5fb25MYXlvdXRIZWFkZXJ9XG4gICAgICAgICAgICBzdHlsZT17U3R5bGVTaGVldC5jb21wb3NlKFxuICAgICAgICAgICAgICBpbnZlcnNpb25TdHlsZSxcbiAgICAgICAgICAgICAgdGhpcy5wcm9wcy5MaXN0SGVhZGVyQ29tcG9uZW50U3R5bGUsXG4gICAgICAgICAgICApfT5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdHlwZV0gLSBUeXBpbmcgUmVhY3ROYXRpdmVDb21wb25lbnQgcmV2ZWFsZWQgZXJyb3JzXG4gICAgICAgICAgICAgIGVsZW1lbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICA8L1ZpZXc+XG4gICAgICAgIDwvVmlydHVhbGl6ZWRMaXN0Q2VsbENvbnRleHRQcm92aWRlcj4sXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIDJhLiBBZGQgYSBjZWxsIGZvciBMaXN0RW1wdHlDb21wb25lbnQgaWYgYXBwbGljYWJsZVxuICAgIGNvbnN0IGl0ZW1Db3VudCA9IHRoaXMucHJvcHMuZ2V0SXRlbUNvdW50KGRhdGEpO1xuICAgIGlmIChpdGVtQ291bnQgPT09IDAgJiYgTGlzdEVtcHR5Q29tcG9uZW50KSB7XG4gICAgICBjb25zdCBlbGVtZW50OiBSZWFjdC5FbGVtZW50PGFueT4gPSAoKFJlYWN0LmlzVmFsaWRFbGVtZW50KFxuICAgICAgICBMaXN0RW1wdHlDb21wb25lbnQsXG4gICAgICApID8gKFxuICAgICAgICBMaXN0RW1wdHlDb21wb25lbnRcbiAgICAgICkgOiAoXG4gICAgICAgIC8vICRGbG93Rml4TWVbbm90LWEtY29tcG9uZW50XVxuICAgICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS10eXBlLWFyZ11cbiAgICAgICAgPExpc3RFbXB0eUNvbXBvbmVudCAvPlxuICAgICAgKSk6IGFueSk7XG4gICAgICBjZWxscy5wdXNoKFxuICAgICAgICA8VmlydHVhbGl6ZWRMaXN0Q2VsbENvbnRleHRQcm92aWRlclxuICAgICAgICAgIGNlbGxLZXk9e3RoaXMuX2dldENlbGxLZXkoKSArICctZW1wdHknfVxuICAgICAgICAgIGtleT1cIiRlbXB0eVwiPlxuICAgICAgICAgIHtSZWFjdC5jbG9uZUVsZW1lbnQoZWxlbWVudCwge1xuICAgICAgICAgICAgb25MYXlvdXQ6IChldmVudDogTGF5b3V0RXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5fb25MYXlvdXRFbXB0eShldmVudCk7XG4gICAgICAgICAgICAgIGlmIChlbGVtZW50LnByb3BzLm9uTGF5b3V0KSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5wcm9wcy5vbkxheW91dChldmVudCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdHlsZTogU3R5bGVTaGVldC5jb21wb3NlKGludmVyc2lvblN0eWxlLCBlbGVtZW50LnByb3BzLnN0eWxlKSxcbiAgICAgICAgICB9KX1cbiAgICAgICAgPC9WaXJ0dWFsaXplZExpc3RDZWxsQ29udGV4dFByb3ZpZGVyPixcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gMmIuIEFkZCBjZWxscyBhbmQgc3BhY2VycyBmb3IgZWFjaCBpdGVtXG4gICAgaWYgKGl0ZW1Db3VudCA+IDApIHtcbiAgICAgIF91c2VkSW5kZXhGb3JLZXkgPSBmYWxzZTtcbiAgICAgIF9rZXlsZXNzSXRlbUNvbXBvbmVudE5hbWUgPSAnJztcbiAgICAgIGNvbnN0IHNwYWNlcktleSA9IHRoaXMuX2dldFNwYWNlcktleSghaG9yaXpvbnRhbCk7XG5cbiAgICAgIGNvbnN0IHJlbmRlclJlZ2lvbnMgPSB0aGlzLnN0YXRlLnJlbmRlck1hc2suZW51bWVyYXRlUmVnaW9ucygpO1xuICAgICAgY29uc3QgbGFzdFJlZ2lvbiA9IHJlbmRlclJlZ2lvbnNbcmVuZGVyUmVnaW9ucy5sZW5ndGggLSAxXTtcbiAgICAgIGNvbnN0IGxhc3RTcGFjZXIgPSBsYXN0UmVnaW9uPy5pc1NwYWNlciA/IGxhc3RSZWdpb24gOiBudWxsO1xuXG4gICAgICBmb3IgKGNvbnN0IHNlY3Rpb24gb2YgcmVuZGVyUmVnaW9ucykge1xuICAgICAgICBpZiAoc2VjdGlvbi5pc1NwYWNlcikge1xuICAgICAgICAgIC8vIExlZ2FjeSBiZWhhdmlvciBpcyB0byBhdm9pZCBzcGFjZXJzIHdoZW4gdmlydHVhbGl6YXRpb24gaXNcbiAgICAgICAgICAvLyBkaXNhYmxlZCAoaW5jbHVkaW5nIGhlYWQgc3BhY2VycyBvbiBpbml0aWFsIHJlbmRlcikuXG4gICAgICAgICAgaWYgKHRoaXMucHJvcHMuZGlzYWJsZVZpcnR1YWxpemF0aW9uKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBXaXRob3V0IGdldEl0ZW1MYXlvdXQsIHdlIGxpbWl0IG91ciB0YWlsIHNwYWNlciB0byB0aGUgX2hpZ2hlc3RNZWFzdXJlZEZyYW1lSW5kZXggdG9cbiAgICAgICAgICAvLyBwcmV2ZW50IHRoZSB1c2VyIGZvciBoeXBlcnNjcm9sbGluZyBpbnRvIHVuLW1lYXN1cmVkIGFyZWEgYmVjYXVzZSBvdGhlcndpc2UgY29udGVudCB3aWxsXG4gICAgICAgICAgLy8gbGlrZWx5IGp1bXAgYXJvdW5kIGFzIGl0IHJlbmRlcnMgaW4gYWJvdmUgdGhlIHZpZXdwb3J0LlxuICAgICAgICAgIGNvbnN0IGlzTGFzdFNwYWNlciA9IHNlY3Rpb24gPT09IGxhc3RTcGFjZXI7XG4gICAgICAgICAgY29uc3QgY29uc3RyYWluVG9NZWFzdXJlZCA9IGlzTGFzdFNwYWNlciAmJiAhdGhpcy5wcm9wcy5nZXRJdGVtTGF5b3V0O1xuICAgICAgICAgIGNvbnN0IGxhc3QgPSBjb25zdHJhaW5Ub01lYXN1cmVkXG4gICAgICAgICAgICA/IGNsYW1wKFxuICAgICAgICAgICAgICAgIHNlY3Rpb24uZmlyc3QgLSAxLFxuICAgICAgICAgICAgICAgIHNlY3Rpb24ubGFzdCxcbiAgICAgICAgICAgICAgICB0aGlzLl9saXN0TWV0cmljcy5nZXRIaWdoZXN0TWVhc3VyZWRDZWxsSW5kZXgoKSxcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgOiBzZWN0aW9uLmxhc3Q7XG5cbiAgICAgICAgICBjb25zdCBmaXJzdE1ldHJpY3MgPSB0aGlzLl9saXN0TWV0cmljcy5nZXRDZWxsTWV0cmljc0FwcHJveChcbiAgICAgICAgICAgIHNlY3Rpb24uZmlyc3QsXG4gICAgICAgICAgICB0aGlzLnByb3BzLFxuICAgICAgICAgICk7XG4gICAgICAgICAgY29uc3QgbGFzdE1ldHJpY3MgPSB0aGlzLl9saXN0TWV0cmljcy5nZXRDZWxsTWV0cmljc0FwcHJveChcbiAgICAgICAgICAgIGxhc3QsXG4gICAgICAgICAgICB0aGlzLnByb3BzLFxuICAgICAgICAgICk7XG4gICAgICAgICAgY29uc3Qgc3BhY2VyU2l6ZSA9XG4gICAgICAgICAgICBsYXN0TWV0cmljcy5vZmZzZXQgKyBsYXN0TWV0cmljcy5sZW5ndGggLSBmaXJzdE1ldHJpY3Mub2Zmc2V0O1xuICAgICAgICAgIGNlbGxzLnB1c2goXG4gICAgICAgICAgICA8Vmlld1xuICAgICAgICAgICAgICBrZXk9e2Akc3BhY2VyLSR7c2VjdGlvbi5maXJzdH1gfVxuICAgICAgICAgICAgICBzdHlsZT17e1tzcGFjZXJLZXldOiBzcGFjZXJTaXplfX1cbiAgICAgICAgICAgIC8+LFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fcHVzaENlbGxzKFxuICAgICAgICAgICAgY2VsbHMsXG4gICAgICAgICAgICBzdGlja3lIZWFkZXJJbmRpY2VzLFxuICAgICAgICAgICAgc3RpY2t5SW5kaWNlc0Zyb21Qcm9wcyxcbiAgICAgICAgICAgIHNlY3Rpb24uZmlyc3QsXG4gICAgICAgICAgICBzZWN0aW9uLmxhc3QsXG4gICAgICAgICAgICBpbnZlcnNpb25TdHlsZSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5faGFzV2FybmVkLmtleXMgJiYgX3VzZWRJbmRleEZvcktleSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgJ1ZpcnR1YWxpemVkTGlzdDogbWlzc2luZyBrZXlzIGZvciBpdGVtcywgbWFrZSBzdXJlIHRvIHNwZWNpZnkgYSBrZXkgb3IgaWQgcHJvcGVydHkgb24gZWFjaCAnICtcbiAgICAgICAgICAgICdpdGVtIG9yIHByb3ZpZGUgYSBjdXN0b20ga2V5RXh0cmFjdG9yLicsXG4gICAgICAgICAgX2tleWxlc3NJdGVtQ29tcG9uZW50TmFtZSxcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5faGFzV2FybmVkLmtleXMgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIDMuIEFkZCBjZWxsIGZvciBMaXN0Rm9vdGVyQ29tcG9uZW50XG4gICAgaWYgKExpc3RGb290ZXJDb21wb25lbnQpIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBSZWFjdC5pc1ZhbGlkRWxlbWVudChMaXN0Rm9vdGVyQ29tcG9uZW50KSA/IChcbiAgICAgICAgTGlzdEZvb3RlckNvbXBvbmVudFxuICAgICAgKSA6IChcbiAgICAgICAgLy8gJEZsb3dGaXhNZVtub3QtYS1jb21wb25lbnRdXG4gICAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXR5cGUtYXJnXVxuICAgICAgICA8TGlzdEZvb3RlckNvbXBvbmVudCAvPlxuICAgICAgKTtcbiAgICAgIGNlbGxzLnB1c2goXG4gICAgICAgIDxWaXJ0dWFsaXplZExpc3RDZWxsQ29udGV4dFByb3ZpZGVyXG4gICAgICAgICAgY2VsbEtleT17dGhpcy5fZ2V0Rm9vdGVyQ2VsbEtleSgpfVxuICAgICAgICAgIGtleT1cIiRmb290ZXJcIj5cbiAgICAgICAgICA8Vmlld1xuICAgICAgICAgICAgb25MYXlvdXQ9e3RoaXMuX29uTGF5b3V0Rm9vdGVyfVxuICAgICAgICAgICAgc3R5bGU9e1N0eWxlU2hlZXQuY29tcG9zZShcbiAgICAgICAgICAgICAgaW52ZXJzaW9uU3R5bGUsXG4gICAgICAgICAgICAgIHRoaXMucHJvcHMuTGlzdEZvb3RlckNvbXBvbmVudFN0eWxlLFxuICAgICAgICAgICAgKX0+XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXR5cGVdIC0gVHlwaW5nIFJlYWN0TmF0aXZlQ29tcG9uZW50IHJldmVhbGVkIGVycm9yc1xuICAgICAgICAgICAgICBlbGVtZW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgPC9WaWV3PlxuICAgICAgICA8L1ZpcnR1YWxpemVkTGlzdENlbGxDb250ZXh0UHJvdmlkZXI+LFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyA0LiBSZW5kZXIgdGhlIFNjcm9sbFZpZXdcbiAgICBjb25zdCBzY3JvbGxQcm9wcyA9IHtcbiAgICAgIC4uLnRoaXMucHJvcHMsXG4gICAgICBvbkNvbnRlbnRTaXplQ2hhbmdlOiB0aGlzLl9vbkNvbnRlbnRTaXplQ2hhbmdlLFxuICAgICAgb25MYXlvdXQ6IHRoaXMuX29uTGF5b3V0LFxuICAgICAgb25TY3JvbGw6IHRoaXMuX29uU2Nyb2xsLFxuICAgICAgb25TY3JvbGxCZWdpbkRyYWc6IHRoaXMuX29uU2Nyb2xsQmVnaW5EcmFnLFxuICAgICAgb25TY3JvbGxFbmREcmFnOiB0aGlzLl9vblNjcm9sbEVuZERyYWcsXG4gICAgICBvbk1vbWVudHVtU2Nyb2xsQmVnaW46IHRoaXMuX29uTW9tZW50dW1TY3JvbGxCZWdpbixcbiAgICAgIG9uTW9tZW50dW1TY3JvbGxFbmQ6IHRoaXMuX29uTW9tZW50dW1TY3JvbGxFbmQsXG4gICAgICAvLyBpT1MvbWFjT1MgcmVxdWlyZXMgYSBub24temVybyBzY3JvbGxFdmVudFRocm90dGxlIHRvIGZpcmUgbW9yZSB0aGFuIGFcbiAgICAgIC8vIHNpbmdsZSBub3RpZmljYXRpb24gd2hpbGUgc2Nyb2xsaW5nLiBUaGlzIHdpbGwgb3RoZXJ3aXNlIG5vLW9wLlxuICAgICAgc2Nyb2xsRXZlbnRUaHJvdHRsZTogdGhpcy5wcm9wcy5zY3JvbGxFdmVudFRocm90dGxlID8/IDAuMDAwMSxcbiAgICAgIGludmVydFN0aWNreUhlYWRlcnM6XG4gICAgICAgIHRoaXMucHJvcHMuaW52ZXJ0U3RpY2t5SGVhZGVycyAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyB0aGlzLnByb3BzLmludmVydFN0aWNreUhlYWRlcnNcbiAgICAgICAgICA6IHRoaXMucHJvcHMuaW52ZXJ0ZWQsXG4gICAgICBzdGlja3lIZWFkZXJJbmRpY2VzLFxuICAgICAgc3R5bGU6IGludmVyc2lvblN0eWxlXG4gICAgICAgID8gW2ludmVyc2lvblN0eWxlLCB0aGlzLnByb3BzLnN0eWxlXVxuICAgICAgICA6IHRoaXMucHJvcHMuc3R5bGUsXG4gICAgICBpc0ludmVydGVkVmlydHVhbGl6ZWRMaXN0OiB0aGlzLnByb3BzLmludmVydGVkLFxuICAgICAgbWFpbnRhaW5WaXNpYmxlQ29udGVudFBvc2l0aW9uOlxuICAgICAgICB0aGlzLnByb3BzLm1haW50YWluVmlzaWJsZUNvbnRlbnRQb3NpdGlvbiAhPSBudWxsXG4gICAgICAgICAgPyB7XG4gICAgICAgICAgICAgIC4uLnRoaXMucHJvcHMubWFpbnRhaW5WaXNpYmxlQ29udGVudFBvc2l0aW9uLFxuICAgICAgICAgICAgICAvLyBBZGp1c3QgaW5kZXggdG8gYWNjb3VudCBmb3IgTGlzdEhlYWRlckNvbXBvbmVudC5cbiAgICAgICAgICAgICAgbWluSW5kZXhGb3JWaXNpYmxlOlxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMubWFpbnRhaW5WaXNpYmxlQ29udGVudFBvc2l0aW9uLm1pbkluZGV4Rm9yVmlzaWJsZSArXG4gICAgICAgICAgICAgICAgKHRoaXMucHJvcHMuTGlzdEhlYWRlckNvbXBvbmVudCA/IDEgOiAwKSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICB9O1xuXG4gICAgdGhpcy5faGFzTW9yZSA9IHRoaXMuc3RhdGUuY2VsbHNBcm91bmRWaWV3cG9ydC5sYXN0IDwgaXRlbUNvdW50IC0gMTtcblxuICAgIGNvbnN0IGlubmVyUmV0ID0gKFxuICAgICAgPFZpcnR1YWxpemVkTGlzdENvbnRleHRQcm92aWRlclxuICAgICAgICB2YWx1ZT17e1xuICAgICAgICAgIGNlbGxLZXk6IG51bGwsXG4gICAgICAgICAgZ2V0U2Nyb2xsTWV0cmljczogdGhpcy5fZ2V0U2Nyb2xsTWV0cmljcyxcbiAgICAgICAgICBob3Jpem9udGFsOiBob3Jpem9udGFsT3JEZWZhdWx0KHRoaXMucHJvcHMuaG9yaXpvbnRhbCksXG4gICAgICAgICAgZ2V0T3V0ZXJtb3N0UGFyZW50TGlzdFJlZjogdGhpcy5fZ2V0T3V0ZXJtb3N0UGFyZW50TGlzdFJlZixcbiAgICAgICAgICByZWdpc3RlckFzTmVzdGVkQ2hpbGQ6IHRoaXMuX3JlZ2lzdGVyQXNOZXN0ZWRDaGlsZCxcbiAgICAgICAgICB1bnJlZ2lzdGVyQXNOZXN0ZWRDaGlsZDogdGhpcy5fdW5yZWdpc3RlckFzTmVzdGVkQ2hpbGQsXG4gICAgICAgIH19PlxuICAgICAgICB7UmVhY3QuY2xvbmVFbGVtZW50KFxuICAgICAgICAgIChcbiAgICAgICAgICAgIHRoaXMucHJvcHMucmVuZGVyU2Nyb2xsQ29tcG9uZW50IHx8XG4gICAgICAgICAgICB0aGlzLl9kZWZhdWx0UmVuZGVyU2Nyb2xsQ29tcG9uZW50XG4gICAgICAgICAgKShzY3JvbGxQcm9wcyksXG4gICAgICAgICAge1xuICAgICAgICAgICAgcmVmOiB0aGlzLl9jYXB0dXJlU2Nyb2xsUmVmLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgY2VsbHMsXG4gICAgICAgICl9XG4gICAgICA8L1ZpcnR1YWxpemVkTGlzdENvbnRleHRQcm92aWRlcj5cbiAgICApO1xuICAgIGxldCByZXQ6IFJlYWN0Lk5vZGUgPSBpbm5lclJldDtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgcmV0ID0gKFxuICAgICAgICA8U2Nyb2xsVmlldy5Db250ZXh0LkNvbnN1bWVyPlxuICAgICAgICAgIHtzY3JvbGxDb250ZXh0ID0+IHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgc2Nyb2xsQ29udGV4dCAhPSBudWxsICYmXG4gICAgICAgICAgICAgICFzY3JvbGxDb250ZXh0Lmhvcml6b250YWwgPT09XG4gICAgICAgICAgICAgICAgIWhvcml6b250YWxPckRlZmF1bHQodGhpcy5wcm9wcy5ob3Jpem9udGFsKSAmJlxuICAgICAgICAgICAgICAhdGhpcy5faGFzV2FybmVkLm5lc3RpbmcgJiZcbiAgICAgICAgICAgICAgdGhpcy5jb250ZXh0ID09IG51bGwgJiZcbiAgICAgICAgICAgICAgdGhpcy5wcm9wcy5zY3JvbGxFbmFibGVkICE9PSBmYWxzZVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIC8vIFRPRE8gKFQ0NjU0NzA0NCk6IHVzZSBSZWFjdC53YXJuIG9uY2UgMTYuOSBpcyBzeW5jJ2Q6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9wdWxsLzE1MTcwXG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgJ1ZpcnR1YWxpemVkTGlzdHMgc2hvdWxkIG5ldmVyIGJlIG5lc3RlZCBpbnNpZGUgcGxhaW4gU2Nyb2xsVmlld3Mgd2l0aCB0aGUgc2FtZSAnICtcbiAgICAgICAgICAgICAgICAgICdvcmllbnRhdGlvbiBiZWNhdXNlIGl0IGNhbiBicmVhayB3aW5kb3dpbmcgYW5kIG90aGVyIGZ1bmN0aW9uYWxpdHkgLSB1c2UgYW5vdGhlciAnICtcbiAgICAgICAgICAgICAgICAgICdWaXJ0dWFsaXplZExpc3QtYmFja2VkIGNvbnRhaW5lciBpbnN0ZWFkLicsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIHRoaXMuX2hhc1dhcm5lZC5uZXN0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpbm5lclJldDtcbiAgICAgICAgICB9fVxuICAgICAgICA8L1Njcm9sbFZpZXcuQ29udGV4dC5Db25zdW1lcj5cbiAgICAgICk7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BzLmRlYnVnKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmRlYnVnfT5cbiAgICAgICAgICB7cmV0fVxuICAgICAgICAgIHt0aGlzLl9yZW5kZXJEZWJ1Z092ZXJsYXkoKX1cbiAgICAgICAgPC9WaWV3PlxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzOiBQcm9wcykge1xuICAgIGNvbnN0IHtkYXRhLCBleHRyYURhdGF9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoZGF0YSAhPT0gcHJldlByb3BzLmRhdGEgfHwgZXh0cmFEYXRhICE9PSBwcmV2UHJvcHMuZXh0cmFEYXRhKSB7XG4gICAgICAvLyBjbGVhciB0aGUgdmlld2FibGVJbmRpY2VzIGNhY2hlIHRvIGFsc28gdHJpZ2dlclxuICAgICAgLy8gdGhlIG9uVmlld2FibGVJdGVtc0NoYW5nZWQgY2FsbGJhY2sgd2l0aCB0aGUgbmV3IGRhdGFcbiAgICAgIHRoaXMuX3ZpZXdhYmlsaXR5VHVwbGVzLmZvckVhY2godHVwbGUgPT4ge1xuICAgICAgICB0dXBsZS52aWV3YWJpbGl0eUhlbHBlci5yZXNldFZpZXdhYmxlSW5kaWNlcygpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIFRoZSBgdGhpcy5faGlQcmlJblByb2dyZXNzYCBpcyBndWFyYW50ZWVpbmcgYSBoaVByaSBjZWxsIHVwZGF0ZSB3aWxsIG9ubHkgaGFwcGVuXG4gICAgLy8gb25jZSBwZXIgZmliZXIgdXBkYXRlLiBUaGUgYF9zY2hlZHVsZUNlbGxzVG9SZW5kZXJVcGRhdGVgIHdpbGwgc2V0IGl0IHRvIHRydWVcbiAgICAvLyBpZiBhIGhpUHJpIHVwZGF0ZSBuZWVkcyB0byBwZXJmb3JtLiBJZiBgY29tcG9uZW50RGlkVXBkYXRlYCBpcyB0cmlnZ2VyZWQgd2l0aFxuICAgIC8vIGB0aGlzLl9oaVByaUluUHJvZ3Jlc3M9dHJ1ZWAsIG1lYW5zIGl0J3MgdHJpZ2dlcmVkIGJ5IHRoZSBoaVByaSB1cGRhdGUuIFRoZVxuICAgIC8vIGBfc2NoZWR1bGVDZWxsc1RvUmVuZGVyVXBkYXRlYCB3aWxsIGNoZWNrIHRoaXMgY29uZGl0aW9uIGFuZCBub3QgcGVyZm9ybVxuICAgIC8vIGFub3RoZXIgaGlQcmkgdXBkYXRlLlxuICAgIGNvbnN0IGhpUHJpSW5Qcm9ncmVzcyA9IHRoaXMuX2hpUHJpSW5Qcm9ncmVzcztcbiAgICB0aGlzLl9zY2hlZHVsZUNlbGxzVG9SZW5kZXJVcGRhdGUoKTtcbiAgICAvLyBNYWtlIHN1cmUgc2V0dGluZyBgdGhpcy5faGlQcmlJblByb2dyZXNzYCBiYWNrIHRvIGZhbHNlIGFmdGVyIGBjb21wb25lbnREaWRVcGRhdGVgXG4gICAgLy8gaXMgdHJpZ2dlcmVkIHdpdGggYHRoaXMuX2hpUHJpSW5Qcm9ncmVzcyA9IHRydWVgXG4gICAgaWYgKGhpUHJpSW5Qcm9ncmVzcykge1xuICAgICAgdGhpcy5faGlQcmlJblByb2dyZXNzID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgX2NlbGxSZWZzOiB7W3N0cmluZ106IG51bGwgfCBDZWxsUmVuZGVyZXI8YW55Pn0gPSB7fTtcbiAgX2ZpbGxSYXRlSGVscGVyOiBGaWxsUmF0ZUhlbHBlcjtcbiAgX2xpc3RNZXRyaWNzOiBMaXN0TWV0cmljc0FnZ3JlZ2F0b3IgPSBuZXcgTGlzdE1ldHJpY3NBZ2dyZWdhdG9yKCk7XG4gIF9mb290ZXJMZW5ndGggPSAwO1xuICAvLyBVc2VkIGZvciBwcmV2ZW50aW5nIHNjcm9sbFRvSW5kZXggZnJvbSBiZWluZyBjYWxsZWQgbXVsdGlwbGUgdGltZXMgZm9yIGluaXRpYWxTY3JvbGxJbmRleFxuICBfaGFzVHJpZ2dlcmVkSW5pdGlhbFNjcm9sbFRvSW5kZXggPSBmYWxzZTtcbiAgX2hhc0ludGVyYWN0ZWQgPSBmYWxzZTtcbiAgX2hhc01vcmUgPSBmYWxzZTtcbiAgX2hhc1dhcm5lZDoge1tzdHJpbmddOiBib29sZWFufSA9IHt9O1xuICBfaGVhZGVyTGVuZ3RoID0gMDtcbiAgX2hpUHJpSW5Qcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlOyAvLyBmbGFnIHRvIHByZXZlbnQgaW5maW5pdGUgaGlQcmkgY2VsbCBsaW1pdCB1cGRhdGVcbiAgX2luZGljZXNUb0tleXM6IE1hcDxudW1iZXIsIHN0cmluZz4gPSBuZXcgTWFwKCk7XG4gIF9sYXN0Rm9jdXNlZENlbGxLZXk6ID9zdHJpbmcgPSBudWxsO1xuICBfbmVzdGVkQ2hpbGRMaXN0czogQ2hpbGRMaXN0Q29sbGVjdGlvbjxWaXJ0dWFsaXplZExpc3Q+ID1cbiAgICBuZXcgQ2hpbGRMaXN0Q29sbGVjdGlvbigpO1xuICBfb2Zmc2V0RnJvbVBhcmVudFZpcnR1YWxpemVkTGlzdDogbnVtYmVyID0gMDtcbiAgX3BlbmRpbmdWaWV3YWJpbGl0eVVwZGF0ZTogYm9vbGVhbiA9IGZhbHNlO1xuICBfcHJldlBhcmVudE9mZnNldDogbnVtYmVyID0gMDtcbiAgX3Njcm9sbE1ldHJpY3M6IHtcbiAgICBkT2Zmc2V0OiBudW1iZXIsXG4gICAgZHQ6IG51bWJlcixcbiAgICBvZmZzZXQ6IG51bWJlcixcbiAgICB0aW1lc3RhbXA6IG51bWJlcixcbiAgICB2ZWxvY2l0eTogbnVtYmVyLFxuICAgIHZpc2libGVMZW5ndGg6IG51bWJlcixcbiAgICB6b29tU2NhbGU6IG51bWJlcixcbiAgfSA9IHtcbiAgICBkT2Zmc2V0OiAwLFxuICAgIGR0OiAxMCxcbiAgICBvZmZzZXQ6IDAsXG4gICAgdGltZXN0YW1wOiAwLFxuICAgIHZlbG9jaXR5OiAwLFxuICAgIHZpc2libGVMZW5ndGg6IDAsXG4gICAgem9vbVNjYWxlOiAxLFxuICB9O1xuICBfc2Nyb2xsUmVmOiA/UmVhY3QuRWxlbWVudFJlZjxhbnk+ID0gbnVsbDtcbiAgX3NlbnRTdGFydEZvckNvbnRlbnRMZW5ndGggPSAwO1xuICBfc2VudEVuZEZvckNvbnRlbnRMZW5ndGggPSAwO1xuICBfdXBkYXRlQ2VsbHNUb1JlbmRlckJhdGNoZXI6IEJhdGNoaW5hdG9yO1xuICBfdmlld2FiaWxpdHlUdXBsZXM6IEFycmF5PFZpZXdhYmlsaXR5SGVscGVyQ2FsbGJhY2tUdXBsZT4gPSBbXTtcblxuICAvKiAkRmxvd0ZpeE1lW21pc3NpbmctbG9jYWwtYW5ub3RdIFRoZSB0eXBlIGFubm90YXRpb24ocykgcmVxdWlyZWQgYnkgRmxvdydzXG4gICAqIExUSSB1cGRhdGUgY291bGQgbm90IGJlIGFkZGVkIHZpYSBjb2RlbW9kICovXG4gIF9jYXB0dXJlU2Nyb2xsUmVmID0gcmVmID0+IHtcbiAgICB0aGlzLl9zY3JvbGxSZWYgPSByZWY7XG4gIH07XG5cbiAgX2NvbXB1dGVCbGFua25lc3MoKSB7XG4gICAgdGhpcy5fZmlsbFJhdGVIZWxwZXIuY29tcHV0ZUJsYW5rbmVzcyhcbiAgICAgIHRoaXMucHJvcHMsXG4gICAgICB0aGlzLnN0YXRlLmNlbGxzQXJvdW5kVmlld3BvcnQsXG4gICAgICB0aGlzLl9zY3JvbGxNZXRyaWNzLFxuICAgICk7XG4gIH1cblxuICAvKiAkRmxvd0ZpeE1lW21pc3NpbmctbG9jYWwtYW5ub3RdIFRoZSB0eXBlIGFubm90YXRpb24ocykgcmVxdWlyZWQgYnkgRmxvdydzXG4gICAqIExUSSB1cGRhdGUgY291bGQgbm90IGJlIGFkZGVkIHZpYSBjb2RlbW9kICovXG4gIF9kZWZhdWx0UmVuZGVyU2Nyb2xsQ29tcG9uZW50ID0gcHJvcHMgPT4ge1xuICAgIGNvbnN0IG9uUmVmcmVzaCA9IHByb3BzLm9uUmVmcmVzaDtcbiAgICBpZiAodGhpcy5faXNOZXN0ZWRXaXRoU2FtZU9yaWVudGF0aW9uKCkpIHtcbiAgICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXSAtIFR5cGluZyBSZWFjdE5hdGl2ZUNvbXBvbmVudCByZXZlYWxlZCBlcnJvcnNcbiAgICAgIHJldHVybiA8VmlldyB7Li4ucHJvcHN9IC8+O1xuICAgIH0gZWxzZSBpZiAob25SZWZyZXNoKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIHR5cGVvZiBwcm9wcy5yZWZyZXNoaW5nID09PSAnYm9vbGVhbicsXG4gICAgICAgICdgcmVmcmVzaGluZ2AgcHJvcCBtdXN0IGJlIHNldCBhcyBhIGJvb2xlYW4gaW4gb3JkZXIgdG8gdXNlIGBvblJlZnJlc2hgLCBidXQgZ290IGAnICtcbiAgICAgICAgICBKU09OLnN0cmluZ2lmeShwcm9wcy5yZWZyZXNoaW5nID8/ICd1bmRlZmluZWQnKSArXG4gICAgICAgICAgJ2AnLFxuICAgICAgKTtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXSBJbnZhbGlkIHByb3AgdXNhZ2VcbiAgICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdXNlXVxuICAgICAgICA8U2Nyb2xsVmlld1xuICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICByZWZyZXNoQ29udHJvbD17XG4gICAgICAgICAgICBwcm9wcy5yZWZyZXNoQ29udHJvbCA9PSBudWxsID8gKFxuICAgICAgICAgICAgICA8UmVmcmVzaENvbnRyb2xcbiAgICAgICAgICAgICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS10eXBlXVxuICAgICAgICAgICAgICAgIHJlZnJlc2hpbmc9e3Byb3BzLnJlZnJlc2hpbmd9XG4gICAgICAgICAgICAgICAgb25SZWZyZXNoPXtvblJlZnJlc2h9XG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3NWaWV3T2Zmc2V0PXtwcm9wcy5wcm9ncmVzc1ZpZXdPZmZzZXR9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICBwcm9wcy5yZWZyZXNoQ29udHJvbFxuICAgICAgICAgICAgKVxuICAgICAgICAgIH1cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXSBJbnZhbGlkIHByb3AgdXNhZ2VcbiAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXVzZV1cbiAgICAgIHJldHVybiA8U2Nyb2xsVmlldyB7Li4ucHJvcHN9IC8+O1xuICAgIH1cbiAgfTtcblxuICBfb25DZWxsTGF5b3V0ID0gKFxuICAgIGU6IExheW91dEV2ZW50LFxuICAgIGNlbGxLZXk6IHN0cmluZyxcbiAgICBjZWxsSW5kZXg6IG51bWJlcixcbiAgKTogdm9pZCA9PiB7XG4gICAgY29uc3QgbGF5b3V0SGFzQ2hhbmdlZCA9IHRoaXMuX2xpc3RNZXRyaWNzLm5vdGlmeUNlbGxMYXlvdXQoe1xuICAgICAgY2VsbEluZGV4LFxuICAgICAgY2VsbEtleSxcbiAgICAgIGxheW91dDogZS5uYXRpdmVFdmVudC5sYXlvdXQsXG4gICAgICBvcmllbnRhdGlvbjogdGhpcy5fb3JpZW50YXRpb24oKSxcbiAgICB9KTtcblxuICAgIGlmIChsYXlvdXRIYXNDaGFuZ2VkKSB7XG4gICAgICB0aGlzLl9zY2hlZHVsZUNlbGxzVG9SZW5kZXJVcGRhdGUoKTtcbiAgICB9XG5cbiAgICB0aGlzLl90cmlnZ2VyUmVtZWFzdXJlRm9yQ2hpbGRMaXN0c0luQ2VsbChjZWxsS2V5KTtcbiAgICB0aGlzLl9jb21wdXRlQmxhbmtuZXNzKCk7XG4gICAgdGhpcy5fdXBkYXRlVmlld2FibGVJdGVtcyh0aGlzLnByb3BzLCB0aGlzLnN0YXRlLmNlbGxzQXJvdW5kVmlld3BvcnQpO1xuICB9O1xuXG4gIF9vbkNlbGxGb2N1c0NhcHR1cmUoY2VsbEtleTogc3RyaW5nKSB7XG4gICAgdGhpcy5fbGFzdEZvY3VzZWRDZWxsS2V5ID0gY2VsbEtleTtcbiAgICB0aGlzLl91cGRhdGVDZWxsc1RvUmVuZGVyKCk7XG4gIH1cblxuICBfb25DZWxsVW5tb3VudCA9IChjZWxsS2V5OiBzdHJpbmcpID0+IHtcbiAgICBkZWxldGUgdGhpcy5fY2VsbFJlZnNbY2VsbEtleV07XG4gICAgdGhpcy5fbGlzdE1ldHJpY3Mubm90aWZ5Q2VsbFVubW91bnRlZChjZWxsS2V5KTtcbiAgfTtcblxuICBfdHJpZ2dlclJlbWVhc3VyZUZvckNoaWxkTGlzdHNJbkNlbGwoY2VsbEtleTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5fbmVzdGVkQ2hpbGRMaXN0cy5mb3JFYWNoSW5DZWxsKGNlbGxLZXksIGNoaWxkTGlzdCA9PiB7XG4gICAgICBjaGlsZExpc3QubWVhc3VyZUxheW91dFJlbGF0aXZlVG9Db250YWluaW5nTGlzdCgpO1xuICAgIH0pO1xuICB9XG5cbiAgbWVhc3VyZUxheW91dFJlbGF0aXZlVG9Db250YWluaW5nTGlzdCgpOiB2b2lkIHtcbiAgICAvLyBUT0RPIChUMzU1NzQ1MzgpOiBmaW5kTm9kZUhhbmRsZSBzb21ldGltZXMgY3Jhc2hlcyB3aXRoIFwiVW5hYmxlIHRvIGZpbmRcbiAgICAvLyBub2RlIG9uIGFuIHVubW91bnRlZCBjb21wb25lbnRcIiBkdXJpbmcgc2Nyb2xsaW5nXG4gICAgdHJ5IHtcbiAgICAgIGlmICghdGhpcy5fc2Nyb2xsUmVmKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIFdlIGFyZSBhc3N1bWluZyB0aGF0IGdldE91dGVybW9zdFBhcmVudExpc3RSZWYoKS5nZXRTY3JvbGxSZWYoKVxuICAgICAgLy8gaXMgYSBub24tbnVsbCByZWZlcmVuY2UgdG8gYSBTY3JvbGxWaWV3XG4gICAgICB0aGlzLl9zY3JvbGxSZWYubWVhc3VyZUxheW91dChcbiAgICAgICAgdGhpcy5jb250ZXh0LmdldE91dGVybW9zdFBhcmVudExpc3RSZWYoKS5nZXRTY3JvbGxSZWYoKSxcbiAgICAgICAgKHgsIHksIHdpZHRoLCBoZWlnaHQpID0+IHtcbiAgICAgICAgICB0aGlzLl9vZmZzZXRGcm9tUGFyZW50VmlydHVhbGl6ZWRMaXN0ID0gdGhpcy5fc2VsZWN0T2Zmc2V0KHt4LCB5fSk7XG4gICAgICAgICAgdGhpcy5fbGlzdE1ldHJpY3Mubm90aWZ5TGlzdENvbnRlbnRMYXlvdXQoe1xuICAgICAgICAgICAgbGF5b3V0OiB7d2lkdGgsIGhlaWdodH0sXG4gICAgICAgICAgICBvcmllbnRhdGlvbjogdGhpcy5fb3JpZW50YXRpb24oKSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjb25zdCBzY3JvbGxNZXRyaWNzID0gdGhpcy5fY29udmVydFBhcmVudFNjcm9sbE1ldHJpY3MoXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZ2V0U2Nyb2xsTWV0cmljcygpLFxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBjb25zdCBtZXRyaWNzQ2hhbmdlZCA9XG4gICAgICAgICAgICB0aGlzLl9zY3JvbGxNZXRyaWNzLnZpc2libGVMZW5ndGggIT09IHNjcm9sbE1ldHJpY3MudmlzaWJsZUxlbmd0aCB8fFxuICAgICAgICAgICAgdGhpcy5fc2Nyb2xsTWV0cmljcy5vZmZzZXQgIT09IHNjcm9sbE1ldHJpY3Mub2Zmc2V0O1xuXG4gICAgICAgICAgaWYgKG1ldHJpY3NDaGFuZ2VkKSB7XG4gICAgICAgICAgICB0aGlzLl9zY3JvbGxNZXRyaWNzLnZpc2libGVMZW5ndGggPSBzY3JvbGxNZXRyaWNzLnZpc2libGVMZW5ndGg7XG4gICAgICAgICAgICB0aGlzLl9zY3JvbGxNZXRyaWNzLm9mZnNldCA9IHNjcm9sbE1ldHJpY3Mub2Zmc2V0O1xuXG4gICAgICAgICAgICAvLyBJZiBtZXRyaWNzIG9mIHRoZSBzY3JvbGxWaWV3IGNoYW5nZWQsIHRoZW4gd2UgdHJpZ2dlcmVkIHJlbWVhc3VyZSBmb3IgY2hpbGQgbGlzdFxuICAgICAgICAgICAgLy8gdG8gZW5zdXJlIFZpcnR1YWxpemVkTGlzdCBoYXMgdGhlIHJpZ2h0IGluZm9ybWF0aW9uLlxuICAgICAgICAgICAgdGhpcy5fbmVzdGVkQ2hpbGRMaXN0cy5mb3JFYWNoKGNoaWxkTGlzdCA9PiB7XG4gICAgICAgICAgICAgIGNoaWxkTGlzdC5tZWFzdXJlTGF5b3V0UmVsYXRpdmVUb0NvbnRhaW5pbmdMaXN0KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yID0+IHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICBcIlZpcnR1YWxpemVkTGlzdDogRW5jb3VudGVyZWQgYW4gZXJyb3Igd2hpbGUgbWVhc3VyaW5nIGEgbGlzdCdzXCIgK1xuICAgICAgICAgICAgICAnIG9mZnNldCBmcm9tIGl0cyBjb250YWluaW5nIFZpcnR1YWxpemVkTGlzdC4nLFxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdtZWFzdXJlTGF5b3V0UmVsYXRpdmVUb0NvbnRhaW5pbmdMaXN0IHRocmV3IGFuIGVycm9yJyxcbiAgICAgICAgZXJyb3Iuc3RhY2ssXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIF9vbkxheW91dCA9IChlOiBMYXlvdXRFdmVudCkgPT4ge1xuICAgIGlmICh0aGlzLl9pc05lc3RlZFdpdGhTYW1lT3JpZW50YXRpb24oKSkge1xuICAgICAgLy8gTmVlZCB0byBhZGp1c3Qgb3VyIHNjcm9sbCBtZXRyaWNzIHRvIGJlIHJlbGF0aXZlIHRvIG91ciBjb250YWluaW5nXG4gICAgICAvLyBWaXJ0dWFsaXplZExpc3QgYmVmb3JlIHdlIGNhbiBtYWtlIGNsYWltcyBhYm91dCBsaXN0IGl0ZW0gdmlld2FiaWxpdHlcbiAgICAgIHRoaXMubWVhc3VyZUxheW91dFJlbGF0aXZlVG9Db250YWluaW5nTGlzdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9zY3JvbGxNZXRyaWNzLnZpc2libGVMZW5ndGggPSB0aGlzLl9zZWxlY3RMZW5ndGgoXG4gICAgICAgIGUubmF0aXZlRXZlbnQubGF5b3V0LFxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5wcm9wcy5vbkxheW91dCAmJiB0aGlzLnByb3BzLm9uTGF5b3V0KGUpO1xuICAgIHRoaXMuX3NjaGVkdWxlQ2VsbHNUb1JlbmRlclVwZGF0ZSgpO1xuICAgIHRoaXMuX21heWJlQ2FsbE9uRWRnZVJlYWNoZWQoKTtcbiAgfTtcblxuICBfb25MYXlvdXRFbXB0eSA9IChlOiBMYXlvdXRFdmVudCkgPT4ge1xuICAgIHRoaXMucHJvcHMub25MYXlvdXQgJiYgdGhpcy5wcm9wcy5vbkxheW91dChlKTtcbiAgfTtcblxuICBfZ2V0Rm9vdGVyQ2VsbEtleSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9nZXRDZWxsS2V5KCkgKyAnLWZvb3Rlcic7XG4gIH1cblxuICBfb25MYXlvdXRGb290ZXIgPSAoZTogTGF5b3V0RXZlbnQpID0+IHtcbiAgICB0aGlzLl90cmlnZ2VyUmVtZWFzdXJlRm9yQ2hpbGRMaXN0c0luQ2VsbCh0aGlzLl9nZXRGb290ZXJDZWxsS2V5KCkpO1xuICAgIHRoaXMuX2Zvb3Rlckxlbmd0aCA9IHRoaXMuX3NlbGVjdExlbmd0aChlLm5hdGl2ZUV2ZW50LmxheW91dCk7XG4gIH07XG5cbiAgX29uTGF5b3V0SGVhZGVyID0gKGU6IExheW91dEV2ZW50KSA9PiB7XG4gICAgdGhpcy5faGVhZGVyTGVuZ3RoID0gdGhpcy5fc2VsZWN0TGVuZ3RoKGUubmF0aXZlRXZlbnQubGF5b3V0KTtcbiAgfTtcblxuICAvLyAkRmxvd0ZpeE1lW21pc3NpbmctbG9jYWwtYW5ub3RdXG4gIF9yZW5kZXJEZWJ1Z092ZXJsYXkoKSB7XG4gICAgY29uc3Qgbm9ybWFsaXplID1cbiAgICAgIHRoaXMuX3Njcm9sbE1ldHJpY3MudmlzaWJsZUxlbmd0aCAvXG4gICAgICAodGhpcy5fbGlzdE1ldHJpY3MuZ2V0Q29udGVudExlbmd0aCgpIHx8IDEpO1xuICAgIGNvbnN0IGZyYW1lc0luTGF5b3V0ID0gW107XG4gICAgY29uc3QgaXRlbUNvdW50ID0gdGhpcy5wcm9wcy5nZXRJdGVtQ291bnQodGhpcy5wcm9wcy5kYXRhKTtcbiAgICBmb3IgKGxldCBpaSA9IDA7IGlpIDwgaXRlbUNvdW50OyBpaSsrKSB7XG4gICAgICBjb25zdCBmcmFtZSA9IHRoaXMuX2xpc3RNZXRyaWNzLmdldENlbGxNZXRyaWNzQXBwcm94KGlpLCB0aGlzLnByb3BzKTtcbiAgICAgIGlmIChmcmFtZS5pc01vdW50ZWQpIHtcbiAgICAgICAgZnJhbWVzSW5MYXlvdXQucHVzaChmcmFtZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHdpbmRvd1RvcCA9IHRoaXMuX2xpc3RNZXRyaWNzLmdldENlbGxNZXRyaWNzQXBwcm94KFxuICAgICAgdGhpcy5zdGF0ZS5jZWxsc0Fyb3VuZFZpZXdwb3J0LmZpcnN0LFxuICAgICAgdGhpcy5wcm9wcyxcbiAgICApLm9mZnNldDtcbiAgICBjb25zdCBmcmFtZUxhc3QgPSB0aGlzLl9saXN0TWV0cmljcy5nZXRDZWxsTWV0cmljc0FwcHJveChcbiAgICAgIHRoaXMuc3RhdGUuY2VsbHNBcm91bmRWaWV3cG9ydC5sYXN0LFxuICAgICAgdGhpcy5wcm9wcyxcbiAgICApO1xuICAgIGNvbnN0IHdpbmRvd0xlbiA9IGZyYW1lTGFzdC5vZmZzZXQgKyBmcmFtZUxhc3QubGVuZ3RoIC0gd2luZG93VG9wO1xuICAgIGNvbnN0IHZpc1RvcCA9IHRoaXMuX3Njcm9sbE1ldHJpY3Mub2Zmc2V0O1xuICAgIGNvbnN0IHZpc0xlbiA9IHRoaXMuX3Njcm9sbE1ldHJpY3MudmlzaWJsZUxlbmd0aDtcblxuICAgIHJldHVybiAoXG4gICAgICA8VmlldyBzdHlsZT17W3N0eWxlcy5kZWJ1Z092ZXJsYXlCYXNlLCBzdHlsZXMuZGVidWdPdmVybGF5XX0+XG4gICAgICAgIHtmcmFtZXNJbkxheW91dC5tYXAoKGYsIGlpKSA9PiAoXG4gICAgICAgICAgPFZpZXdcbiAgICAgICAgICAgIGtleT17J2YnICsgaWl9XG4gICAgICAgICAgICBzdHlsZT17W1xuICAgICAgICAgICAgICBzdHlsZXMuZGVidWdPdmVybGF5QmFzZSxcbiAgICAgICAgICAgICAgc3R5bGVzLmRlYnVnT3ZlcmxheUZyYW1lLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdG9wOiBmLm9mZnNldCAqIG5vcm1hbGl6ZSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGYubGVuZ3RoICogbm9ybWFsaXplLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXX1cbiAgICAgICAgICAvPlxuICAgICAgICApKX1cbiAgICAgICAgPFZpZXdcbiAgICAgICAgICBzdHlsZT17W1xuICAgICAgICAgICAgc3R5bGVzLmRlYnVnT3ZlcmxheUJhc2UsXG4gICAgICAgICAgICBzdHlsZXMuZGVidWdPdmVybGF5RnJhbWVMYXN0LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB0b3A6IHdpbmRvd1RvcCAqIG5vcm1hbGl6ZSxcbiAgICAgICAgICAgICAgaGVpZ2h0OiB3aW5kb3dMZW4gKiBub3JtYWxpemUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF19XG4gICAgICAgIC8+XG4gICAgICAgIDxWaWV3XG4gICAgICAgICAgc3R5bGU9e1tcbiAgICAgICAgICAgIHN0eWxlcy5kZWJ1Z092ZXJsYXlCYXNlLFxuICAgICAgICAgICAgc3R5bGVzLmRlYnVnT3ZlcmxheUZyYW1lVmlzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB0b3A6IHZpc1RvcCAqIG5vcm1hbGl6ZSxcbiAgICAgICAgICAgICAgaGVpZ2h0OiB2aXNMZW4gKiBub3JtYWxpemUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF19XG4gICAgICAgIC8+XG4gICAgICA8L1ZpZXc+XG4gICAgKTtcbiAgfVxuXG4gIF9zZWxlY3RMZW5ndGgoXG4gICAgbWV0cmljczogJFJlYWRPbmx5PHtcbiAgICAgIGhlaWdodDogbnVtYmVyLFxuICAgICAgd2lkdGg6IG51bWJlcixcbiAgICAgIC4uLlxuICAgIH0+LFxuICApOiBudW1iZXIge1xuICAgIHJldHVybiAhaG9yaXpvbnRhbE9yRGVmYXVsdCh0aGlzLnByb3BzLmhvcml6b250YWwpXG4gICAgICA/IG1ldHJpY3MuaGVpZ2h0XG4gICAgICA6IG1ldHJpY3Mud2lkdGg7XG4gIH1cblxuICBfc2VsZWN0T2Zmc2V0KHt4LCB5fTogJFJlYWRPbmx5PHt4OiBudW1iZXIsIHk6IG51bWJlciwgLi4ufT4pOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9vcmllbnRhdGlvbigpLmhvcml6b250YWwgPyB4IDogeTtcbiAgfVxuXG4gIF9vcmllbnRhdGlvbigpOiBMaXN0T3JpZW50YXRpb24ge1xuICAgIHJldHVybiB7XG4gICAgICBob3Jpem9udGFsOiBob3Jpem9udGFsT3JEZWZhdWx0KHRoaXMucHJvcHMuaG9yaXpvbnRhbCksXG4gICAgICBydGw6IEkxOG5NYW5hZ2VyLmlzUlRMLFxuICAgIH07XG4gIH1cblxuICBfbWF5YmVDYWxsT25FZGdlUmVhY2hlZCgpIHtcbiAgICBjb25zdCB7XG4gICAgICBkYXRhLFxuICAgICAgZ2V0SXRlbUNvdW50LFxuICAgICAgb25TdGFydFJlYWNoZWQsXG4gICAgICBvblN0YXJ0UmVhY2hlZFRocmVzaG9sZCxcbiAgICAgIG9uRW5kUmVhY2hlZCxcbiAgICAgIG9uRW5kUmVhY2hlZFRocmVzaG9sZCxcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICAvLyBJZiB3ZSBoYXZlIGFueSBwZW5kaW5nIHNjcm9sbCB1cGRhdGVzIGl0IG1lYW5zIHRoYXQgdGhlIHNjcm9sbCBtZXRyaWNzXG4gICAgLy8gYXJlIG91dCBvZiBkYXRlIGFuZCB3ZSBzaG91bGQgbm90IGNhbGwgYW55IG9mIHRoZSBlZGdlIHJlYWNoZWQgY2FsbGJhY2tzLlxuICAgIGlmICh0aGlzLnN0YXRlLnBlbmRpbmdTY3JvbGxVcGRhdGVDb3VudCA+IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB7dmlzaWJsZUxlbmd0aCwgb2Zmc2V0fSA9IHRoaXMuX3Njcm9sbE1ldHJpY3M7XG4gICAgbGV0IGRpc3RhbmNlRnJvbVN0YXJ0ID0gb2Zmc2V0O1xuICAgIGxldCBkaXN0YW5jZUZyb21FbmQgPVxuICAgICAgdGhpcy5fbGlzdE1ldHJpY3MuZ2V0Q29udGVudExlbmd0aCgpIC0gdmlzaWJsZUxlbmd0aCAtIG9mZnNldDtcblxuICAgIC8vIEVzcGVjaWFsbHkgd2hlbiBvRVJUIGlzIHplcm8gaXQncyBuZWNlc3NhcnkgdG8gJ2Zsb29yJyB2ZXJ5IHNtYWxsIGRpc3RhbmNlIHZhbHVlcyB0byBiZSAwXG4gICAgLy8gc2luY2UgZGVib3VuY2luZyBjYXVzZXMgdXMgdG8gbm90IGZpcmUgdGhpcyBldmVudCBmb3IgZXZlcnkgc2luZ2xlIFwicGl4ZWxcIiB3ZSBzY3JvbGwgYW5kIGNhbiB0aHVzXG4gICAgLy8gYmUgYXQgdGhlIGVkZ2Ugb2YgdGhlIGxpc3Qgd2l0aCBhIGRpc3RhbmNlIGFwcHJveGltYXRpbmcgMCBidXQgbm90IHF1aXRlIHRoZXJlLlxuICAgIGlmIChkaXN0YW5jZUZyb21TdGFydCA8IE9OX0VER0VfUkVBQ0hFRF9FUFNJTE9OKSB7XG4gICAgICBkaXN0YW5jZUZyb21TdGFydCA9IDA7XG4gICAgfVxuICAgIGlmIChkaXN0YW5jZUZyb21FbmQgPCBPTl9FREdFX1JFQUNIRURfRVBTSUxPTikge1xuICAgICAgZGlzdGFuY2VGcm9tRW5kID0gMDtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBUMTIxMTcyMTcyIExvb2sgaW50byB3aHkgd2UncmUgXCJkZWZhdWx0aW5nXCIgdG8gYSB0aHJlc2hvbGQgb2YgMnB4XG4gICAgLy8gd2hlbiBvRVJUIGlzIG5vdCBwcmVzZW50IChkaWZmZXJlbnQgZnJvbSAyIHZpZXdwb3J0cyB1c2VkIGVsc2V3aGVyZSlcbiAgICBjb25zdCBERUZBVUxUX1RIUkVTSE9MRF9QWCA9IDI7XG5cbiAgICBjb25zdCBzdGFydFRocmVzaG9sZCA9XG4gICAgICBvblN0YXJ0UmVhY2hlZFRocmVzaG9sZCAhPSBudWxsXG4gICAgICAgID8gb25TdGFydFJlYWNoZWRUaHJlc2hvbGQgKiB2aXNpYmxlTGVuZ3RoXG4gICAgICAgIDogREVGQVVMVF9USFJFU0hPTERfUFg7XG4gICAgY29uc3QgZW5kVGhyZXNob2xkID1cbiAgICAgIG9uRW5kUmVhY2hlZFRocmVzaG9sZCAhPSBudWxsXG4gICAgICAgID8gb25FbmRSZWFjaGVkVGhyZXNob2xkICogdmlzaWJsZUxlbmd0aFxuICAgICAgICA6IERFRkFVTFRfVEhSRVNIT0xEX1BYO1xuICAgIGNvbnN0IGlzV2l0aGluU3RhcnRUaHJlc2hvbGQgPSBkaXN0YW5jZUZyb21TdGFydCA8PSBzdGFydFRocmVzaG9sZDtcbiAgICBjb25zdCBpc1dpdGhpbkVuZFRocmVzaG9sZCA9IGRpc3RhbmNlRnJvbUVuZCA8PSBlbmRUaHJlc2hvbGQ7XG5cbiAgICAvLyBGaXJzdCBjaGVjayBpZiB0aGUgdXNlciBqdXN0IHNjcm9sbGVkIHdpdGhpbiB0aGUgZW5kIHRocmVzaG9sZFxuICAgIC8vIGFuZCBjYWxsIG9uRW5kUmVhY2hlZCBvbmx5IG9uY2UgZm9yIGEgZ2l2ZW4gY29udGVudCBsZW5ndGgsXG4gICAgLy8gYW5kIG9ubHkgaWYgb25TdGFydFJlYWNoZWQgaXMgbm90IGJlaW5nIGV4ZWN1dGVkXG4gICAgaWYgKFxuICAgICAgb25FbmRSZWFjaGVkICYmXG4gICAgICB0aGlzLnN0YXRlLmNlbGxzQXJvdW5kVmlld3BvcnQubGFzdCA9PT0gZ2V0SXRlbUNvdW50KGRhdGEpIC0gMSAmJlxuICAgICAgaXNXaXRoaW5FbmRUaHJlc2hvbGQgJiZcbiAgICAgIHRoaXMuX2xpc3RNZXRyaWNzLmdldENvbnRlbnRMZW5ndGgoKSAhPT0gdGhpcy5fc2VudEVuZEZvckNvbnRlbnRMZW5ndGhcbiAgICApIHtcbiAgICAgIHRoaXMuX3NlbnRFbmRGb3JDb250ZW50TGVuZ3RoID0gdGhpcy5fbGlzdE1ldHJpY3MuZ2V0Q29udGVudExlbmd0aCgpO1xuICAgICAgb25FbmRSZWFjaGVkKHtkaXN0YW5jZUZyb21FbmR9KTtcbiAgICB9XG5cbiAgICAvLyBOZXh0IGNoZWNrIGlmIHRoZSB1c2VyIGp1c3Qgc2Nyb2xsZWQgd2l0aGluIHRoZSBzdGFydCB0aHJlc2hvbGRcbiAgICAvLyBhbmQgY2FsbCBvblN0YXJ0UmVhY2hlZCBvbmx5IG9uY2UgZm9yIGEgZ2l2ZW4gY29udGVudCBsZW5ndGgsXG4gICAgLy8gYW5kIG9ubHkgaWYgb25FbmRSZWFjaGVkIGlzIG5vdCBiZWluZyBleGVjdXRlZFxuICAgIGVsc2UgaWYgKFxuICAgICAgb25TdGFydFJlYWNoZWQgIT0gbnVsbCAmJlxuICAgICAgdGhpcy5zdGF0ZS5jZWxsc0Fyb3VuZFZpZXdwb3J0LmZpcnN0ID09PSAwICYmXG4gICAgICBpc1dpdGhpblN0YXJ0VGhyZXNob2xkICYmXG4gICAgICB0aGlzLl9saXN0TWV0cmljcy5nZXRDb250ZW50TGVuZ3RoKCkgIT09IHRoaXMuX3NlbnRTdGFydEZvckNvbnRlbnRMZW5ndGhcbiAgICApIHtcbiAgICAgIHRoaXMuX3NlbnRTdGFydEZvckNvbnRlbnRMZW5ndGggPSB0aGlzLl9saXN0TWV0cmljcy5nZXRDb250ZW50TGVuZ3RoKCk7XG4gICAgICBvblN0YXJ0UmVhY2hlZCh7ZGlzdGFuY2VGcm9tU3RhcnR9KTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgdXNlciBzY3JvbGxzIGF3YXkgZnJvbSB0aGUgc3RhcnQgb3IgZW5kIGFuZCBiYWNrIGFnYWluLFxuICAgIC8vIGNhdXNlIG9uU3RhcnRSZWFjaGVkIG9yIG9uRW5kUmVhY2hlZCB0byBiZSB0cmlnZ2VyZWQgYWdhaW5cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuX3NlbnRTdGFydEZvckNvbnRlbnRMZW5ndGggPSBpc1dpdGhpblN0YXJ0VGhyZXNob2xkXG4gICAgICAgID8gdGhpcy5fc2VudFN0YXJ0Rm9yQ29udGVudExlbmd0aFxuICAgICAgICA6IDA7XG4gICAgICB0aGlzLl9zZW50RW5kRm9yQ29udGVudExlbmd0aCA9IGlzV2l0aGluRW5kVGhyZXNob2xkXG4gICAgICAgID8gdGhpcy5fc2VudEVuZEZvckNvbnRlbnRMZW5ndGhcbiAgICAgICAgOiAwO1xuICAgIH1cbiAgfVxuXG4gIF9vbkNvbnRlbnRTaXplQ2hhbmdlID0gKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSA9PiB7XG4gICAgdGhpcy5fbGlzdE1ldHJpY3Mubm90aWZ5TGlzdENvbnRlbnRMYXlvdXQoe1xuICAgICAgbGF5b3V0OiB7d2lkdGgsIGhlaWdodH0sXG4gICAgICBvcmllbnRhdGlvbjogdGhpcy5fb3JpZW50YXRpb24oKSxcbiAgICB9KTtcblxuICAgIHRoaXMuX21heWJlU2Nyb2xsVG9Jbml0aWFsU2Nyb2xsSW5kZXgod2lkdGgsIGhlaWdodCk7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5vbkNvbnRlbnRTaXplQ2hhbmdlKSB7XG4gICAgICB0aGlzLnByb3BzLm9uQ29udGVudFNpemVDaGFuZ2Uod2lkdGgsIGhlaWdodCk7XG4gICAgfVxuICAgIHRoaXMuX3NjaGVkdWxlQ2VsbHNUb1JlbmRlclVwZGF0ZSgpO1xuICAgIHRoaXMuX21heWJlQ2FsbE9uRWRnZVJlYWNoZWQoKTtcbiAgfTtcblxuICAvKipcbiAgICogU2Nyb2xsIHRvIGEgc3BlY2lmaWVkIGBpbml0aWFsU2Nyb2xsSW5kZXhgIHByb3AgYWZ0ZXIgdGhlIFNjcm9sbFZpZXdcbiAgICogY29udGVudCBoYXMgYmVlbiBsYWlkIG91dCwgaWYgaXQgaXMgc3RpbGwgdmFsaWQuIE9ubHkgYSBzaW5nbGUgc2Nyb2xsIGlzXG4gICAqIHRyaWdnZXJlZCB0aHJvdWdob3V0IHRoZSBsaWZldGltZSBvZiB0aGUgbGlzdC5cbiAgICovXG4gIF9tYXliZVNjcm9sbFRvSW5pdGlhbFNjcm9sbEluZGV4KFxuICAgIGNvbnRlbnRXaWR0aDogbnVtYmVyLFxuICAgIGNvbnRlbnRIZWlnaHQ6IG51bWJlcixcbiAgKSB7XG4gICAgaWYgKFxuICAgICAgY29udGVudFdpZHRoID4gMCAmJlxuICAgICAgY29udGVudEhlaWdodCA+IDAgJiZcbiAgICAgIHRoaXMucHJvcHMuaW5pdGlhbFNjcm9sbEluZGV4ICE9IG51bGwgJiZcbiAgICAgIHRoaXMucHJvcHMuaW5pdGlhbFNjcm9sbEluZGV4ID4gMCAmJlxuICAgICAgIXRoaXMuX2hhc1RyaWdnZXJlZEluaXRpYWxTY3JvbGxUb0luZGV4XG4gICAgKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5jb250ZW50T2Zmc2V0ID09IG51bGwpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXMucHJvcHMuaW5pdGlhbFNjcm9sbEluZGV4IDxcbiAgICAgICAgICB0aGlzLnByb3BzLmdldEl0ZW1Db3VudCh0aGlzLnByb3BzLmRhdGEpXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMuc2Nyb2xsVG9JbmRleCh7XG4gICAgICAgICAgICBhbmltYXRlZDogZmFsc2UsXG4gICAgICAgICAgICBpbmRleDogbnVsbHRocm93cyh0aGlzLnByb3BzLmluaXRpYWxTY3JvbGxJbmRleCksXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zY3JvbGxUb0VuZCh7YW5pbWF0ZWQ6IGZhbHNlfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuX2hhc1RyaWdnZXJlZEluaXRpYWxTY3JvbGxUb0luZGV4ID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvKiBUcmFuc2xhdGVzIG1ldHJpY3MgZnJvbSBhIHNjcm9sbCBldmVudCBpbiBhIHBhcmVudCBWaXJ0dWFsaXplZExpc3QgaW50b1xuICAgKiBjb29yZGluYXRlcyByZWxhdGl2ZSB0byB0aGUgY2hpbGQgbGlzdC5cbiAgICovXG4gIF9jb252ZXJ0UGFyZW50U2Nyb2xsTWV0cmljcyA9IChtZXRyaWNzOiB7XG4gICAgdmlzaWJsZUxlbmd0aDogbnVtYmVyLFxuICAgIG9mZnNldDogbnVtYmVyLFxuICAgIC4uLlxuICB9KTogJEZsb3dGaXhNZSA9PiB7XG4gICAgLy8gT2Zmc2V0IG9mIHRoZSB0b3Agb2YgdGhlIG5lc3RlZCBsaXN0IHJlbGF0aXZlIHRvIHRoZSB0b3Agb2YgaXRzIHBhcmVudCdzIHZpZXdwb3J0XG4gICAgY29uc3Qgb2Zmc2V0ID0gbWV0cmljcy5vZmZzZXQgLSB0aGlzLl9vZmZzZXRGcm9tUGFyZW50VmlydHVhbGl6ZWRMaXN0O1xuICAgIC8vIENoaWxkJ3MgdmlzaWJsZSBsZW5ndGggaXMgdGhlIHNhbWUgYXMgaXRzIHBhcmVudCdzXG4gICAgY29uc3QgdmlzaWJsZUxlbmd0aCA9IG1ldHJpY3MudmlzaWJsZUxlbmd0aDtcbiAgICBjb25zdCBkT2Zmc2V0ID0gb2Zmc2V0IC0gdGhpcy5fc2Nyb2xsTWV0cmljcy5vZmZzZXQ7XG4gICAgY29uc3QgY29udGVudExlbmd0aCA9IHRoaXMuX2xpc3RNZXRyaWNzLmdldENvbnRlbnRMZW5ndGgoKTtcblxuICAgIHJldHVybiB7XG4gICAgICB2aXNpYmxlTGVuZ3RoLFxuICAgICAgY29udGVudExlbmd0aCxcbiAgICAgIG9mZnNldCxcbiAgICAgIGRPZmZzZXQsXG4gICAgfTtcbiAgfTtcblxuICBfb25TY3JvbGwgPSAoZTogT2JqZWN0KSA9PiB7XG4gICAgdGhpcy5fbmVzdGVkQ2hpbGRMaXN0cy5mb3JFYWNoKGNoaWxkTGlzdCA9PiB7XG4gICAgICBjaGlsZExpc3QuX29uU2Nyb2xsKGUpO1xuICAgIH0pO1xuICAgIGlmICh0aGlzLnByb3BzLm9uU2Nyb2xsKSB7XG4gICAgICB0aGlzLnByb3BzLm9uU2Nyb2xsKGUpO1xuICAgIH1cbiAgICBjb25zdCB0aW1lc3RhbXAgPSBlLnRpbWVTdGFtcDtcbiAgICBsZXQgdmlzaWJsZUxlbmd0aCA9IHRoaXMuX3NlbGVjdExlbmd0aChlLm5hdGl2ZUV2ZW50LmxheW91dE1lYXN1cmVtZW50KTtcbiAgICBsZXQgY29udGVudExlbmd0aCA9IHRoaXMuX3NlbGVjdExlbmd0aChlLm5hdGl2ZUV2ZW50LmNvbnRlbnRTaXplKTtcbiAgICBsZXQgb2Zmc2V0ID0gdGhpcy5fb2Zmc2V0RnJvbVNjcm9sbEV2ZW50KGUpO1xuICAgIGxldCBkT2Zmc2V0ID0gb2Zmc2V0IC0gdGhpcy5fc2Nyb2xsTWV0cmljcy5vZmZzZXQ7XG5cbiAgICBpZiAodGhpcy5faXNOZXN0ZWRXaXRoU2FtZU9yaWVudGF0aW9uKCkpIHtcbiAgICAgIGlmICh0aGlzLl9saXN0TWV0cmljcy5nZXRDb250ZW50TGVuZ3RoKCkgPT09IDApIHtcbiAgICAgICAgLy8gSWdub3JlIHNjcm9sbCBldmVudHMgdW50aWwgb25MYXlvdXQgaGFzIGJlZW4gY2FsbGVkIGFuZCB3ZVxuICAgICAgICAvLyBrbm93IG91ciBvZmZzZXQgZnJvbSBvdXIgb2Zmc2V0IGZyb20gb3VyIHBhcmVudFxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAoe3Zpc2libGVMZW5ndGgsIGNvbnRlbnRMZW5ndGgsIG9mZnNldCwgZE9mZnNldH0gPVxuICAgICAgICB0aGlzLl9jb252ZXJ0UGFyZW50U2Nyb2xsTWV0cmljcyh7XG4gICAgICAgICAgdmlzaWJsZUxlbmd0aCxcbiAgICAgICAgICBvZmZzZXQsXG4gICAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBjb25zdCBkdCA9IHRoaXMuX3Njcm9sbE1ldHJpY3MudGltZXN0YW1wXG4gICAgICA/IE1hdGgubWF4KDEsIHRpbWVzdGFtcCAtIHRoaXMuX3Njcm9sbE1ldHJpY3MudGltZXN0YW1wKVxuICAgICAgOiAxO1xuICAgIGNvbnN0IHZlbG9jaXR5ID0gZE9mZnNldCAvIGR0O1xuXG4gICAgaWYgKFxuICAgICAgZHQgPiA1MDAgJiZcbiAgICAgIHRoaXMuX3Njcm9sbE1ldHJpY3MuZHQgPiA1MDAgJiZcbiAgICAgIGNvbnRlbnRMZW5ndGggPiA1ICogdmlzaWJsZUxlbmd0aCAmJlxuICAgICAgIXRoaXMuX2hhc1dhcm5lZC5wZXJmXG4gICAgKSB7XG4gICAgICBpbmZvTG9nKFxuICAgICAgICAnVmlydHVhbGl6ZWRMaXN0OiBZb3UgaGF2ZSBhIGxhcmdlIGxpc3QgdGhhdCBpcyBzbG93IHRvIHVwZGF0ZSAtIG1ha2Ugc3VyZSB5b3VyICcgK1xuICAgICAgICAgICdyZW5kZXJJdGVtIGZ1bmN0aW9uIHJlbmRlcnMgY29tcG9uZW50cyB0aGF0IGZvbGxvdyBSZWFjdCBwZXJmb3JtYW5jZSBiZXN0IHByYWN0aWNlcyAnICtcbiAgICAgICAgICAnbGlrZSBQdXJlQ29tcG9uZW50LCBzaG91bGRDb21wb25lbnRVcGRhdGUsIGV0Yy4nLFxuICAgICAgICB7ZHQsIHByZXZEdDogdGhpcy5fc2Nyb2xsTWV0cmljcy5kdCwgY29udGVudExlbmd0aH0sXG4gICAgICApO1xuICAgICAgdGhpcy5faGFzV2FybmVkLnBlcmYgPSB0cnVlO1xuICAgIH1cblxuICAgIC8vIEZvciBpbnZhbGlkIG5lZ2F0aXZlIHZhbHVlcyAody8gUlRMKSwgc2V0IHRoaXMgdG8gMS5cbiAgICBjb25zdCB6b29tU2NhbGUgPSBlLm5hdGl2ZUV2ZW50Lnpvb21TY2FsZSA8IDAgPyAxIDogZS5uYXRpdmVFdmVudC56b29tU2NhbGU7XG4gICAgdGhpcy5fc2Nyb2xsTWV0cmljcyA9IHtcbiAgICAgIGR0LFxuICAgICAgZE9mZnNldCxcbiAgICAgIG9mZnNldCxcbiAgICAgIHRpbWVzdGFtcCxcbiAgICAgIHZlbG9jaXR5LFxuICAgICAgdmlzaWJsZUxlbmd0aCxcbiAgICAgIHpvb21TY2FsZSxcbiAgICB9O1xuICAgIGlmICh0aGlzLnN0YXRlLnBlbmRpbmdTY3JvbGxVcGRhdGVDb3VudCA+IDApIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUgPT4gKHtcbiAgICAgICAgcGVuZGluZ1Njcm9sbFVwZGF0ZUNvdW50OiBzdGF0ZS5wZW5kaW5nU2Nyb2xsVXBkYXRlQ291bnQgLSAxLFxuICAgICAgfSkpO1xuICAgIH1cbiAgICB0aGlzLl91cGRhdGVWaWV3YWJsZUl0ZW1zKHRoaXMucHJvcHMsIHRoaXMuc3RhdGUuY2VsbHNBcm91bmRWaWV3cG9ydCk7XG4gICAgaWYgKCF0aGlzLnByb3BzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX21heWJlQ2FsbE9uRWRnZVJlYWNoZWQoKTtcbiAgICBpZiAodmVsb2NpdHkgIT09IDApIHtcbiAgICAgIHRoaXMuX2ZpbGxSYXRlSGVscGVyLmFjdGl2YXRlKCk7XG4gICAgfVxuICAgIHRoaXMuX2NvbXB1dGVCbGFua25lc3MoKTtcbiAgICB0aGlzLl9zY2hlZHVsZUNlbGxzVG9SZW5kZXJVcGRhdGUoKTtcbiAgfTtcblxuICBfb2Zmc2V0RnJvbVNjcm9sbEV2ZW50KGU6IFNjcm9sbEV2ZW50KTogbnVtYmVyIHtcbiAgICBjb25zdCB7Y29udGVudE9mZnNldCwgY29udGVudFNpemUsIGxheW91dE1lYXN1cmVtZW50fSA9IGUubmF0aXZlRXZlbnQ7XG4gICAgY29uc3Qge2hvcml6b250YWwsIHJ0bH0gPSB0aGlzLl9vcmllbnRhdGlvbigpO1xuICAgIGlmIChob3Jpem9udGFsICYmIHJ0bCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5fc2VsZWN0TGVuZ3RoKGNvbnRlbnRTaXplKSAtXG4gICAgICAgICh0aGlzLl9zZWxlY3RPZmZzZXQoY29udGVudE9mZnNldCkgK1xuICAgICAgICAgIHRoaXMuX3NlbGVjdExlbmd0aChsYXlvdXRNZWFzdXJlbWVudCkpXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2VsZWN0T2Zmc2V0KGNvbnRlbnRPZmZzZXQpO1xuICAgIH1cbiAgfVxuXG4gIF9zY2hlZHVsZUNlbGxzVG9SZW5kZXJVcGRhdGUoKSB7XG4gICAgLy8gT25seSB0cmlnZ2VyIGhpZ2gtcHJpb3JpdHkgdXBkYXRlcyBpZiB3ZSd2ZSBhY3R1YWxseSByZW5kZXJlZCBjZWxscyxcbiAgICAvLyBhbmQgd2l0aCB0aGF0IHNpemUgZXN0aW1hdGUsIGFjY3VyYXRlbHkgY29tcHV0ZSBob3cgbWFueSBjZWxscyB3ZSBzaG91bGQgcmVuZGVyLlxuICAgIC8vIE90aGVyd2lzZSwgaXQgd291bGQganVzdCByZW5kZXIgYXMgbWFueSBjZWxscyBhcyBpdCBjYW4gKG9mIHplcm8gZGltZW5zaW9uKSxcbiAgICAvLyBlYWNoIHRpbWUgdGhyb3VnaCBhdHRlbXB0aW5nIHRvIHJlbmRlciBtb3JlIChsaW1pdGVkIGJ5IG1heFRvUmVuZGVyUGVyQmF0Y2gpLFxuICAgIC8vIHN0YXJ2aW5nIHRoZSByZW5kZXJlciBmcm9tIGFjdHVhbGx5IGxheWluZyBvdXQgdGhlIG9iamVjdHMgYW5kIGNvbXB1dGluZyBfYXZlcmFnZUNlbGxMZW5ndGguXG4gICAgLy8gSWYgdGhpcyBpcyB0cmlnZ2VyZWQgaW4gYW4gYGNvbXBvbmVudERpZFVwZGF0ZWAgZm9sbG93ZWQgYnkgYSBoaVByaSBjZWxsVG9SZW5kZXJVcGRhdGVcbiAgICAvLyBXZSBzaG91bGRuJ3QgZG8gYW5vdGhlciBoaXByaSBjZWxsVG9SZW5kZXJVcGRhdGVcbiAgICBpZiAoXG4gICAgICAodGhpcy5fbGlzdE1ldHJpY3MuZ2V0QXZlcmFnZUNlbGxMZW5ndGgoKSA+IDAgfHxcbiAgICAgICAgdGhpcy5wcm9wcy5nZXRJdGVtTGF5b3V0ICE9IG51bGwpICYmXG4gICAgICB0aGlzLl9zaG91bGRSZW5kZXJXaXRoUHJpb3JpdHkoKSAmJlxuICAgICAgIXRoaXMuX2hpUHJpSW5Qcm9ncmVzc1xuICAgICkge1xuICAgICAgdGhpcy5faGlQcmlJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgIC8vIERvbid0IHdvcnJ5IGFib3V0IGludGVyYWN0aW9ucyB3aGVuIHNjcm9sbGluZyBxdWlja2x5OyBmb2N1cyBvbiBmaWxsaW5nIGNvbnRlbnQgYXMgZmFzdFxuICAgICAgLy8gYXMgcG9zc2libGUuXG4gICAgICB0aGlzLl91cGRhdGVDZWxsc1RvUmVuZGVyQmF0Y2hlci5kaXNwb3NlKHthYm9ydDogdHJ1ZX0pO1xuICAgICAgdGhpcy5fdXBkYXRlQ2VsbHNUb1JlbmRlcigpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl91cGRhdGVDZWxsc1RvUmVuZGVyQmF0Y2hlci5zY2hlZHVsZSgpO1xuICAgIH1cbiAgfVxuXG4gIF9zaG91bGRSZW5kZXJXaXRoUHJpb3JpdHkoKTogYm9vbGVhbiB7XG4gICAgY29uc3Qge2ZpcnN0LCBsYXN0fSA9IHRoaXMuc3RhdGUuY2VsbHNBcm91bmRWaWV3cG9ydDtcbiAgICBjb25zdCB7b2Zmc2V0LCB2aXNpYmxlTGVuZ3RoLCB2ZWxvY2l0eX0gPSB0aGlzLl9zY3JvbGxNZXRyaWNzO1xuICAgIGNvbnN0IGl0ZW1Db3VudCA9IHRoaXMucHJvcHMuZ2V0SXRlbUNvdW50KHRoaXMucHJvcHMuZGF0YSk7XG4gICAgbGV0IGhpUHJpID0gZmFsc2U7XG4gICAgY29uc3Qgb25TdGFydFJlYWNoZWRUaHJlc2hvbGQgPSBvblN0YXJ0UmVhY2hlZFRocmVzaG9sZE9yRGVmYXVsdChcbiAgICAgIHRoaXMucHJvcHMub25TdGFydFJlYWNoZWRUaHJlc2hvbGQsXG4gICAgKTtcbiAgICBjb25zdCBvbkVuZFJlYWNoZWRUaHJlc2hvbGQgPSBvbkVuZFJlYWNoZWRUaHJlc2hvbGRPckRlZmF1bHQoXG4gICAgICB0aGlzLnByb3BzLm9uRW5kUmVhY2hlZFRocmVzaG9sZCxcbiAgICApO1xuICAgIC8vIE1hcmsgYXMgaGlnaCBwcmlvcml0eSBpZiB3ZSdyZSBjbG9zZSB0byB0aGUgc3RhcnQgb2YgdGhlIGZpcnN0IGl0ZW1cbiAgICAvLyBCdXQgb25seSBpZiB0aGVyZSBhcmUgaXRlbXMgYmVmb3JlIHRoZSBmaXJzdCByZW5kZXJlZCBpdGVtXG4gICAgaWYgKGZpcnN0ID4gMCkge1xuICAgICAgY29uc3QgZGlzdFRvcCA9XG4gICAgICAgIG9mZnNldCAtXG4gICAgICAgIHRoaXMuX2xpc3RNZXRyaWNzLmdldENlbGxNZXRyaWNzQXBwcm94KGZpcnN0LCB0aGlzLnByb3BzKS5vZmZzZXQ7XG4gICAgICBoaVByaSA9XG4gICAgICAgIGRpc3RUb3AgPCAwIHx8XG4gICAgICAgICh2ZWxvY2l0eSA8IC0yICYmXG4gICAgICAgICAgZGlzdFRvcCA8XG4gICAgICAgICAgICBnZXRTY3JvbGxpbmdUaHJlc2hvbGQob25TdGFydFJlYWNoZWRUaHJlc2hvbGQsIHZpc2libGVMZW5ndGgpKTtcbiAgICB9XG4gICAgLy8gTWFyayBhcyBoaWdoIHByaW9yaXR5IGlmIHdlJ3JlIGNsb3NlIHRvIHRoZSBlbmQgb2YgdGhlIGxhc3QgaXRlbVxuICAgIC8vIEJ1dCBvbmx5IGlmIHRoZXJlIGFyZSBpdGVtcyBhZnRlciB0aGUgbGFzdCByZW5kZXJlZCBpdGVtXG4gICAgaWYgKCFoaVByaSAmJiBsYXN0ID49IDAgJiYgbGFzdCA8IGl0ZW1Db3VudCAtIDEpIHtcbiAgICAgIGNvbnN0IGRpc3RCb3R0b20gPVxuICAgICAgICB0aGlzLl9saXN0TWV0cmljcy5nZXRDZWxsTWV0cmljc0FwcHJveChsYXN0LCB0aGlzLnByb3BzKS5vZmZzZXQgLVxuICAgICAgICAob2Zmc2V0ICsgdmlzaWJsZUxlbmd0aCk7XG4gICAgICBoaVByaSA9XG4gICAgICAgIGRpc3RCb3R0b20gPCAwIHx8XG4gICAgICAgICh2ZWxvY2l0eSA+IDIgJiZcbiAgICAgICAgICBkaXN0Qm90dG9tIDxcbiAgICAgICAgICAgIGdldFNjcm9sbGluZ1RocmVzaG9sZChvbkVuZFJlYWNoZWRUaHJlc2hvbGQsIHZpc2libGVMZW5ndGgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGlQcmk7XG4gIH1cblxuICBfb25TY3JvbGxCZWdpbkRyYWcgPSAoZTogU2Nyb2xsRXZlbnQpOiB2b2lkID0+IHtcbiAgICB0aGlzLl9uZXN0ZWRDaGlsZExpc3RzLmZvckVhY2goY2hpbGRMaXN0ID0+IHtcbiAgICAgIGNoaWxkTGlzdC5fb25TY3JvbGxCZWdpbkRyYWcoZSk7XG4gICAgfSk7XG4gICAgdGhpcy5fdmlld2FiaWxpdHlUdXBsZXMuZm9yRWFjaCh0dXBsZSA9PiB7XG4gICAgICB0dXBsZS52aWV3YWJpbGl0eUhlbHBlci5yZWNvcmRJbnRlcmFjdGlvbigpO1xuICAgIH0pO1xuICAgIHRoaXMuX2hhc0ludGVyYWN0ZWQgPSB0cnVlO1xuICAgIHRoaXMucHJvcHMub25TY3JvbGxCZWdpbkRyYWcgJiYgdGhpcy5wcm9wcy5vblNjcm9sbEJlZ2luRHJhZyhlKTtcbiAgfTtcblxuICBfb25TY3JvbGxFbmREcmFnID0gKGU6IFNjcm9sbEV2ZW50KTogdm9pZCA9PiB7XG4gICAgdGhpcy5fbmVzdGVkQ2hpbGRMaXN0cy5mb3JFYWNoKGNoaWxkTGlzdCA9PiB7XG4gICAgICBjaGlsZExpc3QuX29uU2Nyb2xsRW5kRHJhZyhlKTtcbiAgICB9KTtcbiAgICBjb25zdCB7dmVsb2NpdHl9ID0gZS5uYXRpdmVFdmVudDtcbiAgICBpZiAodmVsb2NpdHkpIHtcbiAgICAgIHRoaXMuX3Njcm9sbE1ldHJpY3MudmVsb2NpdHkgPSB0aGlzLl9zZWxlY3RPZmZzZXQodmVsb2NpdHkpO1xuICAgIH1cbiAgICB0aGlzLl9jb21wdXRlQmxhbmtuZXNzKCk7XG4gICAgdGhpcy5wcm9wcy5vblNjcm9sbEVuZERyYWcgJiYgdGhpcy5wcm9wcy5vblNjcm9sbEVuZERyYWcoZSk7XG4gIH07XG5cbiAgX29uTW9tZW50dW1TY3JvbGxCZWdpbiA9IChlOiBTY3JvbGxFdmVudCk6IHZvaWQgPT4ge1xuICAgIHRoaXMuX25lc3RlZENoaWxkTGlzdHMuZm9yRWFjaChjaGlsZExpc3QgPT4ge1xuICAgICAgY2hpbGRMaXN0Ll9vbk1vbWVudHVtU2Nyb2xsQmVnaW4oZSk7XG4gICAgfSk7XG4gICAgdGhpcy5wcm9wcy5vbk1vbWVudHVtU2Nyb2xsQmVnaW4gJiYgdGhpcy5wcm9wcy5vbk1vbWVudHVtU2Nyb2xsQmVnaW4oZSk7XG4gIH07XG5cbiAgX29uTW9tZW50dW1TY3JvbGxFbmQgPSAoZTogU2Nyb2xsRXZlbnQpOiB2b2lkID0+IHtcbiAgICB0aGlzLl9uZXN0ZWRDaGlsZExpc3RzLmZvckVhY2goY2hpbGRMaXN0ID0+IHtcbiAgICAgIGNoaWxkTGlzdC5fb25Nb21lbnR1bVNjcm9sbEVuZChlKTtcbiAgICB9KTtcbiAgICB0aGlzLl9zY3JvbGxNZXRyaWNzLnZlbG9jaXR5ID0gMDtcbiAgICB0aGlzLl9jb21wdXRlQmxhbmtuZXNzKCk7XG4gICAgdGhpcy5wcm9wcy5vbk1vbWVudHVtU2Nyb2xsRW5kICYmIHRoaXMucHJvcHMub25Nb21lbnR1bVNjcm9sbEVuZChlKTtcbiAgfTtcblxuICBfdXBkYXRlQ2VsbHNUb1JlbmRlciA9ICgpID0+IHtcbiAgICB0aGlzLl91cGRhdGVWaWV3YWJsZUl0ZW1zKHRoaXMucHJvcHMsIHRoaXMuc3RhdGUuY2VsbHNBcm91bmRWaWV3cG9ydCk7XG5cbiAgICB0aGlzLnNldFN0YXRlKChzdGF0ZSwgcHJvcHMpID0+IHtcbiAgICAgIGNvbnN0IGNlbGxzQXJvdW5kVmlld3BvcnQgPSB0aGlzLl9hZGp1c3RDZWxsc0Fyb3VuZFZpZXdwb3J0KFxuICAgICAgICBwcm9wcyxcbiAgICAgICAgc3RhdGUuY2VsbHNBcm91bmRWaWV3cG9ydCxcbiAgICAgICAgc3RhdGUucGVuZGluZ1Njcm9sbFVwZGF0ZUNvdW50LFxuICAgICAgKTtcbiAgICAgIGNvbnN0IHJlbmRlck1hc2sgPSBWaXJ0dWFsaXplZExpc3QuX2NyZWF0ZVJlbmRlck1hc2soXG4gICAgICAgIHByb3BzLFxuICAgICAgICBjZWxsc0Fyb3VuZFZpZXdwb3J0LFxuICAgICAgICB0aGlzLl9nZXROb25WaWV3cG9ydFJlbmRlclJlZ2lvbnMocHJvcHMpLFxuICAgICAgKTtcblxuICAgICAgaWYgKFxuICAgICAgICBjZWxsc0Fyb3VuZFZpZXdwb3J0LmZpcnN0ID09PSBzdGF0ZS5jZWxsc0Fyb3VuZFZpZXdwb3J0LmZpcnN0ICYmXG4gICAgICAgIGNlbGxzQXJvdW5kVmlld3BvcnQubGFzdCA9PT0gc3RhdGUuY2VsbHNBcm91bmRWaWV3cG9ydC5sYXN0ICYmXG4gICAgICAgIHJlbmRlck1hc2suZXF1YWxzKHN0YXRlLnJlbmRlck1hc2spXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7Y2VsbHNBcm91bmRWaWV3cG9ydCwgcmVuZGVyTWFza307XG4gICAgfSk7XG4gIH07XG5cbiAgX2NyZWF0ZVZpZXdUb2tlbiA9IChcbiAgICBpbmRleDogbnVtYmVyLFxuICAgIGlzVmlld2FibGU6IGJvb2xlYW4sXG4gICAgcHJvcHM6IENlbGxNZXRyaWNQcm9wcyxcbiAgICAvLyAkRmxvd0ZpeE1lW21pc3NpbmctbG9jYWwtYW5ub3RdXG4gICkgPT4ge1xuICAgIGNvbnN0IHtkYXRhLCBnZXRJdGVtfSA9IHByb3BzO1xuICAgIGNvbnN0IGl0ZW0gPSBnZXRJdGVtKGRhdGEsIGluZGV4KTtcbiAgICByZXR1cm4ge1xuICAgICAgaW5kZXgsXG4gICAgICBpdGVtLFxuICAgICAga2V5OiBWaXJ0dWFsaXplZExpc3QuX2tleUV4dHJhY3RvcihpdGVtLCBpbmRleCwgcHJvcHMpLFxuICAgICAgaXNWaWV3YWJsZSxcbiAgICB9O1xuICB9O1xuXG4gIF9fZ2V0TGlzdE1ldHJpY3MoKTogTGlzdE1ldHJpY3NBZ2dyZWdhdG9yIHtcbiAgICByZXR1cm4gdGhpcy5fbGlzdE1ldHJpY3M7XG4gIH1cblxuICBfZ2V0Tm9uVmlld3BvcnRSZW5kZXJSZWdpb25zID0gKFxuICAgIHByb3BzOiBDZWxsTWV0cmljUHJvcHMsXG4gICk6ICRSZWFkT25seUFycmF5PHtcbiAgICBmaXJzdDogbnVtYmVyLFxuICAgIGxhc3Q6IG51bWJlcixcbiAgfT4gPT4ge1xuICAgIC8vIEtlZXAgYSB2aWV3cG9ydCdzIHdvcnRoIG9mIGNvbnRlbnQgYXJvdW5kIHRoZSBsYXN0IGZvY3VzZWQgY2VsbCB0byBhbGxvd1xuICAgIC8vIHJhbmRvbSBuYXZpZ2F0aW9uIGFyb3VuZCBpdCB3aXRob3V0IGFueSBibGFua2luZy4gRS5nLiB0YWJiaW5nIGZyb20gb25lXG4gICAgLy8gZm9jdXNlZCBpdGVtIG91dCBvZiB2aWV3cG9ydCB0byBhbm90aGVyLlxuICAgIGlmIChcbiAgICAgICEodGhpcy5fbGFzdEZvY3VzZWRDZWxsS2V5ICYmIHRoaXMuX2NlbGxSZWZzW3RoaXMuX2xhc3RGb2N1c2VkQ2VsbEtleV0pXG4gICAgKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgY29uc3QgbGFzdEZvY3VzZWRDZWxsUmVuZGVyZXIgPSB0aGlzLl9jZWxsUmVmc1t0aGlzLl9sYXN0Rm9jdXNlZENlbGxLZXldO1xuICAgIGNvbnN0IGZvY3VzZWRDZWxsSW5kZXggPSBsYXN0Rm9jdXNlZENlbGxSZW5kZXJlci5wcm9wcy5pbmRleDtcbiAgICBjb25zdCBpdGVtQ291bnQgPSBwcm9wcy5nZXRJdGVtQ291bnQocHJvcHMuZGF0YSk7XG5cbiAgICAvLyBUaGUgbGFzdCBjZWxsIHdlIHJlbmRlcmVkIG1heSBiZSBhdCBhIG5ldyBpbmRleC4gQmFpbCBpZiB3ZSBkb24ndCBrbm93XG4gICAgLy8gd2hlcmUgaXQgaXMuXG4gICAgaWYgKFxuICAgICAgZm9jdXNlZENlbGxJbmRleCA+PSBpdGVtQ291bnQgfHxcbiAgICAgIFZpcnR1YWxpemVkTGlzdC5fZ2V0SXRlbUtleShwcm9wcywgZm9jdXNlZENlbGxJbmRleCkgIT09XG4gICAgICAgIHRoaXMuX2xhc3RGb2N1c2VkQ2VsbEtleVxuICAgICkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIGxldCBmaXJzdCA9IGZvY3VzZWRDZWxsSW5kZXg7XG4gICAgbGV0IGhlaWdodE9mQ2VsbHNCZWZvcmVGb2N1c2VkID0gMDtcbiAgICBmb3IgKFxuICAgICAgbGV0IGkgPSBmaXJzdCAtIDE7XG4gICAgICBpID49IDAgJiYgaGVpZ2h0T2ZDZWxsc0JlZm9yZUZvY3VzZWQgPCB0aGlzLl9zY3JvbGxNZXRyaWNzLnZpc2libGVMZW5ndGg7XG4gICAgICBpLS1cbiAgICApIHtcbiAgICAgIGZpcnN0LS07XG4gICAgICBoZWlnaHRPZkNlbGxzQmVmb3JlRm9jdXNlZCArPSB0aGlzLl9saXN0TWV0cmljcy5nZXRDZWxsTWV0cmljc0FwcHJveChcbiAgICAgICAgaSxcbiAgICAgICAgcHJvcHMsXG4gICAgICApLmxlbmd0aDtcbiAgICB9XG5cbiAgICBsZXQgbGFzdCA9IGZvY3VzZWRDZWxsSW5kZXg7XG4gICAgbGV0IGhlaWdodE9mQ2VsbHNBZnRlckZvY3VzZWQgPSAwO1xuICAgIGZvciAoXG4gICAgICBsZXQgaSA9IGxhc3QgKyAxO1xuICAgICAgaSA8IGl0ZW1Db3VudCAmJlxuICAgICAgaGVpZ2h0T2ZDZWxsc0FmdGVyRm9jdXNlZCA8IHRoaXMuX3Njcm9sbE1ldHJpY3MudmlzaWJsZUxlbmd0aDtcbiAgICAgIGkrK1xuICAgICkge1xuICAgICAgbGFzdCsrO1xuICAgICAgaGVpZ2h0T2ZDZWxsc0FmdGVyRm9jdXNlZCArPSB0aGlzLl9saXN0TWV0cmljcy5nZXRDZWxsTWV0cmljc0FwcHJveChcbiAgICAgICAgaSxcbiAgICAgICAgcHJvcHMsXG4gICAgICApLmxlbmd0aDtcbiAgICB9XG5cbiAgICByZXR1cm4gW3tmaXJzdCwgbGFzdH1dO1xuICB9O1xuXG4gIF91cGRhdGVWaWV3YWJsZUl0ZW1zKFxuICAgIHByb3BzOiBDZWxsTWV0cmljUHJvcHMsXG4gICAgY2VsbHNBcm91bmRWaWV3cG9ydDoge2ZpcnN0OiBudW1iZXIsIGxhc3Q6IG51bWJlcn0sXG4gICkge1xuICAgIC8vIElmIHdlIGhhdmUgYW55IHBlbmRpbmcgc2Nyb2xsIHVwZGF0ZXMgaXQgbWVhbnMgdGhhdCB0aGUgc2Nyb2xsIG1ldHJpY3NcbiAgICAvLyBhcmUgb3V0IG9mIGRhdGUgYW5kIHdlIHNob3VsZCBub3QgY2FsbCBhbnkgb2YgdGhlIHZpc2liaWxpdHkgY2FsbGJhY2tzLlxuICAgIGlmICh0aGlzLnN0YXRlLnBlbmRpbmdTY3JvbGxVcGRhdGVDb3VudCA+IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fdmlld2FiaWxpdHlUdXBsZXMuZm9yRWFjaCh0dXBsZSA9PiB7XG4gICAgICB0dXBsZS52aWV3YWJpbGl0eUhlbHBlci5vblVwZGF0ZShcbiAgICAgICAgcHJvcHMsXG4gICAgICAgIHRoaXMuX3Njcm9sbE1ldHJpY3Mub2Zmc2V0LFxuICAgICAgICB0aGlzLl9zY3JvbGxNZXRyaWNzLnZpc2libGVMZW5ndGgsXG4gICAgICAgIHRoaXMuX2xpc3RNZXRyaWNzLFxuICAgICAgICB0aGlzLl9jcmVhdGVWaWV3VG9rZW4sXG4gICAgICAgIHR1cGxlLm9uVmlld2FibGVJdGVtc0NoYW5nZWQsXG4gICAgICAgIGNlbGxzQXJvdW5kVmlld3BvcnQsXG4gICAgICApO1xuICAgIH0pO1xuICB9XG59XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgdmVydGljYWxseUludmVydGVkOlxuICAgIFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCdcbiAgICAgID8ge3RyYW5zZm9ybTogW3tzY2FsZTogLTF9XX1cbiAgICAgIDoge3RyYW5zZm9ybTogW3tzY2FsZVk6IC0xfV19LFxuICBob3Jpem9udGFsbHlJbnZlcnRlZDoge1xuICAgIHRyYW5zZm9ybTogW3tzY2FsZVg6IC0xfV0sXG4gIH0sXG4gIGRlYnVnOiB7XG4gICAgZmxleDogMSxcbiAgfSxcbiAgZGVidWdPdmVybGF5QmFzZToge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHRvcDogMCxcbiAgICByaWdodDogMCxcbiAgfSxcbiAgZGVidWdPdmVybGF5OiB7XG4gICAgYm90dG9tOiAwLFxuICAgIHdpZHRoOiAyMCxcbiAgICBib3JkZXJDb2xvcjogJ2JsdWUnLFxuICAgIGJvcmRlcldpZHRoOiAxLFxuICB9LFxuICBkZWJ1Z092ZXJsYXlGcmFtZToge1xuICAgIGxlZnQ6IDAsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnb3JhbmdlJyxcbiAgfSxcbiAgZGVidWdPdmVybGF5RnJhbWVMYXN0OiB7XG4gICAgbGVmdDogMCxcbiAgICBib3JkZXJDb2xvcjogJ2dyZWVuJyxcbiAgICBib3JkZXJXaWR0aDogMixcbiAgfSxcbiAgZGVidWdPdmVybGF5RnJhbWVWaXM6IHtcbiAgICBsZWZ0OiAwLFxuICAgIGJvcmRlckNvbG9yOiAncmVkJyxcbiAgICBib3JkZXJXaWR0aDogMixcbiAgfSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZpcnR1YWxpemVkTGlzdDtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUEwQkEsSUFBQUEsWUFBQSxHQUFBQyxPQUFBO0FBU0EsSUFBQUMsWUFBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUcs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