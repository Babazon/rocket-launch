42cb06684da8f851b340874c299403d9
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _jsxRuntime = require("react/jsx-runtime");
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var React = require('react');
var View = require('../Libraries/Components/View/View');
var requireNativeComponent = require('../Libraries/ReactNative/requireNativeComponent').default;
var RCTScrollView = requireNativeComponent('RCTScrollView');
function mockScrollView(BaseComponent) {
  var ScrollViewMock = function (_BaseComponent) {
    function ScrollViewMock() {
      (0, _classCallCheck2.default)(this, ScrollViewMock);
      return _callSuper(this, ScrollViewMock, arguments);
    }
    (0, _inherits2.default)(ScrollViewMock, _BaseComponent);
    return (0, _createClass2.default)(ScrollViewMock, [{
      key: "render",
      value: function render() {
        return (0, _jsxRuntime.jsxs)(RCTScrollView, Object.assign({}, this.props, {
          children: [this.props.refreshControl, (0, _jsxRuntime.jsx)(View, {
            children: this.props.children
          })]
        }));
      }
    }]);
  }(BaseComponent);
  return ScrollViewMock;
}
module.exports = mockScrollView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwiX2dldFByb3RvdHlwZU9mMiIsIl9pbmhlcml0czIiLCJfanN4UnVudGltZSIsIl9jYWxsU3VwZXIiLCJ0IiwibyIsImUiLCJkZWZhdWx0IiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJjb25zdHJ1Y3RvciIsImFwcGx5IiwiQm9vbGVhbiIsInByb3RvdHlwZSIsInZhbHVlT2YiLCJjYWxsIiwiUmVhY3QiLCJWaWV3IiwicmVxdWlyZU5hdGl2ZUNvbXBvbmVudCIsIlJDVFNjcm9sbFZpZXciLCJtb2NrU2Nyb2xsVmlldyIsIkJhc2VDb21wb25lbnQiLCJTY3JvbGxWaWV3TW9jayIsIl9CYXNlQ29tcG9uZW50IiwiYXJndW1lbnRzIiwia2V5IiwidmFsdWUiLCJyZW5kZXIiLCJqc3hzIiwiT2JqZWN0IiwiYXNzaWduIiwicHJvcHMiLCJjaGlsZHJlbiIsInJlZnJlc2hDb250cm9sIiwianN4IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIm1vY2tTY3JvbGxWaWV3LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqL1xuXG4vKiBlc2xpbnQtZW52IGplc3QgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBWaWV3ID0gcmVxdWlyZSgnLi4vTGlicmFyaWVzL0NvbXBvbmVudHMvVmlldy9WaWV3Jyk7XG5cbmNvbnN0IHJlcXVpcmVOYXRpdmVDb21wb25lbnQgPVxuICByZXF1aXJlKCcuLi9MaWJyYXJpZXMvUmVhY3ROYXRpdmUvcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCcpLmRlZmF1bHQ7XG5jb25zdCBSQ1RTY3JvbGxWaWV3OiAkRmxvd0ZpeE1lID0gcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCgnUkNUU2Nyb2xsVmlldycpO1xuXG5mdW5jdGlvbiBtb2NrU2Nyb2xsVmlldyhCYXNlQ29tcG9uZW50OiAkRmxvd0ZpeE1lKSB7XG4gIGNsYXNzIFNjcm9sbFZpZXdNb2NrIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gICAgcmVuZGVyKCk6IFJlYWN0LkVsZW1lbnQ8dHlwZW9mIFJDVFNjcm9sbFZpZXc+IHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxSQ1RTY3JvbGxWaWV3IHsuLi50aGlzLnByb3BzfT5cbiAgICAgICAgICB7dGhpcy5wcm9wcy5yZWZyZXNoQ29udHJvbH1cbiAgICAgICAgICA8Vmlldz57dGhpcy5wcm9wcy5jaGlsZHJlbn08L1ZpZXc+XG4gICAgICAgIDwvUkNUU2Nyb2xsVmlldz5cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBTY3JvbGxWaWV3TW9jaztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSAobW9ja1Njcm9sbFZpZXc6ICRGbG93Rml4TWUpO1xuIl0sIm1hcHBpbmdzIjoiQUFZQSxZQUFZOztBQUFDLElBQUFBLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxnQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUUsYUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUcsMkJBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFJLGdCQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBSyxVQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBTSxXQUFBLEdBQUFOLE9BQUE7QUFBQSxTQUFBTyxXQUFBQyxDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxXQUFBRCxDQUFBLE9BQUFMLGdCQUFBLENBQUFPLE9BQUEsRUFBQUYsQ0FBQSxPQUFBTiwyQkFBQSxDQUFBUSxPQUFBLEVBQUFILENBQUEsRUFBQUkseUJBQUEsS0FBQUMsT0FBQSxDQUFBQyxTQUFBLENBQUFMLENBQUEsRUFBQUMsQ0FBQSxZQUFBTixnQkFBQSxDQUFBTyxPQUFBLEVBQUFILENBQUEsRUFBQU8sV0FBQSxJQUFBTixDQUFBLENBQUFPLEtBQUEsQ0FBQVIsQ0FBQSxFQUFBRSxDQUFBO0FBQUEsU0FBQUUsMEJBQUEsY0FBQUosQ0FBQSxJQUFBUyxPQUFBLENBQUFDLFNBQUEsQ0FBQUMsT0FBQSxDQUFBQyxJQUFBLENBQUFQLE9BQUEsQ0FBQUMsU0FBQSxDQUFBRyxPQUFBLGlDQUFBVCxDQUFBLGFBQUFJLHlCQUFBLFlBQUFBLDBCQUFBLGFBQUFKLENBQUE7QUFFYixJQUFNYSxLQUFLLEdBQUdyQixPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzlCLElBQU1zQixJQUFJLEdBQUd0QixPQUFPLENBQUMsbUNBQW1DLENBQUM7QUFFekQsSUFBTXVCLHNCQUFzQixHQUMxQnZCLE9BQU8sQ0FBQyxpREFBaUQsQ0FBQyxDQUFDVyxPQUFPO0FBQ3BFLElBQU1hLGFBQXlCLEdBQUdELHNCQUFzQixDQUFDLGVBQWUsQ0FBQztBQUV6RSxTQUFTRSxjQUFjQSxDQUFDQyxhQUF5QixFQUFFO0VBQUEsSUFDM0NDLGNBQWMsYUFBQUMsY0FBQTtJQUFBLFNBQUFELGVBQUE7TUFBQSxJQUFBMUIsZ0JBQUEsQ0FBQVUsT0FBQSxRQUFBZ0IsY0FBQTtNQUFBLE9BQUFwQixVQUFBLE9BQUFvQixjQUFBLEVBQUFFLFNBQUE7SUFBQTtJQUFBLElBQUF4QixVQUFBLENBQUFNLE9BQUEsRUFBQWdCLGNBQUEsRUFBQUMsY0FBQTtJQUFBLFdBQUExQixhQUFBLENBQUFTLE9BQUEsRUFBQWdCLGNBQUE7TUFBQUcsR0FBQTtNQUFBQyxLQUFBLEVBQ2xCLFNBQUFDLE9BQUEsRUFBOEM7UUFDNUMsT0FDRSxJQUFBMUIsV0FBQSxDQUFBMkIsSUFBQSxFQUFDVCxhQUFhLEVBQUFVLE1BQUEsQ0FBQUMsTUFBQSxLQUFLLElBQUksQ0FBQ0MsS0FBSztVQUFBQyxRQUFBLEdBQzFCLElBQUksQ0FBQ0QsS0FBSyxDQUFDRSxjQUFjLEVBQzFCLElBQUFoQyxXQUFBLENBQUFpQyxHQUFBLEVBQUNqQixJQUFJO1lBQUFlLFFBQUEsRUFBRSxJQUFJLENBQUNELEtBQUssQ0FBQ0M7VUFBUSxDQUFPLENBQUM7UUFBQSxFQUNyQixDQUFDO01BRXBCO0lBQUM7RUFBQSxFQVIwQlgsYUFBYTtFQVUxQyxPQUFPQyxjQUFjO0FBQ3ZCO0FBRUFhLE1BQU0sQ0FBQ0MsT0FBTyxHQUFJaEIsY0FBMkIiLCJpZ25vcmVMaXN0IjpbXX0=